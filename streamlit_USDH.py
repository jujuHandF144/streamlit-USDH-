# -*- coding: utf-8 -*-
"""
Created on Tue Nov  8 12:03:36 2022

@author: licke
"""

####################################################################################################
####################################################################################################
####################################################################################################

###                                         IMPORTATION DES MODULES NECESSAIRES :
    
    
# Data-viz :
    

import numpy as np
import pandas as pd


import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

import seaborn as sns


import plotly.express as px





# Traitement d'images : 
    
    
    
# Chargement d'images : 
    
from PIL import Image

import imageio






# Pour √©viter d'avoir les messages warning : 

import warnings
warnings.filterwarnings('ignore')




# Streamlit :

import streamlit as st






##################################################################################################################### 
#####################################################################################################################
#####################################################################################################################

# Code pour avoir un √©cran large sur l'application Streamlit : 

    
st.set_page_config(layout = "wide", 
                   page_title = "Application statistiques USDH" , 
                   page_icon = "ü§æ")




#####################################################################################################################
#####################################################################################################################
#####################################################################################################################

### DICTIONNAIRE DES RENCONTRES d√©j√† DISPUTEES PAR LES SM1 DE L'USDH EN 2022-2023 : 
    
dico_rencontres_USDH = {"J1" : ("Pouzauges" , "USDH") ,  
                        "J2" : ("USDH" , "Lign√©") , 
                        "J3" : ("Authion" , "USDH") , 
                        "J4" : ("Connerre" , "USDH") , 
                        "J5" : ("USDH" , "St Berthevin") , 
                        "J6" : ("USDH" , "Pouzauges") , 
                        "J7" : ("Lign√©" , "USDH") , 
                        "J8" : ("USDH" , "Authion") , 
                        "J9" : ("USDH" , "Connerre") , 
                        "J10" : ("St Berthevin" , "USDH") , 
                        "J12" : ("USDH" , "St Nazaire") , 
                        "J13" : ("Talmont" , "USDH")}







### DICTIONNAIRE DES COULEURS ASSOCIEES A CHAQUE EQUIPE DU CHAMPIONNAT SM1 2022-2023 : 

dico_couleurs = {"USDH" : "red" ,
                 "Pouzauges" : "#252522" , # noir et blanc
                 "Lign√©" : "#E8E217" ,  # jaune
                 "Authion" : "#AD15C8" , # violet
                 "Connerre" : "#1957DB" ,   # bleu
                 "St Berthevin" : "#387A2D" ,  # vert fonc√©
                 "Clisson" : "#D205AD" ,  # noir et rose fonc√©
                 "RACC Nantes" : "#37B921" , # vert 
                 "Chabossi√®re" : "#CA0924" , # rouge et noir
                 "St Nazaire" : "#FB0426" , # rouge et blanc
                 "Talmont" : "#D205AD",  # noir et rose 
                 "La Ferri√®re" : "#E8E217"}  # jaune







### DICTIONNAIRE DES LIENS VERS LES PHOTOS DES LOGOS ASSOCIEES A CHAQUE EQUIPE DU CHAMPIONNAT SM1 2022-2023 : 

dico_logos = {"USDH" : "logo_USDH.png" ,
              "Pouzauges" : "logo_pouzauges.png" ,
              "Lign√©" : "logo_ligne.png" ,  
              "Authion" : "logo_authion.png" , 
              "Connerre" : "logo_la_ferte.png" ,
              "St Berthevin" : "logo_saint_berthevin.png" ,  
              "Clisson" : "logo_clisson.png" ,  
              "RACC Nantes" : "logo_racc_nantes.png" , 
              "Chabossi√®re" : "logo_la_chabossiere.png" , 
              "St Nazaire" : "logo_saint_nazaire.png" , 
              "Talmont" : "logo_talmont.png", 
              "La Ferri√®re" : "logo_la_ferriere.jpg"} 




#####################################################################################################################
#####################################################################################################################
#####################################################################################################################


###                                                     FONCTIONS DE BASE :



## Fonction permettant de lire une image prise sur internet :

def load_image(file):

    image = imageio.imread(file)

    return image






    
    
## Fonction permettant d'importer la base de donn√©es des SM1 de l'USDH et de la nettoyer pour analyse : 
    
def importation_et_nettoyage(link = "https://github.com/jujuHandF144/streamlit-USDH-/blob/main/base_de_donnees_feuilles_de_match_SM1.xlsx?raw=true") : 
    
    """Importe et nettoie rapidement la base de donn√©es des matchs de championnat des SM1 de l'USDH en 2022-2023."""
    
    
    
    # 1) Importation du fichier excel : 
    
    df = pd.read_excel(link)
    
    
    
    
    
    
    # 2) Nettoyage : 
    
    
    # a) Suppression de la colonne 'Unnamed: 0' : 
    
    df = df.drop(columns = ['Unnamed: 0'])
    
    
    
    
    
    
    # b) Conversion de type de la colonne 'intervalle de temps' :   'object' --> 'intervalles' : 
    
    
    df["intervalle de temps"] = pd.cut(x = df["temps"] ,             # on cat√©gorise la variable 'temps'
                                       bins = list(range(0,61,5)) ,  # on cr√©er des intervalles d'amplitude 5 minutes entre 0 et 60
                                       include_lowest = True)        # on inclut la borne inf√©rieure (0)
    







    return df





######################################################################################################################
######################################################################################################################

###                                                FONTIONS D'ANALYSE

######################################################################################################################
######################################################################################################################

## FONCTIONS LIEES A LA SITUATION NUMERIQUE D'UNE EQUIPE LORS D'1 MATCH PARTICULIER : 
    
######################################################################################################################
   
    
## Fonction permettant de retourner les p√©riodes d'inf√©riorit√© / d'√©galit√© / de sup√©riorit√© num√©rique de l'USDH lors d'un match pr√©cis (r√©cup√©r√©es √† l'oeil gr√¢ce √† un graphique des p√©riodes d'exclusion de l'USDH et de son adversaire lors de ce match) :
    
def periodes_situation_numerique_USDH(data , journee = "J1" , situation = "inf√©riorit√© num√©rique" , format_dates = "float") :
    
    
    """Retourne la liste de TOUTES les p√©riodes (date_debut , date_fin) jou√©es par l'USDH dans le type de situation num√©rique 
       (sup√©riorit√© / inf√©riorit√© / √©galit√© num√©rique) renseign√© en argument, au cours du match de championnat ayant eu lieu 
       lors de la journ√©e renseign√©e."""
    
    
    
    # Fonction de conversion d'une date du format str au format float, exprim√©e en minutes : 
    
    en_minutes = lambda temps : int(temps.split(sep = ":")[0]) + (int(temps.split(sep = ":")[1])/60)

    
    
    
    # SI la journ√©e de championnat renseign√©e a bien d√©j√† eu lieu :

    if journee in dico_rencontres_USDH.keys() :
        
        
        
        
        # Journ√©e 1 : Pouzauges - USDH

        if journee == "J1" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('13:40' , '14:05') , ('28:39' , '30:39') , ('37:27' , '39:27') , ('41:42' , '41:53') , 
                                ('41:53' , '43:53') , ('54:30' , '54:40') , ('54:40' , '56:40')]






                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('4:37' , '6:37') , ('11:40' , '13:40') , ('33:55' , '35:55') , ('39:42' , '41:42') , ('52:30' , '54:30')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '4:37') , ('6:37' , '11:40') , ('14:05' , '28:39') , ('30:39' , '33:55') , ('35:55' , '37:27') , 
                                ('39:27' , '39:42') , ('43:53' , '52:30') , ('56:40' , '60:00')]




                if format_dates == "str" : 

                    return periodes


                elif format_dates == "float" : 


                    # Conversion des dates donn√©es en minutes :

                    periodes = [(en_minutes(periode[0]) , en_minutes(periode[1])) for periode in periodes]

                    return periodes


                else : 

                    raise ValueError("param√®tre attendu pour l'argument 'format_dates' : 'float' ou 'str'.")






            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")










        # Journ√©e 2 : USDH - Lign√©

        elif journee == "J2" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('27:59' , '29:59') , ('44:49' , '46:49')]







                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('13:57' , '15:57') , ('32:54' , '34:54')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '13:57') , ('15:57' , '27:59') , ('29:59' , '32:54') , ('34:54' , '44:49') , 
                                ('46:49' , '60:00')]




                if format_dates == "str" : 

                    return periodes


                elif format_dates == "float" : 


                    # Conversion des dates donn√©es en minutes :

                    periodes = [(en_minutes(periode[0]) , en_minutes(periode[1])) for periode in periodes]

                    return periodes


                else : 

                    raise ValueError("param√®tre attendu pour l'argument 'format_dates' : 'float' ou 'str'.")






            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")









        # Journ√©e 3 : Authion - USDH

        elif journee == "J3" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('18:41' , '20:16') , ('56:22' , '57:52')]





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('2:23' , '4:23') , ('10:42' , '12:42') , ('16:41' , '18:16') , ('48:18' , '50:18') , 
                                ('58:22' , '60:00')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '2:23') , ('4:23' , '10:42') , ('12:42' , '16:41') , ('18:16' , '18:41') , ('20:16' , '48:18') , 
                                ('50:18' , '56:22') , ('57:52' , '58:22')]

                    


            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")









        # Journ√©e 4 : Connerre - USDH

        elif journee == "J4" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('17:23' , '18:11') , ('24:24' , '27:49') , ('30:36' , '31:59') , ('44:32' , '46:32') , 
                                ('49:53' , '51:53') , ('56:17' , '58:17')]




                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('3:27' , '5:27') , ('15:23' , '16:11') , ('19:25' , '21:25') , ('28:36' , '29:59') , 
                                ('41:45' , '43:45')]




                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '3:27') , ('5:27' , '15:23') , ('16:11' , '17:23') , ('18:11' , '19:25') , ('21:25' , '24:24') , 
                                ('27:49' , '28:36') , ('29:59' , '30:36') , ('31:59' , '41:45') , ('43:45' , '44:32') , ('46:32' , '49:53') , 
                                ('51:53' , '56:17') , ('58:17' , '60:00')]

                    

            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")









        # Journ√©e 5 : USDH - St Berthevin

        elif journee == "J5" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('24:57' , '26:25') , ('58:29' , '60:00')]






                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('19:53' , '21:53') , ('22:57' , '24:25') , ('39:51' , '41:51') , ('43:05' , '45:05')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '19:53') , ('21:53' , '22:57') , ('24:25' , '24:57') , ('26:25' , '39:51') , 
                                ('41:51' , '43:05') , ('45:05' , '58:29')]





            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")











        # Journ√©e 6 : USDH - Pouzauges (match retour)

        elif journee == "J6" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('8:00' , '10:00') , ('22:25' , '26:09') , ('47:24' , '49:24') , ('56:17' , '58:04') , ('59:15' , '60:00')]





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('19:22' , '21:22') , ('28:27' , '30:27') , ('51:24' , '53:24') , ('54:17' , '56:04')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '8:00') , ('10:00' , '19:22') , ('21:22' , '22:25') , ('26:09' , '28:27') , 
                                ('30:27' , '47:24') , ('49:24' , '51:24') , ('53:24' , '54:17') , ('56:04' , '56:17') , 
                                ('58:04' , '59:15')]

                    

            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")


    
    
    
    
    
 

    
    
    
        # Journ√©e 7 : Lign√© - USDH (match retour)

        elif journee == "J7" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = []





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('5:56' , '7:56') , ('33:26' , '35:26')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '5:56') , ('7:56' , '33:26') , ('35:26' , '60:00')]

                    

            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")

    
    
    
    
    
    
    
    
    
    
    
        # Journ√©e 8 : USDH - Authion (retour)

        elif journee == "J8" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = []


                    

                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('23:02' , '25:02') , ('50:31' , '52:31') , ('54:23' , '56:23') , ('58:53' , '60:00')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '23:02') , ('25:02' , '50:31') , ('52:31' , '54:23') , ('56:23' , '58:53')]

                    

            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")
    
    
    
    
    
    

    
    

        # Journ√©e 9 : USDH - Connerre (retour)

        elif journee == "J9" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('21:43' , '22:46') , ('32:44' , '34:44') , ('38:37' , '40:37') , ('55:21' , '57:21')]


                    

                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('19:43' , '20:46') , ('28:12' , '30:12') , ('45:00' , '47:00') , ('58:56' , '60:00')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '19:43') , ('20:46' , '21:43') , ('22:46' , '28:12') , ('30:12' , '32:44') , 
                                ('34:44' , '38:37') , ('40:37' , '45:00') , ('47:00' , '55:21') , ('57:21' , '58:56')]

                    

            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")
    
    
    
    
        
        
        
        
        # Journ√©e 10 : USDH - St Berthevin

        elif journee == "J10" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('4:16' , '6:16') , ('23:29' , '25:43') , ('46:51' , '48:51')]





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('14:29' , '16:29') , ('27:22' , '27:43') , ('48:53' , '50:53') , ('56:23' , '58:23')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '4:16') , ('6:16' , '14:29') , ('16:29' , '23:29') , ('25:43' , '27:22') ,  
                                ('27:43' , '46:51') , ('48:51' , '48:53') , ('50:53' , '56:23') , ('58:23' , '60:00')]

                    

                    
            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")
    

        
        
        
        

        
        # Journ√©e 11 : RACC Nantes - USDH (la feuille de match n'a pas √©t√© enregistr√©e !)

        elif journee == "J11" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                periodes = []

                
                
                
            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")
        
        
        
        
        

        
        
        # Journ√©e 12 : USDH - St Nazaire

        elif journee == "J12" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('5:49' , '7:49') , ('43:31' , '45:31')]





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('46:58' , '48:58') , ('56:59' , '58:59')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '5:49') , ('7:49' , '43:31') , ('45:31' , '46:58') , ('48:58' , '56:59') ,  ('58:59' , '60:00')]

                    

                    
            else : 

                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique' , '√©galit√© num√©rique' ou 'sup√©riorit√© num√©rique'.")
        
        
        
        
        
        
        
        # Journ√©e 13 : Talmont - USDH

        elif journee == "J13" : 


            if situation in ["inf√©riorit√© num√©rique" , "√©galit√© num√©rique" , "sup√©riorit√© num√©rique"] :


                if situation == "inf√©riorit√© num√©rique" : 

                    periodes = [('13:42' , '15:42') , ('42:14' , '44:14')]





                elif situation == "sup√©riorit√© num√©rique" : 

                    periodes = [('21:12' , '23:12') , ('23:23' , '25:23') , ('35:48' , '37:48') , ('54:15' , '56:15') ,  
                                ('58:52' , '60:00')]





                else :   # situation == "√©galit√© num√©rique" : 

                    periodes = [('0:00' , '13:42') , ('15:42' , '21:12') , ('23:12' , '23:23') , ('25:23' , '35:48') , 
                                ('37:48' , '42:14') , ('44:14' , '54:15') , ('56:15' , '58:52')]
        
        
        
        
        
    
    
    
    
        if format_dates == "str" : 

            return periodes
        

        
        
        

        elif format_dates == "float" : 


            # Conversion des dates donn√©es en minutes :

            periodes = [(en_minutes(periode[0]) , en_minutes(periode[1])) for periode in periodes]

            return periodes
        
        
        


        else : 

            raise ValueError("param√®tre attendu pour l'argument 'format_dates' : 'float' ou 'str'.")
            
            
            
            

    
    
    
    # SINON, si la journ√©e de championnat renseign√©e n'a pas encore eu lieu :
    
    else : 
        
        raise ValueError(f"A ce stade de la saison, seules {len(dico_rencontres_USDH)} journ√©es de championnat ont √©t√© disput√©es par l'USDH !")
    















## Fonction permettant de retourner les p√©riodes d'inf√©riorit√© / d'√©galit√© / de sup√©riorit√© num√©rique de l'√©quipe VOULUE lors d'un match bien pr√©cis :

def periodes_situation_numerique_equipe(data , journee = "J1" , situation = "inf√©riorit√© num√©rique" , equipe = "USDH" , 
                                        format_dates = "float") :
    
    
    """Retourne la liste de TOUTES les p√©riodes (date_debut , date_fin) jou√©es par l'√©quipe renseign√©e dans le type de situation num√©rique 
       (sup√©riorit√© / inf√©riorit√© / √©galit√© num√©rique) renseign√© en argument, au cours du match de championnat ayant eu lieu 
       lors de la journ√©e renseign√©e."""
    
    
    
    # SI l'√©quipe renseign√©e jouait bel et bien lors de la journ√©e de championnat renseign√©e :
    
    if equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() :
        
        
        # CAS 1 : si l'√©quipe renseign√©e est l'USDH, aucun soucis :
        
        if equipe == "USDH" : 
            
            situation_a_considerer = situation   # les situations num√©riques de l'√©quipe renseign√©e en argument sont celles de l'USDH
            
            
            
            
            
            
        # CAS 2 : si l'√©quipe renseign√©e N'est PAS l'USDH, attention : cette √©quipe est en inf√©riorit√© (resp. sup√©riorit√©) num√©rique lorsque l'USDH est en sup√©riorit√© (rest.inf√©riorit√©) num√©rique !
        
        else : 
            
            
            
            # Si je souhaite obtenir les p√©riodes de SUPERIORITE num√©rique de cette √©quipe QUI N'EST PAS L'USDH...
            
            if situation == "sup√©riorit√© num√©rique" : 
                
                situation_a_considerer = "inf√©riorit√© num√©rique"   # ... Je dois regarder les p√©riodes d'INFERIORITE num√©rique de l'USDH !
                
                
                
            
            # Si, √† contrario, je souhaite obtenir les p√©riodes d'INFERIORITE num√©rique de cette √©quipe QUI N'EST PAS L'USDH...
            
            elif situation == "inf√©riorit√© num√©rique" : 
                
                situation_a_considerer = "sup√©riorit√© num√©rique"   # ... Je dois regarder les p√©riodes de SUPERIORITE num√©rique de l'USDH !
            
            
            
             
            # Sinon, si je souhaite obtenir les p√©riodes d'EGALITE num√©rique de cette √©quipe QUI N'EST PAS L'USDH, rien √† faire de diff√©rent car les 2 √©quipes sont √† √©galit√© num√©riques simultan√©ment...
            
            else :   # situation == "√©galit√© num√©rique" : 
                
                situation_a_considerer = "√©galit√© num√©rique"   # Les p√©riodes d'√©galit√© num√©riques de cette √©quipe sont aussi celles de l'USDH, et r√©ciproquement
            
            
            
            
            
         
        
        # On r√©cup√®re la liste des p√©riodes jou√©es par cette √©quipe dans ce type de situation num√©rique : 

        L_periodes_situation = periodes_situation_numerique_USDH(data = data , journee = journee , 
                                                                 situation = situation_a_considerer , 
                                                                 format_dates = format_dates)
        
        
        
        
        return L_periodes_situation
    
    
    
    
    
    
    
    
    # SINON, si l'√©quipe renseign√©e NE jouait PAS lors de la journ√©e de championnat renseign√©e :
    
    else :
        
        
        # On r√©cup√®re la liste des 2 √©quipes qui jouaient ce jour-l√† :
        
        L_equipes = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe != " "]
        
        
        
        
        if journee == "J1" : 
        
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®re journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}")
                             
                             
                             
                             
        else : 
                             
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®me journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}")
                             
                             
















## Fonction permettant de r√©cup√©rer le nombre de buts marqu√©s / encaiss√©s + le diff√©rentiel de buts de l'√©quipe renseign√©e lors de CHAQUE p√©riode jou√©e par cette √©quipe dans la situation num√©rique voulue, au cours d'un match bien pr√©cis :
    
def bilan_situation_numerique_equipe(data , journee = "J5" , equipe = "USDH" , situation = "inf√©riorit√© num√©rique") :
    
    """Retourne un dictionnaire indiquant, pour chaque p√©riode jou√©e par l'√©quipe renseign√©e dans le type de situation num√©rique 
       renseign√© lors de la journ√©e de championnat renseign√©e, le nombre buts marqu√©s et encaiss√©s + le diff√©rentiel de buts."""
    
    
    
    # SI l'√©quipe renseign√©e jouait bel et bien lors de la journ√©e de championnat renseign√©e :
    
    if equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() :
        
        
        
        # On commence par r√©cup√©rer le nom de l'adveraire de l'√©quipe renseign√©e lors de cette journ√©e de championnat : 
        
        adversaire = [e for e in data[data["journ√©e"] == journee]["√©quipe"].unique() if e not in [" " , equipe]]
        adversaire = adversaire[0]
        
        
        
        # On r√©cup√®re, pour CHAQUE type de situation num√©rique possible (inf√©riorit√© / sup√©rorit√© / √©galit√© num√©rique), la liste de TOUTES les p√©riodes jou√©es par cette √©quipe au cours de ce match :
        
        L_periodes_inf = periodes_situation_numerique_equipe(data = data , journee = journee , situation = "inf√©riorit√© num√©rique" , equipe = equipe , format_dates = "float")  # la liste des p√©riodes d'INFERIORITE num√©rique de ette √©quipe
        L_periodes_sup = periodes_situation_numerique_equipe(data = data , journee = journee , situation = "sup√©riorit√© num√©rique" , equipe = equipe , format_dates = "float")  # la liste des p√©riodes de SUPERIORITE num√©rique de cette √©quipe
        L_periodes_ega = periodes_situation_numerique_equipe(data = data , journee = journee , situation = "√©galit√© num√©rique" , equipe = equipe , format_dates = "float")      # la liste des p√©riodes d'EGALITE num√©rique de cette √©quipe




        # 2) On regroupe √† pr√©sent TOUTES ces p√©riodes dans 1 seul et m√™me dictionnaire d'associations (periode , situation_num_periode) , avec 'periode' un tuple des dates de d√©but et de fin de la p√©riode : 

        dico_periodes = dict([(periode , "inf√©riorit√© num√©rique") for periode in L_periodes_inf] + [(periode , "sup√©riorit√© num√©rique") for periode in L_periodes_sup] + [(periode , "√©galit√© num√©rique") for periode in L_periodes_ega])




        # 3) On r√©cup√®re la LISTE tri√©e en ordre croissant de ces p√©riodes disjointes :

        L_periodes_triees = sorted(dico_periodes)  




        # 4) On instancie un dictionnaire initialement vide, destin√© √† contenir les associations (periode , bilan_periode) , avec 'bilan_periode' un dictionnaire lui aussi qui contiendra le nombre de buts marqu√©s par l'USDH sur cette p√©riode, le nombre de buts encaiss√©s ainsi que le diff√©rentiel de buts : 

        dico_bilan_periodes_equipe = {}




        # 5) Pour chacune des p√©riodes de la liste L_periodes_triees, on r√©cup√®re le nombre de buts marqu√©s + le nombre de buts encaiss√©s + le diff√©rentiel de buts en faveur de l'USDH :

        for periode , num_periode in zip(L_periodes_triees , range(len(L_periodes_triees))) : 


            date_debut = periode[0]  # date √† laquelle d√©bute la p√©riode
            date_fin = periode[1]    # date √† laquelle se termine la p√©riode



            # Si l'on est en train de regarder la toute derni√®re p√©riode ==> il faut inclure les bornes inf√©rieure ET sup√©rieure.

            if num_periode == len(L_periodes_triees)-1 :


                # Filtrage des actions de jeu ayant eu lieu lors de cette p√©riode :

                data_periode = data[(data["journ√©e"] == journee) & (data["temps"] >= date_debut) & (data["temps"] <= date_fin)]  # on INCLU la borne sup√©rieure de la p√©riode





            # SINON, si l'on regarde n'importe quelle AUTRE p√©riode QUE la derni√®re => il faut inclure la borne inf√©rieure MAIS exclure la borne sup√©rieure (car le match d√©bute forc√©ment √† √©galit√© num√©rique, et que la 1√®re exclusion survient et d√©bute √† la date de d√©but de la 2√®me p√©riode de la liste tri√©e) :

            else : 


                # Filtrage des actions de jeu ayant eu lieu lors de cette p√©riode :

                data_periode = data[(data["journ√©e"] == journee) & (data["temps"] >= date_debut) & (data["temps"] < date_fin)]  # on EXCLU la borne sup√©rieure de la p√©riode





            # R√©cup√©ration du nombre de buts marqu√©s + encaiss√©s par l'USDH  + du diff√©rentiel de buts de l'USDH sur cette p√©riode : 

            nbr_buts_marques_equipe_periode = len(data_periode[(data_periode["√©quipe"] == equipe) & (data_periode["action"].isin(["but" , "but 7m"]))])
            nbr_buts_encaisses_equipe_periode = len(data_periode[(data_periode["√©quipe"] == adversaire) & (data_periode["action"].isin(["but" , "but 7m"]))])
            differentiel_buts_equipe_periode = nbr_buts_marques_equipe_periode - nbr_buts_encaisses_equipe_periode



            # Stockage de la p√©riode et de son bilan dans le dictionnaire d√©di√© : 

            dico_bilan_periodes_equipe[periode] = {f"buts marqu√©s {equipe}" : nbr_buts_marques_equipe_periode , 
                                                   f"buts encaiss√©s {equipe}" : nbr_buts_encaisses_equipe_periode , 
                                                   f"diff√©rentiel de buts {equipe}" : differentiel_buts_equipe_periode}
                                                   







        # 6) On N'extrait du dictionnaire dico_bilan_periodes_equipe QUE les p√©riodes de la situation num√©rique souhait√©e : 

        dico_bilan_periodes_situation = {}  # On instancie un dictionnaire initialement vide destin√© √† contenir le bilan de chaque p√©riode jou√©e par cette √©quipe UNIQUEMENT dans le type de situation num√©rique renseign√© :

        
        # Pour chaque p√©riode (tous types de situations num√©riques confondus) :
        
        for periode , situation_numerique_periode in dico_periodes.items() : 
            
            
            # Si la situation num√©rique de l'√©quipe lors de cette p√©riode est celle que l'on souhaite voir :

            if situation_numerique_periode == situation : 


                dico_bilan_periodes_situation[periode] = dico_bilan_periodes_equipe[periode]  # on ajoute la p√©riode et son bilan au dictionnaire final qui sera retourn√©




                
                

        return dico_bilan_periodes_situation
    
    
    
    
    
    
    
    # SINON, si l'√©quipe renseign√©e ne jouait pas lors de la journ√©e de championnat renseign√©e : 
    
    else : 
        
        
        # On r√©cup√®re la liste des 2 √©quipes qui jouaient ce jour-l√† :
        
        L_equipes = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe != " "]
        
        
        
        
        if journee == "J1" : 
        
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®re journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}.")
                             
                             
                             
                             
        else : 
                             
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®me journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}.")
                             
                             





















## Fonction retournant une figure sur laquelle est trac√©e la droite des 60 minutes du match, d√©coup√©e selon les p√©riodes d'inf√©riorit√© / de sup√©riorit√© / d'√©galit√© num√©rique de l'√©quipe renseign√©e lors de la journ√©e de championnat renseign√©e :
    
def droite_sup_inf_numeriques_equipe(fig , ax , data , journee = "J1" , equipe = "USDH" , afficher_scores = True , 
                                     afficher_differentiels = True , afficher_bilan = True , show_title = True , 
                                     text_color = "black") :
    
    
    
    """Trace une droite des 60 minutes de match d√©coup√©es et color√©es selon la situation num√©rique dans laquelle se trouve
       l'√©quipe renseign√©e en argument, lors de la journ√©e de championnat voulue."""
    
    
    
    
    if text_color == "white" : 
        
        fig.set_facecolor("#0E1117")
        ax.set_facecolor("#0E1117")
    
    
    
    
    
    # SI l'√©quipe renseign√©e en argument jouait bel et bien lors de la journ√©e de championnat renseign√©e :
    
    if equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() :
        
        
        
        # On commence par r√©cup√©rer le nom de l'adveraire de l'√©quipe renseign√©e lors de cette journ√©e de championnat : 
        
        adversaire = [e for e in data[data["journ√©e"] == journee]["√©quipe"].unique() if e not in [" " , equipe]]
        adversaire = adversaire[0]
        
        
        
        # On r√©cup√©re √† pr√©sent, pour chaque type de situation num√©rique possible (inf√©riorit√© / sup√©riorit√© / √©galit√© num√©rique), le dictionnaire du bilan de cette √©quipe lors de chaqu√© p√©riode jou√©e dans ce type de situation num√©rique :

        dico_bilan_periodes_inf_equipe = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = "inf√©riorit√© num√©rique")
        dico_bilan_periodes_sup_equipe = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = "sup√©riorit√© num√©rique")
        dico_bilan_periodes_ega_equipe = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = "√©galit√© num√©rique")


        # A partir des cl√©s de ces 3 dictionnaires, on r√©cup√®e pour chaque type de situation num√©rique possible, la liste des p√©riodes jou√©es par cette √©quipe dans ce type de situation num√©rique :
        
        L_periodes_inf_equipe = list(dico_bilan_periodes_inf_equipe.keys())
        L_periodes_sup_equipe = list(dico_bilan_periodes_sup_equipe.keys())
        L_periodes_ega_equipe = list(dico_bilan_periodes_ega_equipe.keys())
        
        
        
        # On stocke les 3 listes dans une liste L_periodes_equipe : 

        L_periodes_equipe = [L_periodes_inf_equipe , L_periodes_ega_equipe , L_periodes_sup_equipe]
        
        
        
        # On d√©finit les graduations en abscisses --> 1 graduation √† chaque d√©but / fin de p√©riode (avec comme texte, la date exprim√©e au format 'str') :

        xtick_couples = L_periodes_inf_equipe + L_periodes_ega_equipe + L_periodes_sup_equipe
        xticklabel_couples = periodes_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = "inf√©riorit√© num√©rique" , format_dates = "str") + periodes_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = "√©galit√© num√©rique" , format_dates = "str") + periodes_situation_numerique_equipe(data = data , journee = journee , equipe = equipe ,  situation = "sup√©riorit√© num√©rique" , format_dates = "str") 


        
        
        # On personnalise la figure renseign√©e : 

        ax.spines["top"].set_color(None)
        ax.spines["left"].set_color(None)
        ax.spines["right"].set_color(None)
        ax.spines["bottom"].set_position(("data" , 0.4995))
        ax.spines["bottom"].set_color(text_color)

        ax.set_yticks([])
        ax.set_xticks([couple[0] for couple in xtick_couples] + [60.0])
        ax.tick_params(axis = 'x', colors = text_color)   # couleur des graduations
        ax.set_xticklabels([couple[0] for couple in xticklabel_couples] + ['60:00'] , rotation = 90)

        ax.set_xlim([0,60])
        ax.set_ylim([0.4995 , 0.5004])




        # Ligne symbolisant la mi-temps : 

        ax.plot([30 , 30] , 
                [0.4995 , 0.500405] , 
                ls = "--" , 
                color = "red")
        
        
        
        ax.text(x = 30 , 
                y = 0.50041 , 
                horizontalalignment = "center" , 
                s = "mi-temps" , 
                fontsize = 12 ,
                color = "red")



        


        # Pour chaque type de situation num√©rique possible (inf√©riorit√© / sup√©riorit√© / √©galit√© num√©rique) : 

        k = 0

        for L_periodes_situations_nums_equipe , couleur in zip(L_periodes_equipe , ["red" , "#00D1FF" , "lime"]) : 

            
            if k == 0 : 

                situation_num = "inf√©riorit√© num√©rique"

                

            elif k == 1 : 

                situation_num = "√©galit√© num√©rique"


                
            elif k == 2 : 

                situation_num = "sup√©riorit√© num√©rique"
                
                
                
                
            
            # R√©cup√©ration du dictionnaire des bilans de cette √©quipe sur chaque p√©riode qu'elle a jou√©e dans ce type de situation num√©rique :

            dico_scores_situation_num = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = situation_num)




                

            # Pour chaque p√©riode jou√©e dans cette situation num√©rique, on trace le segment correspondant √† la p√©riode dans la couleur ad√©quate :

            for periode in L_periodes_situations_nums_equipe : 

                
                # On dessine un rectangle pour cette p√©riode-l√† :
                
                x = periode
                y1 = [0.5 , 0.5]
                y2 = [0.50025 , 0.50025]
                
                
                # bord horizontal INFERIEUR du rectangle :

                ax.plot(list(periode) , 
                        [0.5 , 0.5] , 
                        color = couleur , 
                        lw = 1)
                
                
                
                # bord horizontal SUPERIEUR du rectangle :

                ax.plot(list(periode) , 
                        [0.50025 , 0.50025] , 
                        color = couleur , 
                        lw = 1)

                
                
                # bord vertical GAUCHE du rectangle :

                ax.plot(2*[periode[0]] , 
                        [0.5 , 0.50025] , 
                        color = couleur , 
                        lw = 1)


                
                # bord vertical DROIT du rectangle :

                ax.plot(2*[periode[1]] , 
                        [0.5 , 0.50025] , 
                        color = couleur , 
                        lw = 1)




                # On colorie la surface entre les 4 bornes du rectangle :

                ax.fill_between(x = x , 
                                y1 = y1 , 
                                y2 = y2 , 
                                color = couleur)





                
                
                # SI on souhaite afficher, pour cette p√©riode, le score ET/OU le diff√©rentiel de buts : 

                if (afficher_scores == True) or (afficher_differentiels == True) : 
                    

                    # R√©cup√©ration du score des 2 √©quipes sur cette p√©riode : 

                    score_equipe_periode = dico_scores_situation_num[periode][f"buts marqu√©s {equipe}"]
                    score_adversaire_periode = dico_scores_situation_num[periode][f"buts encaiss√©s {equipe}"]
                    differentiel_periode = dico_scores_situation_num[periode][f"diff√©rentiel de buts {equipe}"]
                    
                    
                    
                    
                    
                    
                    # SI on souhaite afficher le score sur cette p√©riode : 
                        
                    if afficher_scores == True : 


                        # Annotation du score sur la figure au-dessus de la p√©riode correspondante :

                        ax.text(x = (periode[0] + periode[1])/1.995 , 
                                y = (0.5 + 0.50025)/2 , 
                                color = "black" , 
                                s = f"{score_equipe_periode} - {score_adversaire_periode}" , 
                                horizontalalignment = "center" , 
                                verticalalignment = "center" ,
                                fontsize = 11.75 , 
                                rotation = 90)





                    # Si on souhaite afficher le diff√©rentiels de buts sur cette p√©riode :

                    if afficher_differentiels == True :
                        
                        
                        
                        # Gestion de l'affichage du diff√©rentiel de buts, suivant son signe :

                    
                        if differentiel_periode > 0 :

                            differentiel_txt = "+ " + str(differentiel_periode)
                            color_differentiel = "green"



                        elif differentiel_periode == 0 : 

                            differentiel_txt = str(differentiel_periode)
                            color_differentiel = "orange"



                        else : 

                            differentiel_txt = "- " + str(abs(differentiel_periode))
                            color_differentiel = "red"

                        
                        
                        


                        # Annotation du diff√©rentiel de buts sur la figure au-dessus de la p√©riode correspondante :

                        ax.text(x = (periode[0] + periode[1])/2 , 
                                y = 0.500305 , 
                                color = color_differentiel , 
                                s = differentiel_txt , 
                                horizontalalignment = "center" , 
                                fontsize = 13.5)



                    
            
            
            # SI on souhaite afficher le bilan de cette √©quipe sur ce type de situation num√©rique : 
                        
            if afficher_bilan == True : 


                score_equipe_type_situation = sum([dico_scores_situation_num[periode][f"buts marqu√©s {equipe}"] for periode in dico_scores_situation_num.keys()])         # le nbr de buts marqu√©s par cette √©quipe dans ce type de situation num√©rique
                score_adversaire_type_situation = sum([dico_scores_situation_num[periode][f"buts encaiss√©s {equipe}"] for periode in dico_scores_situation_num.keys()])   # le nbr de buts encaiss√©s par cette √©quipe dans ce type de situation num√©rique
                differentiel_type_situation = score_equipe_type_situation - score_adversaire_type_situation   # le diff√©rentiel de buts de cette √©quipe sur ce type de situation num√©rique

                
                # Gestion de l'affichage des scores selon leur signe (signe + couleur) :
                
                if differentiel_type_situation > 0 :
                        
                    color_differentiel = "lime"
                    differentiel_text = "+ " + str(differentiel_type_situation)


                elif differentiel_type_situation == 0 : 

                    color_differentiel = "orange"
                    differentiel_text = str(differentiel_type_situation)


                else : 

                    color_differentiel = "red"
                    differentiel_text = "- " + str(abs(differentiel_type_situation))
                        
                        
                        
                

                # Annotation du bilan en bas √† gauche de la figure :

                ax.text(x = 0 , 
                        y = 0.49965 - k*0.00005 , 
                        color = couleur , 
                        s = f"BILAN {situation_num} {equipe} :" ,
                        fontsize = 13)
                
                
                
                ax.text(x = 17.5 , 
                        y = 0.49965 - k*0.00005 , 
                        color = couleur , 
                        s = f"{score_equipe_type_situation} - {score_adversaire_type_situation}" , 
                        fontsize = 13)
                
                
                
                
                ax.text(x = 21.5 , 
                        y = 0.49965 - k*0.00005 , 
                        color = color_differentiel , 
                        s = f"({differentiel_text})"  , 
                        fontsize = 13)
                
                

            
            
            k += 1
            
            
            
            
                
            

        # Cr√©ation manuelle de la l√©gende √† afficher :
        

        legende_inf = mpatches.Patch(color = "red" ,
                                     label = "inf√©riorit√© num√©rique USDH")

        legende_sup = mpatches.Patch(color = "lime" , 
                                     label = "sup√©riorit√© num√©rique USDH")

        legende_ega = mpatches.Patch(color = "#00D1FF" ,
                                     label = "√©galit√© num√©rique")


        ax.legend(handles = [legende_inf , legende_sup , legende_ega] , 
                  loc = "lower right")




        

        # SI l'on souhaite ajouter un titre au graphique : 

        if show_title == True :

            fig.suptitle(f"{journee} : d√©coupage du match {dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]} suivant la situation num√©rique de {equipe}." , 
                         fontsize = 21 , 
                         family = "serif" , 
                         color = text_color) 
            
            
            



















## Fonction permettant de calculer la dur√©e totale pass√©e par une √©quipe en sup√©riorit√© / inf√©riorit√© / √©galit√© num√©rique (au choix) lors d'un match donn√© :
    
def duree_passee_situation_numerique_equipe(data , journee = "J1" , equipe = "USDH" , format_duree = "float" , 
                                            situation = "inf√©riorit√© num√©rique") :
    
    
    """Retourne le temps pass√© par l'√©quipe renseign√©e en argument dans la situation num√©rique voulue, lors du match renseign√©."""
    
    
    
    # SI l'√©quipe renseign√©e en argument jouait bel et bien lors de la journ√©e de championnat renseign√©e :
    
    if equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() :
        
        
        
        # On r√©cup√®re la liste de TOUTES les p√©riodes que cette √©quipe a jou√© dans le type de situation num√©rique renseign√© :
        
        L_periodes_situation_num_equipe = periodes_situation_numerique_equipe(data = data , journee = journee , equipe = equipe , situation = situation , format_dates = "float")




        # A partir de la liste ci-dessus, on r√©cup√®re √† pr√©sent la liste des dur√©es de chaque p√©riode que cette √©quipe a jou√© dans le type de situation num√©rique renseign√© : 

        L_durees_periodes_sitation_num_equipe = [periode[1] - periode[0] for periode in L_periodes_situation_num_equipe]




        # On calcule alors le temps TOTAL que cette √©quipe a jou√© dans ce type de situation num√©rique en sommant les dur√©es contenues dans la liste ci-dessus :

        duree_totale_situation_num_equipe = sum(L_durees_periodes_sitation_num_equipe)




        # CAS 1 : SI je souhaite avoir cette dur√©e au format float (en minutes) : 

        if format_duree == "float" :

            return duree_totale_situation_num_equipe
        
        


        # CAS 2 : SI je souhaite avoir cette dur√©e en pourcentage des 60 minutes du match : 

        elif format_duree in ["pct" , "pourcentage" , "%"] :

            return (duree_totale_situation_num_equipe/60)*100



        else : 

            raise ValueError("param√®tre attendu pour l'argument 'format_duree' : 'float' , 'pct' , 'pourcentage' ou '%'.")
            
            
            

            
            
            
            
            
            
    # SINON, si l'√©quipe renseign√©e ne jouait pas lors de la journ√©e de championnat renseign√©e : 
    
    else : 
        
        
        # On r√©cup√®re la liste des 2 √©quipes qui jouaient ce jour-l√† :
        
        L_equipes = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe != " "]
        
        
        
        
        if journee == "J1" : 
        
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®re journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}.")
                             
                             
                             
                             
        else : 
                             
            raise ValueError(f"{equipe} ne jouait pas lors de la {journee[-1]}√®me journ√©e : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}.")
                             
                             
                             
                             
                             





######################################################################################################################

## FONCTIONS LIEES A LA SITUATION AU SCORE D'UNE EQUIPE LORS D'1 MATCH PARTICULIER : 
    
######################################################################################################################


## Fonction permettant de calculer le temps pass√© par une l'USDH derri√®re / √† √©galit√© / devant au score :

def duree_situation_score(data , journee = "J5") : 
    
    """Calcule et retourne dans un dictionnaire le temps pass√© par l'USDH √† mener, √† √©galit√© et √† √™tre men√© au score lors 
       de la journ√©e renseign√©e en argument."""
    
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    # Cr√©ation d'un dictionnaire destin√© √† recevoir les bornes des deltas √† calculer :
    
    dates = {"USDH m√®ne" : [] , 
             "√©galit√©" : [] , 
             "adversaire m√®ne" : []}
    
    
    
    
    # Cr√©ation d'un dictionnaire destin√© √† recevoir les dur√©es calcul√©es :
    
    durees = {"USDH m√®ne" : [] , 
              "√©galit√©" : [] , 
              "adversaire m√®ne" : []}
    
    
    
    
    # Cr√©ation d'un dictionnaire destin√© √† recevoir les dur√©es totales (= somme des dur√©es calcul√©es) :
    
    durees_totales = {"USDH m√®ne" : [] , 
                      "√©galit√©" : [] , 
                      "adversaire m√®ne" : []}
    
    
    
    
    # Cr√©ation d'un dictionnaire destin√© √† recevoir les % du temps du match (60 minutes) :
    
    pct_duree_totale = {"USDH m√®ne" : [] , 
                        "√©galit√©" : [] , 
                        "adversaire m√®ne" : []}
    
    
    
    
    
    
    
    
    # On part du haut du DataFrame 'data' : 
    
    i = data_filtre.index[0]
    
    
    
    
    # GESTION DU 1ER INDICE (√©galit√© 0-0 jusqua'au 1er but) : 
    
    couple = (0 , data_filtre["temps"].loc[i])

    duree = couple[1] - couple[0]
    
    
    dates["√©galit√©"].append(couple)

    durees["√©galit√©"].append(duree)
        
        
        
    
    
    
    
    # On parcourt le DataFrame 'data' dans son ensemble : pour chaque ligne de 'data' ...
    
    while i < data_filtre.index[-1] :
        
        
        
        # CAS 1 : SI la diff√©rence en faveur de l'USDH est STRICTEMENT POSITIVE (= USDH m√®ne) : 
        
        if data_filtre["diff√©rence de buts"].loc[i] > 0 :
            
            # On passe √† la ligne suivante :
            
            i += 1
            

            # Tant que la diff√©rence de buts en faveur de l'USDH reste STRICTEMENT POSITIVE (et que l'indice ne d√©passe pas l'indice final) :
            
            while (data_filtre["diff√©rence de buts"].loc[i] > 0) and (i < data_filtre.index[-1]) :

                couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])

                dates["USDH m√®ne"].append(couple)
                
                
                duree = couple[1] - couple[0]
                
                durees["USDH m√®ne"].append(duree)

                
                i += 1
                
                
                
                
            couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])
                
            dates["USDH m√®ne"].append(couple)
            
            
            duree = couple[1] - couple[0]
                
            durees["USDH m√®ne"].append(duree)
            
            
            
            if i == data_filtre.index[-1] :
                
                couple = (data_filtre["temps"].loc[i] , 60)
            
                dates["USDH m√®ne"].append(couple)


                duree = couple[1] - couple[0]

                durees["USDH m√®ne"].append(duree)
            
            
            
                
                
     

    
    
    
    

        # CAS 2 : SI la diff√©rence en faveur de l'USDH est NULLE (= √©galit√©) : 
        
        elif data_filtre["diff√©rence de buts"].loc[i] == 0 :
            
            # On passe √† la ligne suivante :
            
            i += 1
            

            # Tant que la diff√©rence de buts en faveur de l'USDH reste NULLE (et que l'indice ne d√©passe pas l'indice final) :
            
            while (data_filtre["diff√©rence de buts"].loc[i] == 0) and (i < data_filtre.index[-1]) :

                couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])
                
                dates["√©galit√©"].append(couple)
                
                
                duree = couple[1] - couple[0]
                
                durees["√©galit√©"].append(duree)

                
                i += 1
                
                
                
                
            couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])
            
            dates["√©galit√©"].append(couple)
            
            
            duree = couple[1] - couple[0]
                
            durees["√©galit√©"].append(duree)
            
            
            
            if i == data_filtre.index[-1] :
                
                couple = (data_filtre["temps"].loc[i] , 60)
            
                dates["√©galit√©"].append(couple)


                duree = couple[1] - couple[0]

                durees["√©galit√©"].append(duree)
            
            
            
                
                
                
                
                
                
        # CAS 3 : SI la diff√©rence en faveur de l'USDH est STRICTEMENT NEGATIVE (= adversaire m√®ne) : 
        
        else :   # data_filtre["diff√©rence de buts"].loc[i] < 0 :
            
            # On passe √† la ligne suivante :
            
            i += 1
            

            # Tant que la diff√©rence de buts en faveur de l'USDH reste STRICTEMENT NEGATIVE (et que l'indice ne d√©passe pas l'indice final) :
            
            while (data_filtre["diff√©rence de buts"].loc[i] < 0) and (i < data_filtre.index[-1]) :

                couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])
                
                dates["adversaire m√®ne"].append(couple)
                
                
                duree = couple[1] - couple[0]
                
                durees["adversaire m√®ne"].append(duree)
                

                i += 1
                
                
                
                
            couple = (data_filtre["temps"].loc[i-1] , data_filtre["temps"].loc[i])
            
            dates["adversaire m√®ne"].append(couple)
            
            
            duree = couple[1] - couple[0]
                
            durees["adversaire m√®ne"].append(duree)
            
            
            
            if i == data_filtre.index[-1] :
                
                couple = (data_filtre["temps"].loc[i] , 60)
            
                dates["adversaire m√®ne"].append(couple)


                duree = couple[1] - couple[0]

                durees["adversaire m√®ne"].append(duree)
                
                
                
                
         
        
        # On calcule la dur√©e totale en sommant les dur√©es calcul√©s et stock√©es dans des listes :
        
        for cle in durees_totales.keys() : 
            
            durees_totales[cle] = sum(durees[cle]) 
            
            pct_duree_totale[cle] = (durees_totales[cle]/60)*100
                
                
            
            
            
            
   
            
    return dates , durees , durees_totales , pct_duree_totale

















## Fonction permettant de r√©cup√©rer les p√©riodes l'USDH durant lesquelles l'USDH a men√© / a √©t√© men√© / a √©t√© √† √©galit√© au score lors d'un match pr√©cis :
    
def periodes_situation_score(data , situation = "USDH m√®ne" , journee = "J5") :
    
    
    # On commence par r√©cup√©rer les 4 dictionnaires retourn√©s via la fonction 'duree_situation_score' ci-dessus :
    
    dates , durees , durees_totales , pct = duree_situation_score(data = data , journee = journee)
    
    
    
    
    
    # On s'int√©resse uniquement √† celui contenant les dates (date_debut , date_fin) des p√©riodes de situations au score voulues :
 
    L = dates[situation]   # L est une liste de tuples (date_debut , date_fin)
    
    
    periodes = []   # la liste des p√©riodes (date_debut , date_fin) qui sera retourn√©e √† la fin.
    
    
    # SI L est non vide : 
    
    if L != [] : 
        

        i = 0


        borne_inf = L[i][0]
        borne_sup = L[i][1]


        while i < len(L) :


            while (i < len(L)-1) and (borne_sup == L[i+1][0]) :

                borne_sup = L[i+1][1]

                i += 1




            periode = (borne_inf , borne_sup)

            periodes.append(periode)



            i += 1



            if i < len(L) :

                borne_inf = L[i][0]
                borne_sup = L[i][1]
                
                
             
        
        
            
    return periodes



















## Fonction permettant de conna√Ætre la dynamique (= nbr de buts marqu√©s / encaiss√©s) de jeu de l'USDH lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_equipe(data , date = 29 , x_dernieres_minutes = 5 , journee = "J5" , equipe = "USDH") :
    
    """Retourne le diff√©rentiel des buts marqu√©s / encaiss√©s par l'√©quipe renseign√©e sur les x_dernieres_minutes pr√©c√©dant la 
       date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["temps"] <= date) & (data["temps"] >= date-x_dernieres_minutes)]
    
    
    
    
    
    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'USDH lors de cette p√©riode du match : 
    
    buts_USDH = len(data_filtre[(data_filtre["√©quipe"] == "USDH") & (data_filtre["action"].isin(["but" , "but 7m"]))])
    buts_adv = len(data_filtre[(data_filtre["√©quipe"] != "USDH") & (data_filtre["action"].isin(["but" , "but 7m"]))])
    
    
    if equipe == "USDH" :
    
        differentiel = buts_USDH - buts_adv     # en faveur de l'USDH
        
    else : 
        
        differentiel = buts_adv - buts_USDH     # en faveur de l'√©quipe adverse
    
    
    
    
    
    
    
    return differentiel


















## Fonction permettant de conna√Ætre la dynamique (= nbr de buts marqu√©s / encaiss√©s) de jeu d'une √©quipe autour de la date des temps morts pos√©s, lors de la journ√©e pr√©cis√©e :
    
def dynamique_autour_TM(data , x_minutes_avant_apres = 5 , avant_ou_apres = "apr√®s" , journee = "J5" , 
                        equipe = "USDH" , TM_de = "USDH") :
    
    """Retourne le diff√©rentiel des buts marqu√©s / encaiss√©s par l'√©quipe renseign√©e sur les x_minutes_avant_apres 
       avant / apr√®s la (les) date(s) des temps morts pos√©s par l'√©quipe 'TM_de', lors de la journ√©e de championnat voulue."""
    
    
    # On commence par filtrer les donn√©es de la journ√©e de championnat renseign√©e :
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    # On r√©cup√®re la liste des 2 √©quipes oppos√©es lors de cette journ√©e :
    
    L_equipes = [e for e in data_filtre["√©quipe"].unique() if e != " "]
    
    
    
    
    
    # CAS 1 : l'√©quipe dont je souhaite conna√Ætre la dynamique (argument 'equipe') jouait bel et bien ce jour-l√† :
    
    if equipe in L_equipes :
        
        
        
        # CAS 1-a) : l'√©quipe dont je souhaite regarder les temps morts pos√©s (argument 'TM_de') jouait bel et bien ce jour-l√† : 
        
        if TM_de in L_equipes :
    
    
    
    
            # On commence par r√©cup√®rer la (les) date(s) des √©ventuels temps morts pos√©s par l'√©quipe voulue lors de cette rencontre : 

            L_dates_TM = [t for t in data_filtre[(data_filtre["√©quipe"] == TM_de) & (data_filtre["action"].isin(["temps mort d'√©quipe recevant" , "temps mort d'√©quipe visiteur"]))]["temps"].unique()]




            # Cr√©ation d'un dictionnaire (initialement vide) destin√© √† contenir la dynamique de l'√©quipe 'equipe' : 

            dico_dynamique_TM = {}




            # SI l'√©quipe renseign√©e via le param√®tre 'TM_de' a pos√© au moins un temps mort durant le match : 

            if L_dates_TM != [] : 


                # Pour chacune de ces dates de TM :

                for date in L_dates_TM : 



                    # On filtre UNIQUEMENT les actions de jeu de ce match ayant eu lieu x minutes apr√®s la date du TM : 

                    # SI on souhaite regarder les x minutes APRES le temps mort pos√© :
                    
                    if avant_ou_apres == "apr√®s" :

                        data_periode = data[(data["journ√©e"] == journee) & (data["temps"] >= date) & (data["temps"] <= date + x_minutes_avant_apres)]




                    # SI on souhaite regarder les x minutes AVANT le temps mort pos√© :
                    
                    elif avant_ou_apres == "avant" :
                 

                        data_periode = data[(data["journ√©e"] == journee) & (data["temps"] >= date - x_minutes_avant_apres) & (data["temps"] <= date)]




                    else : 
                        
                        raise ValueError("param√®tre attendu pour l'argument 'x_minutes_avant_apres' : 'avant' ou 'apr√®s'.")






                    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'√©quipe 'equipe' lors de cette p√©riode suivant le TM : 
                    
                    
                    # Buts marqu√©s : 
                    
            
                    buts_marques_equipe = len(data_periode[(data_periode["√©quipe"] == equipe) & (data_periode["action"].isin(["but" , "but 7m"]))])

                    
                    
                    
                    
                    # Buts encaiss√©s : 

                    
                    buts_marques_adv = len(data_periode[(data_periode["√©quipe"] != equipe) & (data_periode["action"].isin(["but" , "but 7m"]))])



                    
                    
                    
                    
                    differentiel = buts_marques_equipe - buts_marques_adv    # en faveur de l'√©quipe 'equipe'







                    # On stocke la dynamique dans le dictionnaire d√©di√© : 

                    dico_dynamique_TM[(date , x_minutes_avant_apres)] = {f"buts marqu√©s {equipe}" : buts_marques_equipe , 
                                                                         f"buts encaiss√©s {equipe}" : buts_marques_adv , 
                                                                         "diff√©rentiel de buts" : differentiel}






            return dico_dynamique_TM
        
        
        
        
        
        # CAS 1-b) : l'√©quipe dont je souhaite regarder les temps morts pos√©s (argument 'TM_de') NE jouait PAS ce jour-l√† : 
        
        else :  # TM_de not in L_equipes :
            
            
            raise ValueError(f"{TM_de} ne jouait pas lors de la {journee} : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}")
            
            
            

            
            
    # CAS 2 : l'√©quipe dont je souhaite regarder la dynamique (argument 'equipe') NE jouait PAS ce jour-l√† : 
        
    else :  # equipe not in L_equipes :


        raise ValueError(f"{equipe} ne jouait pas lors de la {journee} : les 2 √©quipes oppos√©es ce jour-l√† √©taient {L_equipes[0]} et {L_equipes[1]}")




        
        
        
        
        
        


















## Fonction permettant de r√©cup√©rer le score de l'USDH √† la date souhait√©e, lors d'une journ√©e au choix :
    
def score_USDH(data , journee = "J5" , temps = 29) : 
    
    """Retourne le score de l'USDH lors du match de la journ√©e renseign√©e, au temps renseign√©."""
    
    
    # On r√©cup√®re le nom de l'adversaire de l'USDH lors de cette journ√©e : 
    
    adv = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe not in ["USDH" , " "]]
    adv = adv[0]
    
    
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == "USDH")]
    
    
    
    # CAS 1 : le temps voulu est d√©j√† renseign√© dans data_filtre : 
    
    if temps in data_filtre["temps"].unique() : 
        
        
        return data_filtre[data_filtre["temps"] == temps]["score USDH"].loc[data_filtre[data_filtre["temps"] == temps].index[0]]
    
    
    
    
    
    
    # CAS 2 : sinon, on retourne le score au dernier pointage (SSI il y en avait un !!) avant le temps demand√© :
    
    else : 
        
        
        # S'il y avait un pointage pr√©c√©dent : 
        
        if temps > data_filtre["temps"].min() :
        
            return data_filtre[data_filtre["temps"] <= temps]["score USDH"].loc[data_filtre[data_filtre["temps"] <= temps].index[-1]]
    
    
    
    
        # Sinon, c'est que le score de l'adversaire √©tait nul :
        
        else : 
            
            return 0
        




















## Fonction permettant de r√©cup√©rer le score de l'adversaire de l'USDH √† la date souhait√©e, lors d'une journ√©e au choix :
    
def score_adversaire(data , journee = "J5" , temps = 29) : 
    
    """Retourne le score de l'adversaire de l'USDH lors du match de la journ√©e renseign√©e, au temps renseign√©."""
    
    
    # On r√©cup√®re le nom de l'adversaire de l'USDH lors de cette journ√©e : 
    
    adv = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe not in ["USDH" , " "]]
    adv = adv[0]
    
    
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == adv)]
    
    
    
    # CAS 1 : le temps voulu est d√©j√† renseign√© dans data_filtre : 
    
    if temps in data_filtre["temps"].unique() : 
        
        
        return data_filtre[data_filtre["temps"] == temps]["score adversaire"].loc[data_filtre[data_filtre["temps"] == temps].index[0]]
    
    
    
    
    
    
    # CAS 2 : sinon, on retourne le score au dernier pointage (SSI il y en avait un !!) avant le temps demand√© :
    
    else : 
        
        
        # S'il y avait un pointage pr√©c√©dent : 
        
        if temps > data_filtre["temps"].min() :
        
            return data_filtre[data_filtre["temps"] <= temps]["score adversaire"].loc[data_filtre[data_filtre["temps"] <= temps].index[-1]]
    
    
    
        # Sinon, c'est que le score de l'adversaire √©tait nul :
        
        else : 
            
            return 0
        
        
        
        
        
        
        
        
        








## Fonction permettant de rep√©rer les s√©ries de buts cons√©cutifs encaiss√©s d'une √©quipe, lors d'une rencontre donn√©e : 
    
def series_buts_encaisses(data , journee = "J5" , equipe = "USDH") : 
    
    """Retourne un dictionnaire des s√©ries de buts cons√©cutifs encaiss√©s SANS MARQUER LE MOINDRE BUT par l'√©quipe renseign√©e 
       en argument, lors de la rencontre voulue."""
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    dico_series = {}  # le dictionnaire des s√©ries de buts cons√©cutifs encaiss√©s par l'√©quipe choisie (initialement vide).
    
    
    
    
    # Rep√©rages des colonnes √† utiliser : 
    
    if equipe == "USDH" : 
        
        col_score_equipe = "score USDH"
        col_score_adv = "score adversaire"
       
    
    else : 
        
        col_score_equipe = "score adversaire"
        col_score_adv = "score USDH"
        
        
    
    
    
    # On d√©marre au 1er indice :
    
    i = data_filtre.index[0]
    
    serie_en_cours = 0                                 # la s√©rie de buts cons√©cutifs encaiss√©s
    date_debut_serie = data_filtre["temps"].loc[i]     # la date du d√©but de cette s√©rie
    date_fin_serie = data_filtre["temps"].loc[i]       # la date de la fin de cette s√©rie
    
    
    
    
    
    # On parcourt data_filtre de haut en bas, dans son ensemble : 
    
    while i < data_filtre.index[-1] :
    
        
        score_equipe_actuel = data_filtre[col_score_equipe].loc[i]     # score de l'√©quipe √† l'issue de l'action de jeu en cours
        score_adv_actuel = data_filtre[col_score_adv].loc[i]           # score de l'√©quipe adverse √† l'issue de l'action de jeu en cours
        
        score_equipe_suivant = data_filtre[col_score_equipe].loc[i+1]  # score de l'√©quipe √† l'issue de l'action de jeu suivante
        score_adv_suivant =data_filtre[col_score_adv].loc[i+1]         # score de l'√©quipe adverse √† l'issue de l'action de jeu suivante
        
        
        
        
        # Tant que le nombre de buts MARQUES de l'√©quipe reste identique ET QUE le nombre de buts ENCAISSES augmente :
        
        while (i+1 < data_filtre.index[-1]) and ((score_equipe_actuel == score_equipe_suivant) and (score_adv_suivant == score_adv_actuel + 1)) :
            

            
            serie_en_cours += 1   # la s√©rie de buts encaiss√©s par cette √©quipe d√©cr√©mente d'1 unit√©
            
            # On passe √† l'action suivante :
            
            i += 1
            
            date_fin_serie = data_filtre["temps"].loc[i]  # On met √† jour la date de la fin de la s√©rie en cours
            
            score_equipe_actuel = data_filtre[col_score_equipe].loc[i]     # score de l'√©quipe √† l'issue de l'action de jeu en cours
            score_adv_actuel = data_filtre[col_score_adv].loc[i]           # score de l'√©quipe adverse √† l'issue de l'action de jeu en cours

            score_equipe_suivant = data_filtre[col_score_equipe].loc[i+1]  # score de l'√©quipe √† l'issue de l'action de jeu suivante
            score_adv_suivant =data_filtre[col_score_adv].loc[i+1]         # score de l'√©quipe adverse √† l'issue de l'action de jeu suivante

        
        
        # On ajoute la s√©rie au dictionnaire d√©di√© SSI IL Y A EU UNE SERIE DE BUTS CONSECUTIFS (= SSI serie_en_cours > 1) : 
        
        
        if serie_en_cours > 1 : 
        
            dico_series[(date_debut_serie , date_fin_serie)] = (0 , serie_en_cours)
        
        
        
        # On d√©bute une nouvelle s√©rie : 
        
        i += 1
        
        # Mise √† jour : 
        
        date_debut_serie = data_filtre["temps"].loc[i]
        date_fin_serie = data_filtre["temps"].loc[i]
        serie_en_cours = 0
        
        
        
    return dico_series






















## Fonction permettant de rep√©rer les s√©ries de buts cons√©cutifs marqu√©s d'une √©quipe, lors d'une rencontre donn√©e :
        
def series_buts_marques(data , journee = "J5" , equipe = "USDH") : 
    
    """Retourne un dictionnaire des s√©ries de buts cons√©cutifs marqu√©s SANS ENCAISSER LE MOINDRE BUT par l'√©quipe renseign√©e 
       en argument, lors de la rencontre voulue."""
    
    
    # On r√©cup√®re le nom de l'adversaire de l'√©quipe renseign√©e en argument : 
    
    adv = [e for e in data[data["journ√©e"] == journee]["√©quipe"].unique() if e not in [equipe , " "]]
    adv = adv[0]
    
    
    
    # On r√©cup√®re le dictionnaire des s√©ries de buts encaiss√©s par l'ADVERSAIRE DE L'USDH lors de cette m√™me rencontre √† l'aide de la fonction 'series_buts_encaisses' cr√©√©e ci-dessus : 
    
    dico_series_encaisses_adv = series_buts_encaisses(data = data , journee = journee , equipe = adv)
    
    
    
    # On en d√©duit alors le dictionnaire des s√©ries de buts marqu√©s par l'√©quipe souhait√©e, en inverssant l'ordre des √©l√©ments de chaque tuple du dictionnaire : 
    
    dico_serie_marques_equipe = {}
    

    
    for serie , score in dico_series_encaisses_adv.items() : 
        
        dico_serie_marques_equipe[serie] = (score[1] , score[0])    # inversion de l'ordre des buts
        
        
        
        

        
    
    return dico_serie_marques_equipe








#####################################################################################################################
#####################################################################################################################

###                                               FONCTIONS GRAPHIQUES :
 
#####################################################################################################################
#####################################################################################################################


## Fonction permettant de tracer l'√©volution du score (de mani√®re STATIQUE) des 2 √©quipes lors d'une rencontre pr√©cise :
    
def evolution_score(fig , ax , data , journee = "J5" , annotations  = "2min" , show_title = True , 
                    afficher_points = False , par_but_ou_par_minute = "par but" , colorer_gap = True , 
                    text_color = "black") :

    
    
    
    # SI on souhaite √©crire le texte (graduations, titre, ...) en BLANC : 
    
    if text_color == "white" : 
        
        
        # Alors on ajoute un fond NOIR √† la figure :
        
        fig.set_facecolor("#0E1117")
        ax.set_facecolor("#0E1117")
        
        
        
        
        
    
    
    # On filtre UNIQUEMENT les donn√©es de la journ√©e de championnat voulue : 
    
    data_filtre = data[data["journ√©e"] == journee]
    

    
    
    # r√©cup√©ration du nom de l'√©quipe adverse : 

    adv = [equipe for equipe in data_filtre["√©quipe"].unique() if equipe not in ["USDH" , " "]]
    adv = adv[0]  


        
        


    
    scores = []  # la liste destin√©e √† contenir la liste des scores minute par minute de l'USDH et celle de son adversaire.
    

        
    # Tracer de la courbe de score pour chacune des 2 √©quipes : 

    for equipe in ["USDH" , adv] :

        # SI on regarde l'USDH : 

        if equipe == "USDH" : 

            # la colonne de data_filtre indiquant le score de l'√©quipe est 'score_USDH' :

            col_score = "score USDH"
            col_score_adv = "score adversaire"
            
            linecolor = dico_couleurs[equipe]
            



        # SINON : 

        else : 

            # la colonne de data_filtre indiquant le score de l'√©quipe est 'score adversaire' :

            col_score = "score adversaire"
            col_score_adv = "score USDH"
            
    
            
            # SI la couleur de fond de la figure est le NOIR :
                
            if text_color == "white" : 
            
                
                # SI l'√©quipe est Pouzauges OU St Berthevin ==> la couleur associ√©e √† cette √©quipe est proche du noir, donc il faut une couleur flashy sur un fond noir :
                    
                if equipe in ["Pouzauges" , "St Berthevin"] : 
                
                    if equipe == "Pouzauges" : 
                        
                        linecolor = "white"
                        
                    else : 
                        
                        linecolor = "#16BD26"
                    
                    
                else : 
                    
                    linecolor = dico_couleurs[equipe]
        
        
            else : 
                
                linecolor = dico_couleurs[equipe]






        # SI je souhaite afficher l'√©volution du score but par but :

        if par_but_ou_par_minute == "par but" :

            ax.plot(data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"].isin([" " , "but" , "but 7m"]))]["temps"] , 
                    data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"].isin([" " , "but" , "but 7m"]))][col_score] , 
                    color = linecolor , 
                    label = equipe , 
                    lw = 2)





            # SI je souhaite afficher les points EN PLUS des courbes : 

            if afficher_points == True : 


                ax.scatter(data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"].isin([" " , "but" , "but 7m"]))]["temps"] , 
                           data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"].isin([" " , "but" , "but 7m"]))][col_score] , 
                           color = linecolor)







        # SI je souhaite afficher l'√©volution du score touts les minutes :

        elif par_but_ou_par_minute == "par minute" :


            # On r√©cup√®re le score de l'√©quipe minute par minute (de la 0√®me √† la 60√®me) gr√¢ce √† la fonction 'score' :

            # SI l'√©quipe est l'USDH ==> fonction score_USDH pour r√©cup√©rer le score de l'√©quipe :

            if equipe == "USDH" :

                scores_equipe = [score_USDH(data = data , journee = journee , temps = t) for t in range(0,61)]



            # SINON ==> fonction score_adversaire pour r√©cup√©rer le score de l'√©quipe :

            else : 

                scores_equipe = [score_adversaire(data = data , journee = journee , temps = t) for t in range(0,61)]



            scores.append(np.array(scores_equipe))   # on stocke chaque liste de scores dans la liste 'scores'.



            # On trace alors le graphe obtenu :

            ax.plot(list(range(0,61)) , 
                    scores_equipe , 
                    color = linecolor , 
                    label = equipe)
            
        


        else : 

            raise ValueError("param√®tre attendu pour l'argument 'par_but_ou_par_minute' : 'par but' ou 'par minute'.")








        # Ajout des annotations demand√©es : 

        for j in data_filtre[(data_filtre["√©quipe"] == equipe) & (data_filtre["action"] == annotations)].index : 
            
            # SI le score de l'√©quipe est SUPERIEUR √† celui de l'adversaire (= courbe au-dessus) : 
            
            if data_filtre[col_score].loc[j] > data_filtre[col_score_adv].loc[j] :
            
                y_text = data_filtre[(data_filtre["√©quipe"] == equipe) & (data_filtre["action"] == annotations)][col_score].loc[j] + 2
                
            else : 
                
                y_text = data_filtre[(data_filtre["√©quipe"] == equipe) & (data_filtre["action"] == annotations)][col_score].loc[j] - 2
                

            ax.annotate(xy = (data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"] == annotations)]["temps"].loc[j] , data_filtre[(data_filtre["√©quipe"] == equipe) & (data_filtre["action"] == annotations)][col_score].loc[j]) ,
                        xytext = (data_filtre[(data_filtre["√©quipe"].isin([equipe , " "])) & (data_filtre["action"] == annotations)]["temps"].loc[j] , y_text) ,
                        color = text_color , 
                        text = annotations , 
                        horizontalalignment = "center" , 
                        verticalalignment = "center" , 
                        arrowprops = {"facecolor" : text_color , 
                                      "shrink" : 0.05})
            
            
            
            
            
            
            
            
    # Remplissage du gap entre les 2 courbes SSI on regarde le score minute par minute : 
    
    if par_but_ou_par_minute == "par minute" : 
        
        
        # SI je souhaite colorer l'espace s√©parant les 2 courbes :
        
        if colorer_gap == True :
        
        
            # On colorie le gap entre les courbes selon le signe du gap en faveur de l'USDH (devant = vert , derri√®re = orange) : 

            ax.fill_between(list(range(0,61)) , 
                            scores[0] ,          # array des scores de l'USDH 
                            scores[1] ,          # array des scores de l'adversaire 
                            where = (scores[0] > scores[1]) ,
                            color = "lime")


            ax.fill_between(list(range(0,61)) , 
                            scores[0] ,          # array des scores de l'USDH  
                            scores[1] ,          # array des scores de l'adversaire 
                            where = (np.array(scores[0]) < np.array(scores[1])) ,
                            color = "orange")





                
                
                


    # Personnalisation de la figure :        
            

    ax.legend(loc = "center right")


    ax.set_xlabel("minute" , fontsize = 15 , family = "serif" , color = text_color)
    ax.set_ylabel("score" , fontsize = 15 , family = "serif" , color = text_color)


    ax.set_xticks(range(0 , 61 , 2))
    ax.tick_params(axis = 'x', colors = text_color)   # couleur des graduations
    ax.set_xticklabels(range(0 , 61 , 2) , color = text_color)
    
    
    # yticks : 
    
    score_final_USDH = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])]["score USDH"].max()
    score_final_opposant = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])]["score adversaire"].max()
    
    
    ax.set_yticks(range(0 , max(score_final_USDH , score_final_opposant) , 2))
    ax.tick_params(axis = 'y', colors = text_color)   # couleur des graduations
    ax.set_yticklabels(range(0 , max(score_final_USDH , score_final_opposant) , 2) , color = text_color)
    
    

    ax.spines["top"].set_color(None)
    ax.spines["right"].set_color(None)
    ax.spines["bottom"].set_position(("data" , 0))
    ax.spines["left"].set_position(("data" , 0))
    
    ax.spines["bottom"].set_color(text_color)
    ax.spines["left"].set_color(text_color)

    
    


    # Ajout d'une grille en pointill√©s :

    
    if text_color == "black" :

        ax.grid(ls = ":" , color = text_color)


    
    



    # ligne symbolisant la mi-temps :

    ax.plot([30 , 30] , 
            [0 , max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 4.5] , 
            color = "#14A2D7" , 
            ls = "--" , 
            lw = 1.5)


    ax.text(x = 30 ,
            y = max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 4.85 ,
            s = "mi-temps" ,
            color = "#14A2D7" , 
            fontsize = 13 , 
            horizontalalignment = "center")
    
    

    
    
    
    
    
    
    
    # R√©cup√©ration du bilan de l'USDH sur chaque p√©riode jou√©e dans chaque type de situation num√©rique + annotations du diff√©rentiel au-dessus de chaque p√©riode correspondante : 
    
    dico_bilans_inferiorite_num_USDH = bilan_situation_numerique_equipe(data = data , journee = journee , 
                                                                        equipe = "USDH" ,
                                                                        situation = "inf√©riorit√© num√©rique")  # inf√©riorit√©
    
    
    dico_bilans_superiorite_num_USDH = bilan_situation_numerique_equipe(data = data , journee = journee , 
                                                                        equipe = "USDH" ,
                                                                        situation = "sup√©riorit√© num√©rique")  # sup√©riotit√©
    
    
    
    
    
    # a) Pour chaque p√©riode d'INFERIORITE NUMERIQUE : 
    
    for periode_inferiorite in dico_bilans_inferiorite_num_USDH.keys() :
        
        debut_periode = periode_inferiorite[0]  # date de d√©but de la p√©riode 
        fin_periode = periode_inferiorite[1]    # date de fin de la p√©riode
        differentiel = dico_bilans_inferiorite_num_USDH[periode_inferiorite]["diff√©rentiel de buts USDH"]  # le diff√©rentiel de buts sur cette p√©riode
        
        if differentiel > 0 : 
            
            c = "lime"
            differentiel = "+" + str(differentiel)
            
            
        elif differentiel == 0 : 
            
            c = "orange"
            
            
        else : 
            
            c = "red"
            differentiel = "- " + str((-1)*differentiel)
            
            
        
        # On trace un crochet ROUGE du d√©but √† la fin de la p√©riode, indiquant une p√©riode d'inf√©riorit√© num√©rique de l'USDH :
        
        # ligne horizontale : 
        
        ax.plot([debut_periode , fin_periode] , 
                2*[max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2] , 
                color = "red" , 
                lw = 2)
        
        
        # bornes verticales du crochet : 
        # borne gauche :
        
        ax.plot([debut_periode , debut_periode] , 
                [max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1.8 , max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.2] , 
                color = "red" , 
                lw = 2)
        
        
        # borne droite :
        
        ax.plot([fin_periode , fin_periode] , 
                [max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1.8 , max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.2] , 
                color = "red" , 
                lw = 2)
        
        
        
        # On inscrit au-dessus de cette ligne ROUGE le diff√©rentiel de buts EN FAVEUR DE L'USDH sur cette p√©riode : 
        
        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.75 , 
                s = differentiel,
                color = c , 
                fontsize = 14 , 
                horizontalalignment = "center")
        
        
        
        # On inscrit en-dessous de cette ligne ROUGE la mention "inf" : 

        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1 , 
                s = "inf",
                color = "red" , 
                fontsize = 12 , 
                horizontalalignment = "center")
        
        
        
        
    
    
    # b) Pour chaque p√©riode de SUPERIORITE NUMERIQUE : 
    
    for periode_superiorite in dico_bilans_superiorite_num_USDH.keys() :
        
        debut_periode = periode_superiorite[0]  # date de d√©but de la p√©riode 
        fin_periode = periode_superiorite[1]    # date de fin de la p√©riode
        differentiel = dico_bilans_superiorite_num_USDH[periode_superiorite]["diff√©rentiel de buts USDH"]  # le diff√©rentiel de buts sur cette p√©riode
        
        if differentiel > 0 : 
            
            c = "lime"
            differentiel = "+" + str(differentiel)
            
            
        elif differentiel == 0 : 
            
            c = "orange"  
            
        
            
        else : 
            
            c = "red"
            differentiel = "- " + str((-1)*differentiel)
            
            
    
    
        # On trace un crochet VERT du d√©but √† la fin de la p√©riode, indiquant une p√©riode de sup√©riorit√© num√©rique de l'USDH :

        # ligne horizontale : 

        ax.plot([debut_periode , fin_periode] , 
                2*[max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2] , 
                color = "#51E31F" , 
                lw = 2)


        # bornes verticales du crochet : 
        # borne gauche :

        ax.plot([debut_periode , debut_periode] , 
                [max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1.8 , max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.2] , 
                color = "#51E31F" , 
                lw = 2)
        
    

        
        # borne droite :

        ax.plot([fin_periode , fin_periode] , 
                [max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1.8 , max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.2] , 
                color = "#51E31F" , 
                lw = 2)
        
        
       



        # On inscrit au-dessus de cette ligne VERTE le diff√©rentiel de buts EN FAVEUR DE L'USDH sur cette p√©riode : 

        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 2.75 , 
                s = differentiel,
                color = c , 
                fontsize = 14 , 
                horizontalalignment = "center")
        
        
        
        # On inscrit en-dessous de cette ligne VERTE la mention "sup" : 

        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = max(data_filtre["score USDH"].max() , data_filtre["score adversaire"].max()) + 1 , 
                s = "sup",
                color = "#46CF17" , 
                fontsize = 12 , 
                horizontalalignment = "center")


    
    
    
    
    
    
    # Affichage du titre (si souhait√©) :
    
    if show_title == True : 
        
        
        if dico_rencontres_USDH[journee][0] == "USDH" :
        
            fig.suptitle(f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : √©volution du score au fil de la rencontre ({score_final_USDH} - {score_final_opposant})." , 
                         fontsize = 22.5 , family = "serif" , 
                         color = text_color)
            
            
            
        else :
        
            fig.suptitle(f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : √©volution du score au fil de la rencontre ({score_final_opposant} - {score_final_USDH})." , 
                         fontsize = 22.5 , family = "serif" , 
                         color = text_color)
        
        
        
        
        
        
        
    return ax






















## Fonction permettant de tracer l'√©volution du GAP entre les 2 √©quipes lors d'une rencontre pr√©cise :
    
def evolution_gap_score(fig , ax , data , journee = "J5" , show_title = True , afficher_points = False , 
                        par_but_ou_par_minute = "par but") :

    
    
    # On filtre UNIQUEMENT les donn√©es de la journ√©e de championnat voulue : 
    
    data_filtre = data[data["journ√©e"] == journee]
    

    
    
    # r√©cup√©ration du nom de l'√©quipe adverse : 

    adv = [equipe for equipe in data_filtre["√©quipe"].unique() if equipe not in ["USDH" , " "]]
    adv = adv[0]  

        
    
    
    
    # SI je souhaite afficher l'√©volution du score but par but :

    if par_but_ou_par_minute == "par but" :
        
        
        serie_dates = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])]["temps"]
        serie_dates.index = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])].index

        serie_buts_USDH = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])]["score USDH"]
        serie_buts_USDH.index = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])].index
        
        serie_buts_adv = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])]["score adversaire"]
        serie_buts_adv.index = data_filtre[data_filtre["action"].isin([" " , "but" , "but 7m"])].index
        
        
        serie_difference_buts = serie_buts_USDH - serie_buts_adv  # la liste des diff√©rences de buts en faveur de l'USDH
        
        

        
        ax.plot(serie_dates , 
                serie_difference_buts , 
                color = "red")
        
        
        
        
        # Annotation des PLUS GRAND et PLUS PETIT gaps enregistr√©s lors de cette rencontre : 
    
        # a) Recherche de l'indice du PLUS GRAND gap en faveur de l'USDH : 

        plus_grand_gap_en_faveur = serie_difference_buts.max()
        id_plus_grand_gap_en_faveur = serie_difference_buts.idxmax()


        # annotation du point sur la courbe : 

        ax.annotate(xy = (data_filtre["temps"].loc[id_plus_grand_gap_en_faveur] , plus_grand_gap_en_faveur) ,
                    xytext = (data_filtre["temps"].loc[id_plus_grand_gap_en_faveur] + 0.5 , plus_grand_gap_en_faveur + 1.5) ,
                    fontsize = 14 ,
                    s = f"retard MIN : {plus_grand_gap_en_faveur}" ,
                    color = "green" ,
                    horizontalalignment = "center" , 
                    arrowprops = {"color" : "black"})




        
        
        

        # b) Recherche de l'indice du PLUS GRAND gap en d√©faveur de l'USDH : 

        plus_grand_gap_subbis = serie_difference_buts.min()
        id_plus_grand_gap_subbis = serie_difference_buts.idxmin()


        # annotation du point sur la courbe : 

        ax.annotate(xy = (data_filtre["temps"].loc[id_plus_grand_gap_subbis] , plus_grand_gap_subbis) ,
                    xytext = (data_filtre["temps"].loc[id_plus_grand_gap_subbis] + 0.5 , plus_grand_gap_subbis - 1.5) ,
                    fontsize = 14 ,
                    s = f"retard MAX : {plus_grand_gap_subbis}" ,
                    color = "red" ,
                    horizontalalignment = "center" , 
                    arrowprops = {"color" : "black"})
        
        
        
        ax.fill_between(serie_dates , 
                        serie_difference_buts ,          # s√©rie des diff√©rences de buts en faveur de l'USDH 
                        where = (serie_difference_buts > 0) ,
                        color = "lime")
        
        
        
        ax.fill_between(serie_dates , 
                        serie_difference_buts ,          # s√©rie des diff√©rences de buts en faveur de l'USDH 
                        where = (serie_difference_buts < 0) ,
                        color = "orange")

        
        
        
        
        
        
        
    # SI je souhaite afficher l'√©volution du score toutes les minutes :

    elif par_but_ou_par_minute == "par minute" :


        # On r√©cup√®re le score de l'√©quipe minute par minute (de la 0√®me √† la 60√®me) gr√¢ce √† la fonction 'score' :

        serie_dates = pd.Series(list(range(61)))
        
        
        # fonction score_USDH pour r√©cup√©rer le score de l'√©quipe :

        serie_buts_USDH = pd.Series([score_USDH(data = data , journee = journee , temps = t) for t in range(0,61)])

        
        # fonction score_adversaire pour r√©cup√©rer le score de l'√©quipe :

        serie_buts_adv = pd.Series([score_adversaire(data = data , journee = journee , temps = t) for t in range(0,61)])



        # Calcul des diff√©rences de buts en faveur de l'USDH, minute par minute : 

        serie_difference_buts = serie_buts_USDH - serie_buts_adv
        
        
        
        
        # On trace la courbe du gap entre l'USDH et son adversaire : 
        
        ax.plot(serie_dates , 
                serie_difference_buts , 
                color = "red")
        
        
        
        
        
        
        
        
        # On colorie le gap entre les courbes selon le signe du gap en faveur de l'USDH (devant = vert , derri√®re = orange) : 

        ax.fill_between(serie_dates , 
                        serie_difference_buts ,          # s√©rie des diff√©rences de buts en faveur de l'USDH 
                        where = (serie_difference_buts > 0) ,
                        color = "lime")


        ax.fill_between(serie_dates , 
                        serie_difference_buts ,          # s√©rie des diff√©rences de buts en faveur de l'USDH 
                        where = (serie_difference_buts < 0) ,
                        color = "orange")
        
        
        
        
        
        
        
        
        # a) Recherche de l'indice du PLUS GRAND gap en faveur de l'USDH : 

        
        d = pd.DataFrame(data = data_filtre["score USDH"] - data_filtre["score adversaire"] , columns = ["gap"])
        
        
        plus_grand_gap_en_faveur = serie_difference_buts.max()
        id_plus_grand_gap_en_faveur = d[d["gap"] == plus_grand_gap_en_faveur].index[0]
        date_plus_grand_gap_en_faveur = data_filtre["temps"].loc[id_plus_grand_gap_en_faveur] # date exacte du plus grand gap en faveur de l'USDH
        
        
       
        
        
        
        
        
        
        
        
        # b) Recherche de l'indice du PLUS GRAND gap en d√©faveur de l'USDH : 

        plus_grand_gap_subbis = serie_difference_buts.min()
        id_plus_grand_gap_subbis = d[d["gap"] == plus_grand_gap_subbis].index[0]
        date_plus_grand_gap_subbis = data_filtre["temps"].loc[id_plus_grand_gap_subbis]
        
        
        
        
        
        

        
        
        
    else : 

        raise ValueError("param√®tre attendu pour l'argument 'par_but_ou_par_minute' : 'par but' ou 'par minute'.")




            
            


    # SI je souhaite afficher les points EN PLUS des courbes : 

    if afficher_points == True : 


        ax.scatter(serie_dates , 
                   serie_difference_buts , 
                   color = "red")

        
    
    
    
    
    
    # Ligne horizontale en pointill√©s pour une diff√©rence de 0 but : 
    
    ax.plot([0 , 60] , 
            [0 , 0] , 
            color = "blue" , 
            ls = "--" , 
            lw = 2)





    # ligne verticale symbolisant la mi-temps :
    
    
    ax.plot([30 , 30] , 
            [serie_difference_buts.min() - 1 , serie_difference_buts.max() + 2] , 
            color = "green" , 
            ls = "--" , 
            lw = 3)
    
    

    
    
   
    
    
    

    # Annotations des p√©riodes de sup√©riorit√© num√©rique et des p√©riodes d'inf√©riorit√© num√©rique de l'USDH : 
    
    
    # On commence par r√©cup√©rer le dictionnaire des bilans de l'USDH lors de chaque p√©riode qu'elle a jou√© pour chaque type de situation num√©rique possible (sup√©riorit√© / inf√©riorit√© / √©galit√© num√©rique) :
    
    dico_bilans_inferiorite_num_USDH = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = "USDH" ,
                                                                        situation = "inf√©riorit√© num√©rique")  # inf√©riorit√©
    
    
    dico_bilans_superiorite_num_USDH = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = "USDH" ,
                                                                        situation = "sup√©riorit√© num√©rique")  # sup√©riorit√©
    
    
    dico_bilans_egalite_num_USDH = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = "USDH" ,
                                                                    situation = "√©galit√© num√©rique")  # √©galit√©
    
    
    
    
    
    # a) Pour chaque p√©riode d'INFERIORITE NUMERIQUE : 
    
    for periode_inferiorite in dico_bilans_inferiorite_num_USDH.keys() :
        
        debut_periode = periode_inferiorite[0]  # date de d√©but de la p√©riode 
        fin_periode = periode_inferiorite[1]    # date de fin de la p√©riode
        differentiel = dico_bilans_inferiorite_num_USDH[periode_inferiorite]["diff√©rentiel de buts USDH"]  # le diff√©rentiel de buts sur cette p√©riode
        
        if differentiel > 0 : 
            
            c = "green"
            differentiel = "+" + str(differentiel)
            
            
            
        elif differentiel == 0 : 
            
            c = "orange"
            differentiel = str(differentiel)
            
            
            
        else : 
            
            c = "red"
            differentiel = "- " + str((-1)*differentiel)
            
            
        
        # On trace un crochet ORANGE du d√©but √† la fin de la p√©riode, indiquant une p√©riode d'inf√©riorit√© num√©rique de l'USDH :
        
        # ligne horizontale : 
        
        ax.plot([debut_periode , fin_periode] , 
                2*[plus_grand_gap_en_faveur + 3] , 
                color = "#E32121" , 
                lw = 4)
        
        
                    
                                       
        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = plus_grand_gap_en_faveur + 2.5 , 
                s = differentiel,
                color = c , 
                fontsize = 14 , 
                horizontalalignment = "center")
        
        
        
        
    
    
    # b) Pour chaque p√©riode de SUPERIORITE NUMERIQUE : 
    
    for periode_superiorite in dico_bilans_superiorite_num_USDH.keys() :
        
        debut_periode = periode_superiorite[0]  # date de d√©but de la p√©riode 
        fin_periode = periode_superiorite[1]    # date de fin de la p√©riode
        differentiel = dico_bilans_superiorite_num_USDH[periode_superiorite]["diff√©rentiel de buts USDH"]  # le diff√©rentiel de buts sur cette p√©riode
        
        if differentiel > 0 : 
            
            c = "green"
            differentiel = "+" + str(differentiel)
            
            
            
        elif differentiel == 0 : 
            
            c = "orange"
            differentiel = str(differentiel)
            
            

        else : 
            
            c = "red"
            differentiel = "- " + str((-1)*differentiel)
    
    
    
    
    
        # On trace un crochet VERTE du d√©but √† la fin de la p√©riode, indiquant une p√©riode de sup√©riorit√© num√©rique de l'USDH :

        # ligne horizontale : 

        ax.plot([debut_periode , fin_periode] , 
                2*[plus_grand_gap_en_faveur + 3] , 
                color = "#28F011" , 
                lw = 4)


               
            
        # On inscrit au-dessus de cette ligne VERTE le diff√©rentiel de buts EN FAVEUR DE L'USDH sur cette p√©riode : 

        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = plus_grand_gap_en_faveur + 2.5 , 
                s = differentiel,
                color = c , 
                fontsize = 14 , 
                horizontalalignment = "center")
        
        
        
        
        
        
        
        
     # c) Pour chaque p√©riode d'EGALITE NUMERIQUE : 
    
    for periode_egalite in dico_bilans_egalite_num_USDH.keys() :
        
        debut_periode = periode_egalite[0]  # date de d√©but de la p√©riode 
        fin_periode = periode_egalite[1]    # date de fin de la p√©riode
        differentiel = dico_bilans_egalite_num_USDH[periode_egalite]["diff√©rentiel de buts USDH"]  # le diff√©rentiel de buts sur cette p√©riode
        
        if differentiel > 0 : 
            
            c = "green"
            differentiel = "+" + str(differentiel)
            
            
            
        elif differentiel == 0 : 
            
            c = "orange"
            differentiel = str(differentiel)
        
            
            
        else : 
            
            c = "red"
            differentiel = "- " + str((-1)*differentiel)
            
            
            
            
        
        # On trace un crochet ORANGE du d√©but √† la fin de la p√©riode, indiquant une p√©riode d'inf√©riorit√© num√©rique de l'USDH :
        
        # ligne horizontale : 
        
        ax.plot([debut_periode , fin_periode] , 
                2*[plus_grand_gap_en_faveur + 3] , 
                color = "grey" , 
                lw = 4)
        
        
           
        
        # On inscrit au-dessus de cette ligne ORANGE le diff√©rentiel de buts EN FAVEUR DE L'USDH sur cette p√©riode : 
        
        ax.text(x = (debut_periode + fin_periode)/2 , 
                y = plus_grand_gap_en_faveur + 3.2 , 
                s = differentiel,
                color = c , 
                fontsize = 14 , 
                horizontalalignment = "center")
        
        
        
        
        
    
    
    

    
    # Affichage du titre (si souhait√©) :
    
    if show_title == True : 
        
        fig.suptitle(f"{journee} : √©volution du gap en faveur de l'USDH au fil de la rencontre." , 
                     fontsize = 28 , family = "serif")
        
        
        
        
        
        
        
        
        
        
    # Personnalisation de la figure :

    ax.set_xlabel("minute" , fontsize = 15 , family = "serif")
    ax.set_ylabel("gap" , fontsize = 15 , family = "serif")


    ax.set_xticks(range(0,61,2))


    ax.spines["top"].set_color(None)
    ax.spines["right"].set_color(None)
    ax.spines["bottom"].set_color(None)
    ax.spines["left"].set_position(("data" , 0))



    ax.grid(ls = "--")    
        
    
        
        
  
        
        
    return ax   


















## Fonction retournant un double histogramme VERTICAL des buts marqu√©s / tirs tent√©s / arr√™ts / 2min / avertissements par tranche de 5 minutes d'une rencontre pr√©cise :
    
def double_vertical_histogram(fig , ax , data , type_action = ["but" , "but 7m"] , journee = "J1" , 
                              show_title = False , nbr_tranches = 12 , text_color = "black") : 
    
    
    
    from itertools import permutations
    
    
    
    # SI l'utilisateur souhaite √©crire les textes (graduations, noms des axes, titre, ...) en BLANC : 
    
    if text_color == "white" : 
        
        
        # Alors la couleur de fond du graphique st NOIRE :
        
        fig.set_facecolor("#0E1117")
        ax.set_facecolor("#0E1117")
    
    
    
    
    
    
    # Filtrage des donn√©es concern√©es : 

    data_filtre = data[(data["journ√©e"] == journee) & (data["action"].isin(type_action))]
        
        
        
        


    # R√©cup√©ration de l'adversaire de l'USDH ce jour-l√† : 

    adv = [equipe for equipe in data_filtre["√©quipe"].unique() if equipe != "USDH"]
    adv = adv[0]

    
    

        
    if nbr_tranches in [3 , 4 , 5 , 6 , 10 , 12, 15, 20, 30, 60] :
        
        
        if nbr_tranches != 12 : 
            
            data_filtre["intervalle de temps"] = pd.cut(df["temps"] , bins = np.arange(0 , 61 , 60//nbr_tranches) , 
                                                        include_lowest = True)
            
            

        
            
        # diagramme en barres verticales de l'USDH (vers le haut  ==>  height >= 0) :

        ax.bar(x = range(1, nbr_tranches + 1) ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
               height = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() , 
               align = 'center' , 
               color = dico_couleurs["USDH"] , 
               label = "USDH")



        # Idem pour son adversaire (vers le bas  ==>  height <= 0): 
        
        # Si l'adversaire est Pouzauges OU St Berthevin --> sa couleur associ√©e est proche du noir ==> colorer les bordures des barres en blanc !
        
        if adv in ["Pouzauges" , "St Berthevin"] : 
            
            edgecolor = "white"
        
        
        else : 
            
            edgecolor = dico_couleurs[adv]
            
            
            
        ax.bar(x = range(1, nbr_tranches + 1) , 
               height = (-1)*data_filtre[data_filtre["√©quipe"] == adv]["intervalle de temps"].value_counts().sort_index() , 
               align = 'center' , 
               color = dico_couleurs[adv] , 
               label = adv , 
               edgecolor = edgecolor)   
            
            

        



        # 3) Personnalisation : 

        ax.spines["top"].set_color(None)
        ax.spines["right"].set_color(None)
        ax.spines["bottom"].set_position(("data" , 0))
        ax.spines["left"].set_position(("data" , 0.5))
        
        ax.spines["left"].set_color(text_color)
        ax.spines["bottom"].set_color(text_color)
        

        ax.set_xlim([0.5 , nbr_tranches + 0.5])
        
        


        # ticks : 

        # yticks : 

        max_action_USDH = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().max()    # le plus grand nbr de 'type_action' effectu√©s par l'USDH dans un intervalle de 5 minutes
        max_action_adv = data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().max()     # le plus grand nbr de 'type_action' effectu√©s par l'adversaire dans un intervalle de 5 minutes


        ytick_inf = (-1)*max_action_adv   # borne inf√©rieure des xticks
        ytick_sup = max_action_USDH + 1   # borne sup√©rieure des xticks (+1 car un range s'arr√™te une unit√© avant la valeur sp√©cifi√©e)


        yticks = list(np.arange(ytick_inf , 0 , 2)) + list(np.arange(0 , ytick_sup , 2))
        
        ax.set_yticks(yticks)
        ax.tick_params(axis = 'y', colors = text_color)   # couleur des graduations
        ax.set_yticklabels([abs(tick) for tick in yticks] , 
                            fontsize = 12 , 
                            color = text_color)
        
        
        
        





        # xticks :


        for tick in range(1 , nbr_tranches + 1) :
            
            

            ax.text(x = tick , 
                    y = ytick_inf + ytick_inf/1.15 - 1  ,       # ytick_inf - (9/10)*data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().mean() ,
                    s = f"{int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].left)}√®me - {int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].right)}√®me" ,
                    fontsize = 11 , 
                    rotation = 90 , 
                    color = text_color ,
                    verticalalignment = "center" , 
                    horizontalalignment = "center")


        ax.set_xticks(list(range(1 , nbr_tranches + 1)))
        ax.tick_params(axis = 'x', colors = text_color)   # couleur des graduations
        ax.set_xticklabels(nbr_tranches*[" "] , color = text_color)




        
        
        
        # titre du graphique ET label de l'axe des ordonn√©es : 

        
        # Si l'on regarde les tirs pris :

        if tuple(type_action) in list(permutations(["tir" , "but" , "but 7m"])) :

            if show_title == True :
                
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des tirs par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de tirs tent√©s"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        



        # Si l'on regarde les buts marqu√©s :

        elif tuple(type_action) in list(permutations(["but" , "but 7m"])) :
            
            if show_title == True :
            
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des buts par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de buts inscrits"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        
            
            
            
        # Si l'on regarde les buts marqu√©s DANS LE JEU :

        elif type_action == ["but"] :

            if show_title == True :
                
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des buts marqu√©s dans le jeu par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de buts inscrits dans le jeu"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        
            
            
            
            
        # Si l'on regarde les buts marqu√©s SUR 7M :

        elif type_action == ["but 7m"] :

            if show_title == True :
                
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des buts marqu√©s sur 7m par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de buts inscrits sur 7m"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        
            
            
            
        # Si l'on regarde les punitions (cartons jaunes + exclusions) :

        elif tuple(type_action) in list(permutations(["avertissement" , "2min"])) :

            if show_title == True :
            
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des punitions re√ßues par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de punitions"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        
            
            
            
        
        # Si l'on regarde les avertissements (cartons jaunes) :

        elif type_action == ["avertissement"] :

            if show_title == True :
                
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des cartons jaunes re√ßus par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de cartons jaunes"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        

            
            
            
        # Si l'on regarde les exclusions (2 minutes) :

        elif type_action == ["2min"] :
            
            if show_title == True :
            
                titre = f"{journee} ({dico_rencontres_USDH[journee][0]} - {dico_rencontres_USDH[journee][1]}) : r√©partition des 2mins re√ßus par tranche de 5 minutes"
                ax.set_title(titre , fontsize = 27 , family = "serif" , color = text_color , pad = 75)
                
            ylabel = "nombre de 2min"
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
            
            
            
            
        else : 
            
            raise ValueError("Erreur : type d'action INCONNU !")
        





        ax.set_xlabel(" ")







        # 4) Annotation des effectifs en face de chaque barre verticale (SSI effectif NON NUL) :

        # Pour chacune des 2 √©quipes : 

        for filtre in [data_filtre["√©quipe"] == "USDH" , data_filtre["√©quipe"] != "USDH"] :


            # Pour chaque intervalle de temps (12 au total) :

            for i , intervalle in zip(list(range(1,nbr_tranches + 1)) , data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().index) :

                
                # CAS 1 : si le nombre de tranches souhait√© vaut 3, 5 ou 15 --> la ligne de la mi-temps coupe la tranche du milieu et passe en plein sur le texte de l'effectif de cette tranche ==> d√©calage du texte sur un c√¥t√© !
                
                if nbr_tranches in [3,5,15] : 
                    
                    if i == nbr_tranches//2 + 1 :  # S'il s'agit de la tranche du milieu :
                        
                        x = i + 0.075   # on d√©cale le texte vers la droite
                        
                        
                    else : # SINON, s'il s'agit d'une autre tranche quelconque :
                        
                        x = i  # pas de soucis, on √©crit le texte au milieu
                
                
                
                # CAS 2 : 
                
                else : 
                    
                    x = i

                

                # CAS 1 : s'il s'agit des barres de l'USDH : 
                    
                if False not in (filtre == (data_filtre["√©quipe"] == "USDH")).unique() : 

                    y = (7/6)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle]   #  data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle] + (1.25/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean()
                    color = dico_couleurs["USDH"]
                    txt = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle]

                



                # CAS 2 : s'il s'agit des barres de l'adversaire de l'USDH : 

                else :

                    y = (10/9)*(-1)*data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle] - (1.25/10)*data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().mean()
                    color = edgecolor
                    txt = data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle]



                    
                # SI l'effectif de la barre est NON NUL ==> on l'√©crit en face de sa barre :

                if txt != 0 : 
                    
                    ax.text(x = x , 
                            y = y , 
                            s = txt , 
                            horizontalalignment = "center" , 
                            verticalalignment = "center" , 
                            color = color , 
                            fontsize = 16)








        # 5) Ligne symbolisant la mi-temps :


        ord_mi_temps_1 = (4/3)*ytick_sup  # (5/4)*ytick_inf     # ytick_inf - 0.5
        ord_mi_temps_2 = (4/3)*ytick_inf  # (5/4)*ytick_sup     # (ytick_sup-1) + (ytick_sup-1)/5

        abs_mi_temps = (nbr_tranches + 1)/2


        ax.plot([abs_mi_temps , abs_mi_temps] , 
                [ord_mi_temps_1 , ord_mi_temps_2] , 
                 color = "#00D1FF" , 
                 ls = "--" , 
                 lw = 2)


        ax.text(x = abs_mi_temps , 
                y = (3/2)*ytick_sup ,   # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , 
                color = "#00D1FF" , 
                fontsize = 12 , 
                s = "mi-temps" , 
                verticalalignment = "center" , 
                horizontalalignment = "center")




        ax.legend(loc = "upper left")







        # 6) Inscription du score des 2 √©quipes lors de chaque p√©riode : 
        
        

            
        # SI on regarde les buts marqu√©s :

        if (type_action == ["but" , "but 7m"]) or (type_action == ["but 7m" , "but"]) :

            score_M1_USDH = score_USDH(data = data , journee = journee , temps = 30)
            score_final_USDH = score_USDH(data = data , journee = journee , temps = 60)
            score_M2_USDH = score_final_USDH - score_M1_USDH   # nbr de buts inscrits en 2√®me p√©riode par l'USDH

            score_M1_adv = score_adversaire(data = data , journee = journee , temps = 30)
            score_final_adv = score_adversaire(data = data , journee = journee , temps = 60)
            score_M2_adv = score_final_adv - score_M1_adv   # nbr de buts inscrits en 2√®me p√©riode par l'adversaire de l'USDH





        else :

            score_M1_USDH = len(data_filtre[(data_filtre["√©quipe"] == "USDH") & (data_filtre["temps"] <= 30)])
            score_final_USDH = len(data_filtre[data_filtre["√©quipe"] == "USDH"])
            score_M2_USDH = score_final_USDH - score_M1_USDH   # nbr d'actions de ce type r√©alis√©es en 2√®me p√©riode par l'USDH

            score_M1_adv = len(data_filtre[(data_filtre["√©quipe"] == adv) & (data_filtre["temps"] <= 30)])
            score_final_adv = len(data_filtre[data_filtre["√©quipe"] == adv])
            score_M2_adv = score_final_adv - score_M1_adv   # nbr d'actions de ce type r√©alis√©es en 2√®me p√©riode par l'adversaire de l'USDH




        # SCORE M1 : 

        # USDH : 

        ax.text(y = (4/3)*ytick_sup ,   # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , 
                x = (1 + nbr_tranches/2)/2 - 2*nbr_tranches/50 ,   # (nbr_tranches + 0.5)/4 , 
                s = score_M1_USDH , 
                color = dico_couleurs["USDH"] , 
                fontsize = 30 , 
                verticalalignment = "center")


        # tiret : 

        ax.text(y = (4/3)*ytick_sup ,    # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , 
                x = (1 + nbr_tranches/2)/2 ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                s = " -" , 
                color = text_color , 
                fontsize = 30 , 
                verticalalignment = "center")



        # adv : 

        ax.text(y = (4/3)*ytick_sup ,    # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , # ytick_inf + ytick_inf/5 + 0.1  , 
                x = (1 + nbr_tranches/2)/2 + 2*nbr_tranches/50 ,   # (nbr_tranches + 0.5)/4 + 2*nbr_tranches/30 , 
                s = score_M1_adv , 
                color = edgecolor , 
                fontsize = 30 , 
                verticalalignment = "center")







        # score M2 : 

        # USDH : 

        ax.text(y = (4/3)*ytick_sup ,    #(ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , 
                x = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 - 2*nbr_tranches/50 , 
                s = score_M2_USDH , 
                color = dico_couleurs["USDH"] , 
                fontsize = 30 , 
                verticalalignment = "center")


        # tiret : 

        ax.text(y = (4/3)*ytick_sup ,    # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , 
                x = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2  ,     # 2.5*(nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                s = " -" , 
                color = text_color , 
                fontsize = 30 , 
                verticalalignment = "center")





        # adv : 

        ax.text(y = (4/3)*ytick_sup ,    # (ytick_sup-1) + (ytick_sup-1)/5 + (4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean() , # ytick_inf + ytick_inf/5 + 0.1 , 
                x = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 + 2*nbr_tranches/50 , 
                s = score_M2_adv , 
                color = edgecolor , 
                fontsize = 30 , 
                verticalalignment = "center")

            
            


        

        return ax
    
    
    
    
    
    
    else : 
        
        
        raise ValueError("nombre de tranches attendu : 3, 4, 5, 6, 10, 12, 15, 20, 30 ou 60.")





















## Fonction retourant un histogramme des diff√©rentiels de buts entre les 2 √©quipes par tranche de 5 minutes :
    
def histogram_differentiel_buts(fig , ax , data , journee = "J5" , show_title = False) : 
    
    
    
    # Filtrage des donn√©es concern√©es : 

    data_filtre = data[(data["journ√©e"] == journee) & (data["action"].isin(["but" , "but 7m"]))]
        
        
        
        


    # R√©cup√©ration de l'adversaire de l'USDH ce jour-l√† : 

    adv = [equipe for equipe in data_filtre["√©quipe"].unique() if equipe != "USDH"]
    adv = adv[0]


    
    
    
    # diagramme en barres verticales des diff√©rentiels de buts :
    
    # On calcule le DataFrame (√† 1 seule colonne : 'intervalle de temps') des diff√©rentiels de buts en faveur de l'USDH : 
    
    data_differentiel = pd.DataFrame(data = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index()) 
    
    
    
    
    # CAS 1 : histogramme des diff√©rentiels positifs (en VERT) :
    
    data_differentiel_pos = data_differentiel[data_differentiel["intervalle de temps"] > 0]
    
    ax.bar(x = np.arange(1,13)[data_differentiel["intervalle de temps"] > 0] ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
           height = data_differentiel_pos["intervalle de temps"] , 
           align = 'center' , 
           color = '#1FBF28')
    
    
    
    
    
    # CAS 2 : histogramme des diff√©rentiels negatifs (en ROUGE) :
    
    data_differentiel_neg = data_differentiel[data_differentiel["intervalle de temps"] < 0]
    
    
    ax.bar(x = np.arange(1,13)[data_differentiel["intervalle de temps"] < 0] ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
           height = data_differentiel_neg["intervalle de temps"] , 
           align = 'center' , 
           color = 'red')





    # 3) Personnalisation : 

    ax.spines["top"].set_color(None)
    ax.spines["right"].set_color(None)
    ax.spines["bottom"].set_position(("data" , 0))
    ax.spines["left"].set_position(("data" , 0))
    



    # ticks : 

    # yticks : 
    
    min_diff = (data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index()).min()
    max_diff = (data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index()).max()

    
    ytick_inf = min_diff       # borne inf√©rieure des yticks
    ytick_sup = max_diff + 1   # borne sup√©rieure des yticks (+1 car un range s'arr√™te une unit√© avant la valeur sp√©cifi√©e)



    ax.set_yticks(np.arange(ytick_inf , ytick_sup , 1))
    ax.set_yticklabels([abs(tick) for tick in np.arange(ytick_inf , ytick_sup , 1)] , 
                        fontsize = 12)



    
    # xticks :
    
    
    for tick in range(1,13) :
        
        ax.text(x = tick , 
                y = ytick_inf - 1.75 ,
                s = f"{int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].left)}√®me - {int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].right)}√®me" ,
                fontsize = 11 , 
                rotation = 90 ,
                verticalalignment = "center" , 
                horizontalalignment = "center")
        
        
    ax.set_xticks([])
    

    
    
    
    
    # titre du graphique : 
    

    # SI l'USDH joue √† domicile :

    if "USDH" in data[data["journ√©e"] == journee]["domicile"].unique() :

        titre = f"{journee} : USDH - {adv} (diff√©rence de buts par tranche de 5 minutes)"



    else : 

        titre = f"{journee} : {adv} - USDH (diff√©rence de buts par tranche de 5 minutes)"


    

    

    if show_title == True : 

        fig.suptitle(titre , fontsize = 35 , family = "serif" , fontweight = "bold")
        
        
    
    
    
    ax.set_ylabel("diff√©rence de buts" , fontsize = 15 , family = "serif")
    ax.set_xlabel(" ")
    
    
    
    



    # 4) Annotation des effectifs en face de chaque barre :

   

    # Pour chaque intervalle de temps (12 au total) :

    for i , intervalle in zip(list(range(1,13)) , data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().index) :


        x = i
        
        differentiel_buts = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle] - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle]


        if differentiel_buts > 0 :
            
            couleur = "#1FBF28"
            txt = "+ " + str(differentiel_buts)
            
        elif differentiel_buts == 0 : 
            
            couleur = "orange"
            txt = "0"
            
        else : 
            
            couleur = "red"
            txt = "- " + str(abs(differentiel_buts))
            
            
        if differentiel_buts >= 0 :
            
            y = differentiel_buts + 0.2
            
        else : 
            
            y = differentiel_buts - 0.2
        
        
    




        ax.text(x = x , 
                y = y , 
                s = txt , 
                horizontalalignment = "center" , 
                verticalalignment = "center" , 
                color = couleur , 
                fontsize = 16)








    # 5) Ligne symbolisant la mi-temps :


    ord_mi_temps_1 = ytick_inf - 0.5
    ord_mi_temps_2 = ytick_sup - 0.5  # car on avait d√©j√† ajout√© + 1 dans le range des xticks

    abs_mi_temps = 6.5


    ax.plot(2*[abs_mi_temps] , [ord_mi_temps_1 , ord_mi_temps_2] , 
            color = "green" , 
            ls = "--" , 
            lw = 2)


    ax.text(x = abs_mi_temps , 
            y = ord_mi_temps_2 + 0.55 , 
            color = "green" , 
            fontsize = 12 , 
            s = "mi-temps" , 
            verticalalignment = "center" , 
            horizontalalignment = "center")









    # 6) Inscription du score des 2 √©quipes lors de chaque p√©riode : 

    score_M1_USDH = data[(data["journ√©e"] == journee) & (data["temps"] <= 30)]["score USDH"].loc[data[(data["journ√©e"] == journee) & (data["temps"] <= 30)].index[-1]]
    score_final_USDH = data[data["journ√©e"] == journee]["score USDH"].max()
    score_M2_USDH = score_final_USDH - score_M1_USDH   # nbr de buts inscrits en 2√®me p√©riode par l'USDH

    score_M1_adv = data[(data["journ√©e"] == journee) & (data["temps"] <= 30)]["score adversaire"].loc[data[(data["journ√©e"] == journee) & (data["temps"] <= 30)].index[-1]]
    score_final_adv = data[data["journ√©e"] == journee]["score adversaire"].max()
    score_M2_adv = score_final_adv - score_M1_adv   # nbr de buts inscrits en 2√®me p√©riode par les adversaires



    # SCORE M1 : 

    # USDH : 

    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , 
            x = 2.75 , 
            s = score_M1_USDH , 
            color = "#BE1717" , 
            fontsize = 30 , 
            verticalalignment = "center")
    
    
    # tiret : 

    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , 
            x = 3.25 , 
            s = " -" , 
            color = "black" , 
            fontsize = 30 , 
            verticalalignment = "center")



    # adv : 

    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , # ytick_inf + ytick_inf/5 + 0.1  , 
            x = 3.75 , 
            s = score_M1_adv , 
            color = dico_couleurs[adv] , 
            fontsize = 30 , 
            verticalalignment = "center")



    
    
    

    # score M2 : 

    # USDH : 

    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , 
            x = 9 , 
            s = score_M2_USDH , 
            color = "#BE1717" , 
            fontsize = 30 , 
            verticalalignment = "center")
    
    
    # tiret : 
    
    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , 
            x = 9.5 , 
            s = " -" , 
            color = "black" , 
            fontsize = 30 , 
            verticalalignment = "center")
    
    



    # adv : 

    ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + 0.25 , # ytick_inf + ytick_inf/5 + 0.1 , 
           x = 10 , 
           s = score_M2_adv , 
           color = dico_couleurs[adv] , 
           fontsize = 30 , 
           verticalalignment = "center")
    
    
    
    
    
    
    return ax


















## Fonction retournant un diagramme en barres des buts marqu√©s par joueur d'une √©quipe pr√©cise, lors d'une rencontre pr√©cise :
    
def diagramme_barres_buts_equipe(fig , ax , data , journee = "J5" , equipe = "USDH" , show_title = True) :
    
    """Retourne une figure contenant le diagramme en barres des buts marqu√©s par joueur de l'√©quipe renseign√©e, lors du match 
       de championnat pr√©cis√©."""
    
    
    # Filtrage des donn√©es qui nous int√©ressent :
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == equipe) & data["action"].isin(["but" , "but 7m"])]
    
    
    
    # Graphique : 
    
    sns.countplot(data = data_filtre , 
                  x = "joueur" , 
                  order = data_filtre["joueur"].value_counts().index ,
                  ax = ax)


    ax.grid(ls = "--" , alpha = 0.7)

    ax.set_ylabel("tirs tent√©s")
    
    
    if show_title == True : 
        
        fig.suptitle(f"Buts marqu√©s par joueur de {equipe}, {journee}" , fontsize = 30 , family = "serif")
        
        
    
    ax.set_xticklabels(labels = data_filtre["joueur"].value_counts().index , 
                       rotation = 35)
    
    
    ax.spines["top"].set_color(None)
    ax.spines["right"].set_color(None)
    
    
    
    
    
    
    
    # Ajout des effectifs au-dessus des barres : 
    
    for joueur , position in zip(list(data_filtre["joueur"].value_counts().index) , list(range(len(data_filtre["joueur"].value_counts().index)))) :
        
        ax.text(x = position , 
                y = data_filtre["joueur"].value_counts().loc[joueur] + 0.3 , 
                s = data_filtre["joueur"].value_counts().loc[joueur] , 
                fontsize = 16 , 
                color = "red" , 
                horizontalalignment = "center")
    
    
    
    
    
    return ax





















## Fonction retournant un camembert du type d'actions souhait√©, par joueur d'une √©quipe pr√©cise, lors d'une rencontre pr√©cise :
    
def camembert_type_action_equipe(fig , ax , data , journee = "J5" , equipe = "USDH" , show_title = True , 
                                 type_action = ["but" , "but 7m"]) : 
    
    
    """Retourne un diagramme circulaire du type d'action voulu, par joueur de l'√©quipe renseign√©e en argument, lors de la rencontre 
       pr√©cis√©e."""
    
    
    
    # Filtrage des donn√©es qui nous int√©ressent :
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == equipe) & data["action"].isin(type_action)]
    
    
    
    # Graphique : 
    
    ax.pie(x = data_filtre["joueur"].value_counts() , 
           labels = data_filtre["joueur"].value_counts().index , 
           autopct = lambda pct : str(np.round(pct , 2)) + " %" , 
           pctdistance = 0.5 , 
           labeldistance = 1.05 , 
           shadow = True , 
           startangle = 90 , 
           radius = 1.35)


    
    
    
    if show_title == True : 
        
        if len(type_action) == 2 : 
            
            if "but" in type_action : 
        
                fig.suptitle(f"Proportion des buts de {equipe} marqu√©s par joueur, {journee}" , fontsize = 30 , family = "serif")
        
        
            else : 
                
                fig.suptitle(f"Proportion des avertissements + 2min de {equipe} par joueur, {journee}" , fontsize = 30 , family = "serif")
        
        
        else : 
            
            fig.suptitle(f"Proportion des {type_action[0]} de {equipe} marqu√©s par joueur, {journee}" , fontsize = 30 , family = "serif")
        
                
                
    
    ax.legend(loc = (1.35 , 0.5))
    
    
    
    return ax  





















## Fonction retournant un camembert PLOTLY du nombre d'actions du type d'action renseign√© r√©alis√©es par joueur d'une √©quipe, lors d'un match bien pr√©cis :
    
def camembert_type_action_equipe_plotly(data , journee = "J5" , equipe = "USDH" , show_title = True , 
                                        type_action = ["but" , "but 7m"]) : 
    
    
    """Retourne un diagramme circulaire du type d'actions voulu, par joueur de l'√©quipe renseign√©e en argument, lors de la rencontre 
       pr√©cis√©e."""
    
    
    
    # Filtrage des donn√©es qui nous int√©ressent :
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == equipe) & data["action"].isin(type_action)]
    
    
    
    # Graphique : 
    
    fig = px.pie(values = data_filtre["joueur"].value_counts() , 
                 names = data_filtre["joueur"].value_counts(normalize = True).index , 
                 color_discrete_sequence=px.colors.sequential.RdBu , 
                 hole = 1/5)
    
    
    
    fig.update_traces(textposition = "inside" , 
                      textinfo = "percent+label")


    
    
    
    if show_title == True : 
        
        if len(type_action) == 2 : 
            
            if "but" in type_action : 
        
                fig.update_layout(title_text = f"Proportion des buts de {equipe} marqu√©s par joueur, {journee}")
        
        
            else : 
                
                fig.update_layout(title_text = f"Proportion des avertissements + 2min de {equipe} par joueur, {journee}")
        
        
        else : 
            
            fig.update_layout(title_text = f"Proportion des {type_action[0]} de {equipe} marqu√©s par joueur, {journee}")
        
        
    
    
    
    
    
    
    return fig







#####################################################################################################################
#####################################################################################################################

###                                 FONCTIONS SPECIFIQUES A L'APPLICATION STREAMLIT :
    
#####################################################################################################################
#####################################################################################################################



## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le score de l'√©quipe jouant √† domicile :
    
def score_domicile(data , journee = "J1" , periode = "final") : 
    
    
    """Retourne le score de l'√©quipe jouant √† domicile lors de la journ√©e renseign√©e.
       Au choix : retourne le score en 1√®re mi-temps ('M1') , en 2√®me mi-temps ('M2') ou le score final ('final') de l'√©quipe."""
    
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile lors de cette rencontre : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    # 2) On peut donc en d√©duire le score de l'√©quipe √† domicile :
    
    
    # a) On identifie la colonne indiquant le score de cette √©quipe (2 choix possibles : 'score_USDH' ou 'score_adversaire').
    
    # CAS 1 : l'√©quipe √† domicile est l'USDH ==> la colonne indiquant le score de l'√©quiupe est 'score_USDH' : 
    
    if equipe_domicile == "USDH" : 
        
        col_score = "score USDH"
        
        
        
    # CAS 2 : l'√©quipe √† domicile N'est PAS l'USDH ==> la colonne indiquant le score de l'√©quiupe est 'scorz_adversaire' : 
        
    else : 
        
        col_score = "score adversaire"
        
        
        
        
        
        
    # b) On r√©cup√®re le score de l'√©quipe en fonction de la p√©riode souhait√©e : 
    
    if periode == "M1" :
        
        score_equipe = data_filtre[data_filtre["temps"] <= 30][col_score].max()
        
        return score_equipe
        
        
        
    elif periode == "M2" : 
        
        score_final = data_filtre[col_score].max()  # le score final de l'√©quipe
        score_M1 = data_filtre[data_filtre["temps"] <= 30][col_score].max()  # le score de l'√©quipe en M1
        
        score_equipe = score_final - score_M1  # score M2 = score final - score M1
        
        
        return score_equipe
        
        
         
    elif periode in ["final" , "score final"] :
        
        score_equipe = data_filtre[col_score].max()
        
        return score_equipe
        
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'periode' : 'M1' , 'M2' , 'final' , ou 'score final'.")
    
        
    
    
    
    
    
    
    
    
    




## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le score de l'√©quipe jouant √† l'ext√©rieur :
    
def score_exterieur(data , journee = "J1" , periode = "final") : 
    
    
    """Retourne le score de l'√©quipe jouant √† l'ext√©rieur lors de la journ√©e renseign√©e.
       Au choix : retourne le score en 1√®re mi-temps ('M1') , en 2√®me mi-temps ('M2') ou le score final ('final') de l'√©quipe."""
    
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur lors de cette rencontre : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    # 2) On peut donc en d√©duire le score de l'√©quipe √† l'ext√©rieur :
    
    
    # a) On identifie la colonne indiquant le score de cette √©quipe (2 choix possibles : 'score_USDH' ou 'score_adversaire').
    
    # CAS 1 : l'√©quipe √† l'ext√©rieur est l'USDH ==> la colonne indiquant le score de l'√©quiupe est 'score_USDH' : 
    
    if equipe_exterieur == "USDH" : 
        
        col_score = "score USDH"
        
        
        
    # CAS 2 : l'√©quipe √† l'ext√©rieur N'est PAS l'USDH ==> la colonne indiquant le score de l'√©quiupe est 'scorz_adversaire' : 
        
    else : 
        
        col_score = "score adversaire"
        
        
        
        
        
        
    # b) On r√©cup√®re le score de l'√©quipe en fonction de la p√©riode souhait√©e : 
    
    if periode == "M1" :
        
        score_equipe = data_filtre[data_filtre["temps"] <= 30][col_score].max()
        
        return score_equipe
        
        
        
    elif periode == "M2" : 
        
        score_final = data_filtre[col_score].max()  # le score final de l'√©quipe
        score_M1 = data_filtre[data_filtre["temps"] <= 30][col_score].max()  # le score de l'√©quipe en M1
        
        score_equipe = score_final - score_M1  # score M2 = score final - score M1
        
        
        return score_equipe
        
        
         
    elif periode in ["final" , "score final"] :
        
        score_equipe = data_filtre[col_score].max()
        
        return score_equipe
        
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'periode' : 'M1' , 'M2' , 'final' , ou 'score final'.")















## Fonction r√©capitulative permettant de retourner AU CHOIX le score de l'√©quipe jouant √† domicile OU de celle jouant √† l'ext√©rieur, lors de la journ√©e de championnat voulue :

def score(data , journee = "J5" , periode = "final" , equipe = "domicile") :
    
    """Retourne le score de l'√©quipe voulue, lors de la journ√©e de championnat renseign√©e.
       Au choix : retourne le score en 1√®re mi-temps ('M1') , en 2√®me mi-temps ('M2') ou le score final ('final') de l'√©quipe."""
    
    
    # CAS 1 : si je souhaite obtenir le score de l'√©quipe √† DOMICILE ==> j'utilise la fonction 'score_domicile' :
    
    if equipe in ["domicile" , "dom"] :
        
        
        return score_domicile(data = data , journee = journee , periode = periode)
    
    
    
    
    # CAS 2 : si je souhaite obtenir le score de l'√©quipe √† L'EXTERIEUR ==> j'utilise la fonction 'score_exterieur' :
    
    elif equipe in ["ext√©rieur" , "ext"] :
        
        
        return score_exterieur(data = data , journee = journee , periode = periode)
    
    
    
    
    else : 
        
        raise ValueError("patram√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")

















## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le nombre de punitions (avertissements OU 2min, au choix) re√ßus l'√©quipe jouant √† domicile :
    
def nbr_punitions_domicile(data , journee = "J1" , type_punition = "avertissement") : 
    
    
    """Retourne le nbr de punitions (soit avertissement, soit 2min) re√ßus par l'√©quipe jouant √† domicile lors de la journ√©e 
       renseign√©e."""
    
    

    if type_punition in ["avertissement" , "2min"] :
        
        
        
        # 0) On commence par r√©cup√©rer le nom de l'√©quipe jouant √† domicile lors de cette rencontre : 

        equipe_domicile = dico_rencontres_USDH[journee][0]





        # 1) On filtre √† pr√©sent les donn√©es : 

        data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == equipe_domicile) & (data["action"] == type_punition)]





        # 2) On peut donc en d√©duire le nbr de punitions re√ßues par l'√©quipe jouant √† domicile :

        nbr_punitions = len(data_filtre)
        
        
        return nbr_punitions
    
    
    
    
    
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'type_punition' : 'avertissement' ou '2min'.")
        
        
        
        












## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le nombre de punitions (avertissements OU 2min, au choix) re√ßus l'√©quipe jouant √† l'ext√©rieur :
    
def nbr_punitions_exterieur(data , journee = "J1" , type_punition = "avertissement") : 
    
    
    """Retourne le nbr de punitions (soit avertissement, soit 2min) re√ßus par l'√©quipe jouant √† l'ext√©rieur lors de la journ√©e 
       renseign√©e."""
    
    

    if type_punition in ["avertissement" , "2min"] :
        
        
        
        # 0) On commence par r√©cup√©rer le nom de l'√©quipe jouant √† l'ext√©rieur lors de cette rencontre : 

        equipe_exterieur = dico_rencontres_USDH[journee][1]





        # 1) On filtre √† pr√©sent les donn√©es : 

        data_filtre = data[(data["journ√©e"] == journee) & (data["√©quipe"] == equipe_exterieur) & (data["action"] == type_punition)]





        # 2) On peut donc en d√©duire le nbr de punitions re√ßues par l'√©quipe jouant √† domicile :

        nbr_punitions = len(data_filtre)
        
        
        return nbr_punitions
    
    
    
    
    
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'type_punition' : 'avertissement' ou '2min'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
## Fonction r√©capitulative permettant, au choix, de retourner le nombre de punitions subbies par l'√©quipe jouant √† domicile OU √† l'ext√©rieur lors de la journ√©e de championnat renseign√©e :
    
def nbr_punitions(data , journee = "J5" , type_punition = "avertissement" , equipe = "domicile") :
    
    """Retourne le nombre de punitions du type mentionn√© re√ßues par l'√©quipe voulue, lors de la journ√©e renseign√©e."""
    
    
    # CAS 1 : si l'√©quipe voulue est celle jouant √† domicile ==> on utilise la fonction 'nbr_punitions_domicile' : 
    
    if equipe in ["domicile" , "dom"] :  
        
        return nbr_punitions_domicile(data = data , journee = journee , type_punition = type_punition)
    
    
    
    
    
    # CAS 2 : si l'√©quipe voulue est celle jouant √† l'ext√©rieur ==> on utilise la fonction 'nbr_punitions_exterieur' : 
    
    if equipe in ["ext√©rieur" , "ext"] :  
        
        return nbr_punitions_exterieur(data = data , journee = journee , type_punition = type_punition)
        
        
        
        
        
        
    else : 
        
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        


## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN T√äTE par l'√©quipe jouant √† domicile :
    
def temps_en_tete_domicile(data , journee = "J5" , duree_en = "pct") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe √† domicile a men√© au score, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    # 2) On r√©cup√®re le dictionaire des dur√©es pass√©s par l'USDH √† mener / √† √©galit√© / √† √™tre men√© au score : 
    
    dates , durees , durees_totales , pct = duree_situation_score(data = data , journee = journee)
    
    
    
    # CAS 1 : je souhaite ces dur√©es en MINUTES ==> je regarde le dictionnaire 'durees_totales' : 
    
    if duree_en in ["minutes"] :
        
        
        # SI l'√©quipe jouant √† domicile est l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'USDH m√®ne'
        
        if equipe_domicile == "USDH" :
        
            duree_en_tete = durees_totales["USDH m√®ne"]
            
            
            
        # SINON, si l'√©quipe jouant √† domicile est l'adversaire de l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'adversaire m√®ne'
        
        else : 
            
            duree_en_tete = durees_totales["adversaire m√®ne"] 
    
    
    
    
    
    
        return duree_en_tete
    
    
    
    
    
    
    # CAS 2 : je souhaite ces dur√©es en POURCENTAGE DES 60 MINUTES ==> je regarde le dictionnaire 'pct' :
    
    elif duree_en in ["pct" , "%" , "pourcentage"] :
        
        
        # SI l'√©quipe jouant √† domicile est l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'USDH m√®ne'
        
        if equipe_domicile == "USDH" :
        
            duree_en_tete = pct["USDH m√®ne"]
            
            
            
        # SINON, si l'√©quipe jouant √† domicile est l'adversaire de l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'adversaire m√®ne'
        
        else : 
            
            duree_en_tete = pct["adversaire m√®ne"] 
    
    
    
    
    
    
        return duree_en_tete
    
    
    
    
    
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'duree_en' : 'minutes' , 'pct' , '%' ou 'pourcentage'.")
    
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN T√äTE par l'√©quipe jouant √† l'ext√©rieur :
    
def temps_en_tete_exterieur(data , journee = "J5" , duree_en = "pct") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe √† l'ext√©rieur a men√© au score, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    # 2) On r√©cup√®re le dictionaire des dur√©es pass√©s par l'USDH √† mener / √† √©galit√© / √† √™tre men√© au score : 
    
    dates , durees , durees_totales , pct = duree_situation_score(data = data , journee = journee)
    
    
    
    # CAS 1 : je souhaite ces dur√©es en MINUTES ==> je regarde le dictionnaire 'durees_totales' : 
    
    if duree_en in ["minutes"] :
        
        
        # SI l'√©quipe jouant √† l'ext√©rieur est l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'USDH m√®ne'
        
        if equipe_exterieur == "USDH" :
        
            duree_en_tete = durees_totales["USDH m√®ne"]
            
            
            
        # SINON, si l'√©quipe jouant √† l'ext√©rieur est l'adversaire de l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'adversaire m√®ne'
        
        else : 
            
            duree_en_tete = durees_totales["adversaire m√®ne"] 
    
    
    
    
    
    
        return duree_en_tete
    
    
    
    
    
    
    # CAS 2 : je souhaite ces dur√©es en POURCENTAGE DES 60 MINUTES ==> je regarde le dictionnaire 'pct' :
    
    elif duree_en in ["pct" , "%" , "pourcentage"] :
        
        
        # SI l'√©quipe jouant √† domicile est l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'USDH m√®ne'
        
        if equipe_exterieur == "USDH" :
        
            duree_en_tete = pct["USDH m√®ne"]
            
            
            
        # SINON, si l'√©quipe jouant √† domicile est l'adversaire de l'USDH ==> son temps pass√© en t√™te est associ√© √† la cl√© 'adversaire m√®ne'
        
        else : 
            
            duree_en_tete = pct["adversaire m√®ne"] 
    
    
    
    
    
    
        return duree_en_tete
    
    
    
    
    
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'duree_en' : 'minutes' , 'pct' , '%' ou 'pourcentage'.")
        
        
        
        
        
        
        
        
    















## Fonction r√©capitulative permettant de r√©cup√©rer, AU CHOIX et pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN T√äTE par l'√©quipe jouant √† domicile OU √† l'ext√©rieur :

def temps_en_tete(data , journee = "J5" , duree_en = "pct" , equipe = "domicile") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe renseign√©e a men√© au score, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    
    # SI je souhaite retourner le temps pass√© en t√™te par l'√©quipe √† DOMICILE ==> j'utilise la fonction 'temps_en_tete_domicile'
    
    if equipe in ["domicile" , "dom"] : 
        
        
        return temps_en_tete_domicile(data = data , journee = journee , duree_en = duree_en)
    
    
    
    
    
    # SI je souhaite retourner le temps pass√© en t√™te par l'√©quipe √† L'EXTERIEUR ==> j'utilise la fonction 'temps_en_tete_exterieur'
    
    elif equipe in ["ext√©rieur" , "ext"] : 
        
        
        return temps_en_tete_exterieur(data = data , journee = journee , duree_en = duree_en)
    
    
    

    
    else : 
        
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN SUPERIORITE NUMERIQUE par l'√©quipe jouant √† domicile :
    
def temps_en_superiorite_domicile(data , journee = "J5" , format_duree = "pct") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe √† domicile a jou√© en sup√©riorit√© num√©rique, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    # 2) On r√©cup√®re le temps total pass√© par cette √©quipe dans cette situation num√©rique gr√¢ce √† la fonction 'duree_passee_situation_numerique_equipe' :
    

    temps_en_situation_num = duree_passee_situation_numerique_equipe(data = data , journee = journee , 
                                                                     equipe = equipe_domicile , format_duree = format_duree , 
                                                                     situation = 'sup√©riorit√© num√©rique') 
    
    
    
    
    
    
    return temps_en_situation_num
    




















## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN SUPERIORITE NUMERIQUE par l'√©quipe jouant √† l'ext√©rieur :
    
def temps_en_superiorite_exterieur(data , journee = "J5" , format_duree = "pct") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe √† l'ext√©rieur a jou√© en sup√©riorit√© num√©rique, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    # 2) On r√©cup√®re le temps total pass√© par cette √©quipe dans cette situation num√©rique gr√¢ce √† la fonction 'duree_totale_situation_numerique' :
    

    temps_en_situation_num = duree_passee_situation_numerique_equipe(data = data , journee = journee , 
                                                                     equipe = equipe_exterieur , format_duree = format_duree , 
                                                                     situation = 'sup√©riorit√© num√©rique')  
    
    
    
    
    
    
    return temps_en_situation_num
    



















## Fonction r√©capitulative permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le TEMPS PASSE EN SUPERIORITE NUMERIQUE par l'√©quipe renseign√©e :

def temps_en_superiorite(data , journee = "J5" , format_duree = "pct" , equipe = "domicile") :
    
    """Retourne la dur√©e (sous forme de pourcentage des 60 minutes de jeu du match OU exprim√© en minutes) pendant laquelle 
       l'√©quipe renseign√©e a jou√© en sup√©riorit√© num√©rique, durant la journ√©e de championnat renseign√©e en argument."""
    
    
    # SI je souhaite conna√Ætre le temps pass√© en sup√©riorit√© par l'√©quipe jouant √† DOMICILE ==> fonction 'temps_en_superiorite_domicile'
    
    if equipe in ["domicile" , "dom"] : 
        
        
        return temps_en_superiorite_domicile(data = data , journee = journee , format_duree = format_duree)
        
        
        
        
        
        
    # SI je souhaite conna√Ætre le temps pass√© en sup√©riorit√© par l'√©quipe jouant √† L'EXTERIEUR ==> fonction 'temps_en_superiorite_exterieur'
    
    elif equipe in ["ext√©rieur" , "ext"] :
    
    
        return temps_en_superiorite_exterieur(data = data , journee = journee , format_duree = format_duree)
    
    
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou' ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        




## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le DIFFERENTIEL DE BUTS sur les p√©riodes de SUPERIORITE NUMERIQUE par l'√©quipe jouant √† domicile :
    
def differentiel_superiorite_domicile(data , journee = "J5" , differentiel_en = "buts") :
    
    
    """Retourne le diff√©rentiel diff = buts marqu√©s - buts encaiss√©s de l'√©quipe jouant √† domicile LORS DES PHASES QU'ELLE 
       JOUE EN SUPERIORITE NUMERIQUE, au cours de la journ√©e de championnat renseign√©e."""
    
    
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    
    # 2) On r√©cup√®re le dictionaire des buts marqu√©s / encaiss√©s / diff√©rentiel de l'√©quipe jouant √† domicile lors de CHAQUE p√©riode de sup√©riorit√© num√©rique : 
    
    dico_bilans_superiorites_domicile = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe_domicile , 
                                                                         situation = "sup√©riorit√© num√©rique")
    
    
    
    
    
    # On extrait de ce dictionnaire la liste des diff√©rentiels de buts de cette √©quipe lors de chaque p√©riode qu'elle a jou√© en sup√©riorit√© num√©rique :
    
    L_differentiels = [dico_bilans_superiorites_domicile[periode][f"diff√©rentiel de buts {equipe_domicile}"] for periode in dico_bilans_superiorites_domicile.keys()]
        
        
                       
                       
                       
    # On calcule le diff√©rentiel TOTAL sur l'ensemble du temps pass√© en sup√©riorit√© num√©rique en sommant les diff√©rentiels de chaque p√©riode de sup√©riorit√© jou√©e par l'√©quipe :

    differentiel_total = sum(L_differentiels)  
    
    

                       
                       

    # SI je souhaite retourner le diff√©rentiel TOTAL (exprim√© en buts) : 

    if differentiel_en == "buts" :


        return differentiel_total
    
    
    

    # SI je souhaite ramener ce diff√©rentiel PAR MINUTE JOUEE EN SUPERIORITE NUMERIQUE (exprim√© en buts / minute) :

    elif differentiel_en == "buts / minute" : 


        # On r√©cup√®re le temps pass√© par l'√©quipe jouant √† domicile en sup√©riorit√© num√©rique : 

        temps_superiorite = temps_en_superiorite(data = data , journee = journee , format_duree = "float" , equipe = "domicile")


        # On effectue le quotient : 

        return differentiel_total / temps_superiorite




    else : 

        raise ValueError("param√®tre attendu pour l'argument 'differentiel_en' : 'buts' ou 'buts / minute'.")






















## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le DIFFERENTIEL DE BUTS sur les p√©riodes de SUPERIORITE NUMERIQUE par l'√©quipe jouant √† l'ext√©rieur :
    
def differentiel_superiorite_exterieur(data , journee = "J5" , differentiel_en = "buts") :
    
    
    """Retourne le diff√©rentiel diff = buts marqu√©s - buts encaiss√©s de l'√©quipe jouant √† l'ext√©rieur LORS DES PHASES QU'ELLE 
       JOUE EN SUPERIORITE NUMERIQUE, au cours de la journ√©e de championnat renseign√©e."""
    
    
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    
    # 2) On r√©cup√®re le dictionaire des buts marqu√©s / encaiss√©s / diff√©rentiel de l'√©quipe jouant √† l'ext√©rieur lors de CHAQUE p√©riode de sup√©riorit√© num√©rique : 
    
    dico_bilans_superiorites_domicile = bilan_situation_numerique_equipe(data = data , journee = journee , equipe = equipe_exterieur , 
                                                                         situation = "sup√©riorit√© num√©rique")
    
    
    
    
    
    # On extrait de ce dictionnaire la liste des diff√©rentiels de buts de cette √©quipe lors de chaque p√©riode qu'elle a jou√© en sup√©riorit√© num√©rique :
    
    L_differentiels = [dico_bilans_superiorites_domicile[periode][f"diff√©rentiel de buts {equipe_exterieur}"] for periode in dico_bilans_superiorites_domicile.keys()]
        
        
        
        
        
        
    # On calcule le diff√©rentiel TOTAL sur l'ensemble du temps pass√© en sup√©riorit√© num√©rique en sommant les diff√©rentiels de chaque p√©riode de sup√©riorit√© jou√©e par l'√©quipe :

    differentiel_total = sum(L_differentiels)  
    
    


    # SI je souhaite retourner le diff√©rentiel TOTAL (exprim√© en buts) : 

    if differentiel_en == "buts" :


        return differentiel_total
    
    
    

    # SI je souhaite ramener ce diff√©rentiel PAR MINUTE JOUEE EN SUPERIORITE NUMERIQUE (exprim√© en buts / minute) :

    elif differentiel_en == "buts / minute" : 


        # On r√©cup√®re le temps pass√© par l'√©quipe jouant √† l'ext√©rieur en sup√©riorit√© num√©rique : 

        temps_superiorite = temps_en_superiorite(data = data , journee = journee , format_duree = "float" , equipe = "ext√©rieur")


        # On effectue le quotient : 

        return differentiel_total / temps_superiorite


    
    
    


    else : 

        raise ValueError("param√®tre attendu pour l'argument 'differentiel_en' : 'buts' ou 'buts / minute'.")
        
        
        
        
        
        
        
        
        
        













## Fonction r√©capitulative permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le DIFFERENTIEL DE BUTS sur les p√©riodes de SUPERIORITE NUMERIQUE par l'√©quipe renseign√©e (domicile ou ext√©rieur) :
    
def differentiel_superiorite(data , journee = "J5" , differentiel_en = "buts" , equipe = "domicile") :
    
    
    """Retourne le diff√©rentiel diff = buts marqu√©s - buts encaiss√©s de l'√©quipe renseign√©e en argiment LORS DES PHASES QU'ELLE 
       JOUE EN SUPERIORITE NUMERIQUE, au cours de la journ√©e de championnat renseign√©e."""
    
    
    
    # SI je souhaite conna√Ætre le diff√©rentiel de buts sur les sup√©riorit√©s num√©riques de l'√©quipe jouant √† DOMICILE ==> j'utilise la fonction 'differentiel_superiorite_domicile' :
    
    if equipe in ["domicile" , "dom"] : 
        
           
            return differentiel_superiorite_domicile(data = data , journee = journee , differentiel_en = differentiel_en)
        
        
        
        
        
        
        
    # SI je souhaite conna√Ætre le diff√©rentiel de buts sur les sup√©riorit√©s num√©riques de l'√©quipe jouant √† L'EXTERIEUR ==> j'utilise la fonction 'differentiel_superiorite_exterieur' :
    
    elif equipe in ["ext√©rieur" , "ext"] : 
        
           
            return differentiel_superiorite_exterieur(data = data , journee = journee , differentiel_en = differentiel_en)
        
        
        
        
        
    else : 
        
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       
        
        
        
        
        
## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le NOMBRE de p√©riodes de SUPERIORITE NUMERIQUE jou√©es par l'√©quipe jouant √† domicile :
    
def nbr_periodes_superiorite_domicile(data , journee = "J5") :
    
    
    """Retourne le nombre de p√©riodes de sup√©riorit√©s num√©riques jou√©es par l'√©quipe √† domicile lors de la rencontre renseig√©e."""
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile lors de cette journ√©e de championnat : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    
    
    # 2) On r√©cup√®re la liste des p√©riodes de sup√©riorit√© num√©rique de l'√©quipe √† domicile :
    
    
    periodes_sup_equipe_dom = periodes_situation_numerique_equipe(data = data , journee = journee , 
                                                                  equipe = equipe_domicile , situation = "sup√©riorit√© num√©rique")

        
        
        
    
        
        
        
    # 3) On calcule alors le nombre de p√©riodes de sup√©riorit√© en calculant la longueur de la liste 'periodes_sup_equipe_dom' : 
    
    
    return len(periodes_sup_equipe_dom)





















## Fonction permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le NOMBRE de p√©riodes de SUPERIORITE NUMERIQUE jou√©es par l'√©quipe jouant √† l'ext√©rieur :
    
def nbr_periodes_superiorite_exterieur(data , journee = "J5") :
    
    
    """Retourne le nombre de p√©riodes de sup√©riorit√©s num√©riques jou√©es par l'√©quipe √† l'ext√©rieur lors de la rencontre renseig√©e."""
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    
    
    # 2) On r√©cup√®re la liste des p√©riodes de sup√©riorit√© num√©rique de l'√©quipe √† l'ext√©rieur :
    
    
    periodes_sup_equipe_ext = periodes_situation_numerique_equipe(data = data , journee = journee , 
                                                                  equipe = equipe_exterieur , situation = "sup√©riorit√© num√©rique")

        
        

        
        
        
    # 3) On calcule alors le nombre de p√©riodes de sup√©riorit√© en calculant la longueur de la liste 'periodes_sup_equipe_ext' : 
    
    
    return len(periodes_sup_equipe_ext)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
## Fonction r√©capitulative permettant de r√©cup√©rer, pour une journ√©e de championnat donn√©e, le NOMBRE de p√©riodes de SUPERIORITE NUMERIQUE jou√©es par l'√©quipe souhait√©e (domicile ou ext√©rieur) :
    
def nbr_periodes_superiorite(data , journee = "J5" , equipe = "domicile") :
    
    
    """Retourne le nombre de p√©riodes de sup√©riorit√©s num√©riques jou√©es par l'√©quipe renseign√©e lors de la rencontre pr√©cis√©e."""
    
    
    # SI je souhaite r√©cup√©rer le nbr de p√©riodes en sup√©riorit√© num√©rique de l'√©quipe jouant √† domicile ==> j'utilise la fonction 'nbr_periodes_superiorite_domicile'
    
    if equipe in ["domicile" , "dom"] :
        
        
        return nbr_periodes_superiorite_domicile(data = data , journee = journee)
    
    
    
    
    
    
    # SI je souhaite r√©cup√©rer le nbr de p√©riodes en sup√©riorit√© num√©rique de l'√©quipe jouant √† l'ext√©rieur ==> j'utilise la fonction 'nbr_periodes_superiorite_exterieur'
    
    elif equipe in ["ext√©rieur" , "ext"] :
        
        
        return nbr_periodes_superiorite_exterieur(data = data , journee = journee)
    
    
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
    
        
        
        


















## Fonction permettant de retourner la plus grosse s√©rie de buts encaiss√©s successivement SANS INSCRIRE LE MOINDRE BUT, de l'√©quipe √† domicile :
    
def plus_grosse_serie_buts_encaisses_domicile(data , journee = "J5") :
    
    """Retourne les dates de d√©but / fin ainsi que la dur√©e de la plus grosse p√©riode de disette offensive de l'√©quipe jouant 
       √† domicile lors de la rencontre renseign√©e en argument."""
    
    
    
     # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = dico_rencontres_USDH[journee][0]
    
    
    
    
    
    
    
    
     # 2) On r√©cup√®re la liste des p√©riodes de buts encaiss√©s successivement sans scorer, de l'√©quipe √† domicile :
    
    
    # CAS 1 : l'√©quipe √† domicile est l'USDH ==> la fonction 'series_buts_encaisses' nous retourne les s√©ries de buts cons√©cutifs encaiss√©s par l'USDH :
    
    if equipe_domicile == "USDH" : 
        
        periodes_encaissement = series_buts_encaisses(data = data , journee = journee)  # le dictionnaire des scores associ√©s √† chaque p√©riode de buts successifs inscrits par l'√©quipe adverse
    
    
    
    
    
    # CAS 2 : l'√©quipe √† domicile est l'adversaire de l'USDH ==> la fonction 'series_buts_marques' nous retourne les s√©ries de buts cons√©cutifs marqu√©s par l'USDH, donc encaiss√©s par l'√©quipe :
    
    else : 
        
        periodes_encaissement = series_buts_marques(data = data , journee = journee)  # le dictionnaire des scores associ√©s √† chaque p√©riode de buts successifs inscrits par l'√©quipe adverse
        
        
        # On inverse la position des buts du tuple du score, car les buts marqu√©s sont en 1√®re position avec la fonction 'series_buts_marques' : 
    
        periodes_encaissement = dict([(cle , (valeur[1] , valeur[0])) for cle , valeur in periodes_encaissement.items()])
    
    
    
    
    
    # 3) Recherche de la plus grosse p√©riode, sachant que seul le 2√®me chiffre du tuple nous int√©resse (le 1er vaut toujours 0...) :
    
    # CAS 1 : il n'a a AUCUNE s√©rie de buts encaiss√©s successvement dans scorer : 
    
    if periodes_encaissement == {} :
    
        return ((0 , 0) , (0 , 0))
    
    
    
    
    
    # CAS 2 : il n'a qu'UNE SEULE s√©rie de buts encaiss√©s successivement sans scorer : 
    
    elif len(periodes_encaissement) == 1 :
        
        
        return periodes_encaissement[list(periodes_encaissement.keys())[0]] , list(periodes_encaissement.keys())[0] 
    
    
    
    
    
    # CAS 3 : il y a PLUSIEURS s√©ries de buts encaiss√©s successivement sans scorer : 
    
    elif len(periodes_encaissement) > 1 :
    
        k = 0


        # On initialise la plus grosse p√©riode √† 0 :

        plus_grosse_periode = periodes_encaissement[list(periodes_encaissement.keys())[0]]



        # Pour chaque p√©riode : 

        for periode in list(periodes_encaissement.keys())[1:] :


            periode = periodes_encaissement[periode]    # la p√©riode consid√©r√©e
            buts_successifs_encaisses_periode = periode[1]  # le nombre de buts successifs encaiss√©s lors de la p√©riode consid√©r√©e

            buts_successifs_encaisses_plus_grosse_periode = plus_grosse_periode[1]  # le nombre de buts successifs encaiss√©s lors de la PLUS GROSSE p√©riode consid√©r√©e √† cet instant





            # SI le nombre de buts successifs encaiss√©s lors de la p√©riode consid√©r√©e surpasse celui de la plus grosse p√©riode actuelle :

            if buts_successifs_encaisses_periode >= buts_successifs_encaisses_plus_grosse_periode :

                plus_grosse_periode = periode  # la p√©riode consid√©r√©e devient la plus grosse p√©riode

                k += 1




        # GESTION DU CAS OU LA 1√®re PERIODE DU DICTIONNAIRE EST LA PLUS GROSSE ==> k ne peut pas rester √† -1, il doit √™tre incr√©ment√© d'une unit√© :

        if k == -1 : 

            k += 1 # le rang de la plus grosse p√©riode est incr√©ment√© d'1 unit√©







        # On retourne le tuple du score sur cette p√©riode AINSI QUE le tuple des dates de d√©but et de fin de cette p√©riode :

        return plus_grosse_periode , list(periodes_encaissement.keys())[k]
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
## Fonction permettant de retourner la plus grosse s√©rie de buts encaiss√©s successivement SANS INSCRIRE LE MOINDRE BUT, de l'√©quipe √† l'ext√©rieur :
    
def plus_grosse_serie_buts_encaisses_exterieur(data , journee = "J5") :
    
    """Retourne les dates de d√©but / fin ainsi que la dur√©e de la plus grosse p√©riode de disette offensive de l'√©quipe jouant 
       √† l'ext√©rieur lors de la rencontre renseign√©e en argument."""
    
    
    
    # 0) On commence par filtrer les donn√©es : 
    
    data_filtre = data[data["journ√©e"] == journee]
    
    
    
    
    
    # 1) On r√©cup√®re √† pr√©sent le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = dico_rencontres_USDH[journee][1]
    
    
    
    
    
    
    
    
     # 2) On r√©cup√®re la liste des p√©riodes de buts encaiss√©s successivement sans scorer, de l'√©quipe √† l'ext√©rieur :
    
    
    # CAS 1 : l'√©quipe √† l'ext√©rieur est l'USDH ==> la fonction 'series_buts_encaisses' nous retourne les s√©ries de buts cons√©cutifs encaiss√©s par l'USDH :
    
    if equipe_exterieur == "USDH" : 
        
        periodes_encaissement = series_buts_encaisses(data = data , journee = journee)  # le dictionnaire des scores associ√©s √† chaque p√©riode de buts successifs inscrits par l'√©quipe adverse
    
    
    
    
    
    # CAS 2 : l'√©quipe √† l'ext√©rieur est l'adversaire de l'USDH ==> la fonction 'series_buts_marques' nous retourne les s√©ries de buts cons√©cutifs marqu√©s par l'USDH, donc encaiss√©s par l'√©quipe :
    
    else : 
        
        periodes_encaissement = series_buts_marques(data = data , journee = journee)  # le dictionnaire des scores associ√©s √† chaque p√©riode de buts successifs inscrits par l'√©quipe adverse
    
    
        # On inverse la position des buts du tuple du score, car les buts marqu√©s sont en 1√®re position avec la fonction 'series_buts_marques' : 
    
        periodes_encaissement = dict([(cle , (valeur[1] , valeur[0])) for cle , valeur in periodes_encaissement.items()])
    
    
    
    
    
    
    
    # 3) Recherche de la plus grosse p√©riode, sachant que seul le 2√®me chiffre du tuple nous int√©resse (le 1er vaut toujours 0...) :
    
    # CAS 1 : il n'a a AUCUNE s√©rie de buts encaiss√©s successvement dans scorer : 
    
    if periodes_encaissement == {} :
        
        return ((0 , 0) , (0 , 0))
    
    
    
    
    
    # CAS 2 : il n'a qu'UNE SEULE s√©rie de buts encaiss√©s successivement sans scorer : 
    
    elif len(periodes_encaissement) == 1 :
        
        
        return periodes_encaissement[list(periodes_encaissement.keys())[0]] , list(periodes_encaissement.keys())[0] 
    
    
    
    
    
    # CAS 3 : il y a PLUSIEURS s√©ries de buts encaiss√©s successivement sans scorer : 
    
    elif len(periodes_encaissement) > 1 :
        
        k = 0


        # On initialise la plus grosse p√©riode √† 0 :

        plus_grosse_periode = periodes_encaissement[list(periodes_encaissement.keys())[0]]



        # Pour chaque p√©riode : 

        for periode in list(periodes_encaissement.keys())[1:] :


            periode = periodes_encaissement[periode]    # la p√©riode consid√©r√©e
            buts_successifs_encaisses_periode = periode[1]  # le nombre de buts successifs encaiss√©s lors de la p√©riode consid√©r√©e

            buts_successifs_encaisses_plus_grosse_periode = plus_grosse_periode[1]  # le nombre de buts successifs encaiss√©s lors de la PLUS GROSSE p√©riode consid√©r√©e √† cet instant



            # SI le nombre de buts successifs encaiss√©s lors de la p√©riode consid√©r√©e surpasse celui de la plus grosse p√©riode actuelle :

            if buts_successifs_encaisses_periode >= buts_successifs_encaisses_plus_grosse_periode :

                plus_grosse_periode = periode  # la p√©riode consid√©r√©e devient la plus grosse p√©riode


                k += 1   # le rang de la plus grosse p√©riode est incr√©ment√© d'1 unit√©





        # GESTION DU CAS OU LA 1√®re PERIODE DU DICTIONNAIRE EST LA PLUS GROSSE ==> k ne peut pas rester √† -1, il doit √™tre incr√©ment√© d'une unit√© :

        if k == -1 : 

            k += 1 # le rang de la plus grosse p√©riode est incr√©ment√© d'1 unit√©







        # On retourne le tuple du score sur cette p√©riode AINSI QUE le tuple des dates de d√©but et de fin de cette p√©riode :

        return plus_grosse_periode , list(periodes_encaissement.keys())[k] 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
## Fonction r√©capitulative permettant de retourner la plus grosse s√©rie de buts encaiss√©s successivement SANS INSCRIRE LE MOINDRE BUT, de l'√©quipe renseign√©e en argument (domicile ou ext√©rieur) :
    
def plus_grosse_serie_buts_encaisses(data , journee = "J5" , equipe = "domicile") :
    
    """Retourne les dates de d√©but / fin ainsi que la dur√©e de la plus grosse p√©riode de disette offensive de l'√©quipe renseign√©e 
       en argument, lors de la rencontre renseign√©e en argument."""
    
    
    
    
     # SI je souhaite r√©cup√©rer le nbr de p√©riodes en sup√©riorit√© num√©rique de l'√©quipe jouant √† domicile ==> j'utilise la fonction 'nbr_periodes_superiorite_domicile'
    
    if equipe in ["domicile" , "dom"] :
        
        
        return plus_grosse_serie_buts_encaisses_domicile(data = data , journee = journee)
    
    
    
    
    
    
    # SI je souhaite r√©cup√©rer le nbr de p√©riodes en sup√©riorit√© num√©rique de l'√©quipe jouant √† l'ext√©rieur ==> j'utilise la fonction 'nbr_periodes_superiorite_exterieur'
    
    elif equipe in ["ext√©rieur" , "ext"] :
        
        
        return plus_grosse_serie_buts_encaisses_exterieur(data = data , journee = journee)
    
    
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
     
        
        
        
        
## Fonction permettant de conna√Ætre la dynamique (= nbr de buts marqu√©s / encaiss√©s) de jeu de l'√©quipe √† DOMICILE lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_domicile(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5") :
    
    """Retourne le diff√©rentiel des buts marqu√©s / encaiss√©s par l'√©quipe jouant √† domicile sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    # On commence par r√©cup√©rer le nom de l'√©quipe jouant √† domicile / ext√©rieur lors de cette rencontre : 
    
    equipe_domicile = list(data[data["journ√©e"] == journee]["domicile"].unique())
    equipe_domicile = equipe_domicile[0]
    
    equipe_exterieur = list(data[data["journ√©e"] == journee]["ext√©rieur"].unique())
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["temps"] <= date) & (data["temps"] >= date-x_dernieres_minutes)]
    
    
    
    
    
    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'√©quipe √† domicile lors de cette p√©riode du match : 
    
    buts_domicile = len(data_filtre[(data_filtre["√©quipe"] == equipe_domicile) & (data_filtre["action"].isin(["but" , "but 7m"]))])
    buts_exterieur = len(data_filtre[(data_filtre["√©quipe"] == equipe_exterieur) & (data_filtre["action"].isin(["but" , "but 7m"]))])
    
    
    differentiel = buts_domicile - buts_exterieur     # en faveur de l'√©quipe √† domicile
        
    
    
    
    
    
    
    return differentiel
























## Fonction permettant de conna√Ætre la dynamique (= nbr de buts marqu√©s / encaiss√©s) de jeu de l'√©quipe √† L'EXTERIEUR lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_exterieur(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5") :
    
    """Retourne le diff√©rentiel des buts marqu√©s / encaiss√©s par l'√©quipe jouant √† l'ext√©rieur sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    # On commence par r√©cup√©rer le nom de l'√©quipe jouant √† domicile / ext√©rieur lors de cette rencontre : 
    
    equipe_domicile = list(data[data["journ√©e"] == journee]["domicile"].unique())
    equipe_domicile = equipe_domicile[0]
    
    equipe_exterieur = list(data[data["journ√©e"] == journee]["ext√©rieur"].unique())
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["temps"] <= date) & (data["temps"] >= date-x_dernieres_minutes)]
    
    
    
    
    
    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'√©quipe √† l'ext√©rieur lors de cette p√©riode du match : 
    
    buts_domicile = len(data_filtre[(data_filtre["√©quipe"] == equipe_domicile) & (data_filtre["action"].isin(["but" , "but 7m"]))])
    buts_exterieur = len(data_filtre[(data_filtre["√©quipe"] == equipe_exterieur) & (data_filtre["action"].isin(["but" , "but 7m"]))])
    
    
    differentiel = buts_exterieur - buts_domicile     # en faveur de l'√©quipe √† l'ext√©rieur
        
    
    
    
    
    
    
    return differentiel






















## Fonction r√©capitulative permettant de conna√Ætre la dynamique (= nbr de buts marqu√©s / encaiss√©s) de jeu de l'√©quipe renseign√©e lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5" , equipe = "domicile") :
    
    """Retourne le diff√©rentiel des buts marqu√©s / encaiss√©s par l'√©quipe renseign√©e sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    
    # SI je souhaite calculer le diff√©rentiel pour l'√©quipe √† domicile : 
    
    if equipe in ["domicile" , "dom"] : 
        
        return dynamique_domicile(data = data , date = date , x_dernieres_minutes = x_dernieres_minutes  , journee = journee)
    
    
    
    
     # SI je souhaite calculer le diff√©rentiel pour l'√©quipe √† l'ext√©rieur : 
        
    elif equipe in ["ext√©rieur" , "ext"] : 
        
        return dynamique_exterieur(data = data , date = date , x_dernieres_minutes = x_dernieres_minutes  , journee = journee)
        
        
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument {equipe} : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
## Fonction permettant de retourner le nombre de buts marqu√© par l'√©quipe √† DOMICILE lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_buts_marques_domicile(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5") :
    
    """Retourne le nbr de buts marqu√©s par l'√©quipe jouant √† domicile sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    # On commence par r√©cup√©rer le nom de l'√©quipe jouant √† domicile / ext√©rieur lors de cette rencontre : 
    
    equipe_domicile = list(data[data["journ√©e"] == journee]["domicile"].unique())
    equipe_domicile = equipe_domicile[0]
    
    equipe_exterieur = list(data[data["journ√©e"] == journee]["ext√©rieur"].unique())
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["temps"] <= date) & (data["temps"] >= date-x_dernieres_minutes)]
    
    
    
    
    
    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'√©quipe √† domicile lors de cette p√©riode du match : 
    
    buts_domicile = len(data_filtre[(data_filtre["√©quipe"] == equipe_domicile) & (data_filtre["action"].isin(["but" , "but 7m"]))])

    
    
    
    
    return buts_domicile






















## Fonction permettant de retourner le nombre de buts marqu√© par l'√©quipe √† L'EXTERIEUR lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_buts_marques_exterieur(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5") :
    
    """Retourne le nbr de buts marqu√©s par l'√©quipe jouant √† l'ext√©rieur sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    # On commence par r√©cup√©rer le nom de l'√©quipe jouant √† domicile / ext√©rieur lors de cette rencontre : 
    
    equipe_domicile = list(data[data["journ√©e"] == journee]["domicile"].unique())
    equipe_domicile = equipe_domicile[0]
    
    equipe_exterieur = list(data[data["journ√©e"] == journee]["ext√©rieur"].unique())
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    # On commence par filtrer les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["temps"] <= date) & (data["temps"] >= date-x_dernieres_minutes)]
    
    
    
    
    
    # On compte √† pr√©sent le nombre de buts marqu√©s et encaiss√©s par l'√©quipe √† domicile lors de cette p√©riode du match : 
    
    buts_exterieur = len(data_filtre[(data_filtre["√©quipe"] == equipe_exterieur) & (data_filtre["action"].isin(["but" , "but 7m"]))])
    
    
    
    
    
    return buts_exterieur























## Fonction r√©capitulative permettant de conna√Ætre le nbr de buts marqu√©s par l'√©quipe renseign√©e lors des x derni√®res minutes pr√©c√©dant la date t, lors de la journ√©e pr√©cis√©e :
    
def dynamique_buts_marques(data , date = 29 , x_dernieres_minutes = 5  , journee = "J5" , equipe = "domicile") :
    
    """Retourne le nbr de buts marqu√©s par l'√©quipe renseign√©e sur les x_dernieres_minutes pr√©c√©dant 
       la date renseign√©e, lors de la journ√©e de championnat voulue."""
    
    
    
    # SI je souhaite calculer le diff√©rentiel pour l'√©quipe √† domicile : 
    
    if equipe in ["domicile" , "dom"] : 
        
        return dynamique_buts_marques_domicile(data = data , date = date , x_dernieres_minutes = x_dernieres_minutes  , journee = journee)
    
    
    
    
     # SI je souhaite calculer le diff√©rentiel pour l'√©quipe √† l'ext√©rieur : 
        
    elif equipe in ["ext√©rieur" , "ext"] : 
        
        return dynamique_buts_marques_exterieur(data = data , date = date , x_dernieres_minutes = x_dernieres_minutes  , journee = journee)
        
        
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument {equipe} : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
  
        
## Fonction retournant un camembert PLOTLY du nombre de buts inscrits par joueur de l'√©quipe jouant √† domicile, lors d'un match bien pr√©cis :
    
def camembert_domicile_plotly(data , journee = "J5" , show_title = True , type_action = ["but" , "but 7m"] , 
                              showlegend = False) : 

    """Retourne un diagramme circulaire du type d'actions voulu, par joueur de l'√©quipe jouant √† domicile, lors de la rencontre 
       pr√©cis√©e."""
    
    
    
    # Filtrage des donn√©es qui nous int√©ressent :
    
    data_filtre = data[(data["journ√©e"] == journee) & data["action"].isin(type_action)]
    
    
    
    
    # R√©cup√©ration du nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = list(data_filtre["domicile"].unique()) 
    equipe_domicile = equipe_domicile[0]
    
    
    
    # Graphique : 
    
    fig = px.pie(values = data_filtre[data_filtre["√©quipe"] == equipe_domicile]["joueur"].value_counts() , 
                 names = data_filtre[data_filtre["√©quipe"] == equipe_domicile]["joueur"].value_counts(normalize = True).index , 
                 color_discrete_sequence = px.colors.sequential.RdBu , 
                 hole = 1/5)
    
    
    
    fig.update_traces(textposition = "inside" , 
                      textinfo = "percent+label")


    
    
    
    if show_title == True : 
        
        if len(type_action) == 2 : 
            
            if "but" in type_action : 
        
                fig.update_layout(title_text = f"R√©partition des buts de {equipe_domicile} marqu√©s par joueur, {journee}" , 
                                  showlegend = showlegend)
        
        
            else : 
                
                fig.update_layout(title_text = f"R√©partition des avertissements + 2min de {equipe_domicile} par joueur, {journee}" , 
                                  showlegend = showlegend)
        
        
        else : 
            
            fig.update_layout(title_text = f"R√©partition des {type_action[0]} de {equipe_domicile} marqu√©s par joueur, {journee}" , 
                              showlegend = showlegend)
            
            
            
    
    else : 
        
        fig.update_layout(showlegend = showlegend)
        
        
    
    
    
    
    
    
    return fig





















## Fonction retournant un camembert PLOTLY du nombre de buts inscrits par joueur de l'√©quipe jouant √† l'ext√©rieur, lors d'un match bien pr√©cis :
    
def camembert_exterieur_plotly(data , journee = "J5" , show_title = True , type_action = ["but" , "but 7m"] , 
                               showlegend = False) : 

    """Retourne un diagramme circulaire du type d'actions voulu, par joueur de l'√©quipe jouant √† l'ext√©rieur, lors de la rencontre 
       pr√©cis√©e."""
    
    
    
    # Filtrage des donn√©es qui nous int√©ressent :
    
    data_filtre = data[(data["journ√©e"] == journee) & data["action"].isin(type_action)]
    
    
    
    
    # R√©cup√©ration du nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = list(data_filtre["ext√©rieur"].unique()) 
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    # Graphique : 
    
    fig = px.pie(values = data_filtre[data_filtre["√©quipe"] == equipe_exterieur]["joueur"].value_counts() , 
                 names = data_filtre[data_filtre["√©quipe"] == equipe_exterieur]["joueur"].value_counts(normalize = True).index , 
                 color_discrete_sequence = px.colors.sequential.RdBu , 
                 hole = 1/5)
    
    
    
    fig.update_traces(textposition = "inside" , 
                      textinfo = "percent+label")


    
    
    
    if show_title == True : 
        
        if len(type_action) == 2 : 
            
            if "but" in type_action : 
        
                fig.update_layout(title_text = f"R√©partition des buts de {equipe_exterieur} marqu√©s par joueur, {journee}" , 
                                  showlegend = showlegend)
        
        
            else : 
                
                fig.update_layout(title_text = f"R√©partition des avertissements + 2min de {equipe_exterieur} par joueur, {journee}" , 
                                  showlegend = showlegend)
        
        
        else : 
            
            fig.update_layout(title_text = f"R√©partition des {type_action[0]} de {equipe_exterieur} marqu√©s par joueur, {journee}" , 
                              showlegend = showlegend)
            
            
            
            
    else : 
        
        fig.update_layout(showlegend = showlegend)
        
        
    
    
    
    
    
    
    return fig





















## Fonction r√©capitulative retournant un camembert PLOTLY du nombre de buts inscrits par joueur de l'√©quipe jouant √† domicile OU √† l'ext√©rieur (au choix), lors d'un match bien pr√©cis :
    
def camembert_plotly(data , journee = "J5" , show_title = True , type_action = ["but" , "but 7m"] , 
                     equipe = "domicile" , showlegend = False) : 

    """Retourne un diagramme circulaire du type d'actions voulu, par joueur de l'√©quipe renseign√©e, lors de la rencontre 
       pr√©cis√©e."""
    
    
    
    # CAS 1 : si je souhaite regarder l'√©quipe jouant √† domicile : 
    
    if equipe in ["domicile" , "dom"] : 
        
        return camembert_domicile_plotly(data = data , journee = journee , show_title = show_title , 
                                         type_action = type_action , showlegend = showlegend)
    
    
    
    
    
    # CAS 2 : si je souhaite regarder l'√©quipe jouant √† l'ext√©rieur : 
    
    if equipe in ["ext√©rieur" , "ext"] : 
        
        return camembert_exterieur_plotly(data = data , journee = journee , show_title = show_title , 
                                          type_action = type_action , showlegend = showlegend)
    
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        


        
        
        
## Fonction permettant de tracer le diagramme en barres souhait√© concernant les joueurs de l'√©quipe √† domicile, lors d'un match pr√©cis :
    
def diagramme_en_barres_domicile_plotly(data , journee = "J1" , type_action = ["but" , "but 7m"]) :
    
    """Retourne le diagramme en barres demand√© concernant les joueurs de l'√©quipe √† domicile lors de la rencontre renseign√©e."""
    
    
    
    # On r√©cup√®re le nom de l'√©quipe jouant √† domicile : 
    
    equipe_domicile = data[data["journ√©e"] == journee]["domicile"].unique()
    equipe_domicile = equipe_domicile[0]
    
    
    
    
    # On filtre les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["action"].isin(type_action)) & (data["√©quipe"] == equipe_domicile)]
    
    
    
    
    # On trace le diagramme en barre souhait√© :
    
    fig = px.bar(x = data_filtre["joueur"].value_counts().index , 
                 y = data_filtre["joueur"].value_counts() , 
                 color = data_filtre["joueur"].value_counts() , 
                 text = data_filtre["joueur"].value_counts())


    
    
    if type_action == ["but" , "but 7m"] : 
        
        yaxis_title = "buts"
        
        
        
    elif type_action == ["tir" , "but" , "but 7m"] : 
        
        yaxis_title = "tirs"
        
       
    
    else : 
        
        yaxis_title = type_action[0]
        
        
        
        
        
        
    fig.update_layout(xaxis_title = "joueur" , 
                      yaxis_title = yaxis_title , 
                      template = "plotly_dark" , 
                      title_text = f"R√©partition des {yaxis_title} de {equipe_domicile.upper()}, par joueur." , 
                      title_x = 0.5 ,
                      title_font = {"size" : 30 , 
                                    "family" : "serif"})


    fig.update_yaxes(range = [0 , data_filtre["joueur"].value_counts().max() + 1])


    
    fig.update_traces(textposition = "outside" , 
                      textfont = {"size" : 16 , 
                                  "color" : "red"})
    
    
    
    fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
    
    
    
    
    
    return fig





















## Fonction permettant de tracer le diagramme en barres souhait√© concernant les joueurs de l'√©quipe √† l'ext√©rieur, lors d'un match pr√©cis :
    
def diagramme_en_barres_exterieur_plotly(data , journee = "J1" , type_action = ["but" , "but 7m"]) :
    
    """Retourne le diagramme en barres demand√© concernant les joueurs de l'√©quipe √† l'ext√©rieur lors de la rencontre renseign√©e."""
    
    
    
    # On r√©cup√®re le nom de l'√©quipe jouant √† l'ext√©rieur : 
    
    equipe_exterieur = data[data["journ√©e"] == journee]["ext√©rieur"].unique()
    equipe_exterieur = equipe_exterieur[0]
    
    
    
    
    # On filtre les donn√©es : 
    
    data_filtre = data[(data["journ√©e"] == journee) & (data["action"].isin(type_action)) & (data["√©quipe"] == equipe_exterieur)]
    
    
    
    
    # On trace le diagramme en barre souhait√© :
    
    fig = px.bar(x = data_filtre["joueur"].value_counts().index , 
                 y = data_filtre["joueur"].value_counts() , 
                 color = data_filtre["joueur"].value_counts() , 
                 text = data_filtre["joueur"].value_counts())


    
    
    if type_action == ["but" , "but 7m"] : 
        
        yaxis_title = "buts"
        
        
        
    elif type_action == ["tir" , "but" , "but 7m"] : 
        
        yaxis_title = "tirs"
        
       
    
    else : 
        
        yaxis_title = type_action[0]
        
        
        
        
        
        
    fig.update_layout(xaxis_title = "joueur" , 
                      yaxis_title = yaxis_title , 
                      template = "plotly_dark" , 
                      title_text = f"R√©partition des {yaxis_title} de {equipe_exterieur.upper()}, par joueur." , 
                      title_x = 0.5 ,
                      title_font = {"size" : 30 , 
                                    "family" : "serif"})


    fig.update_yaxes(range = [0 , data_filtre["joueur"].value_counts().max() + 1])


    
    fig.update_traces(textposition = "outside" , 
                      textfont = {"size" : 16 , 
                                  "color" : "red"})
    
    
    
    fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
     
    
    
    
    
    return fig




















## Fonction r√©capitulative permettant de tracer le diagramme en barres souhait√© concernant les joueurs de l'√©quipe renseign√©e (domicile OU ext√©rieur, au choix), lors d'un match pr√©cis :
    
def diagramme_en_barres_plotly(data , journee = "J1" , type_action = ["but" , "but 7m"] , equipe = "domicile") :
    
    """Retourne le diagramme en barres demand√© concernant les joueurs de l'√©quipe voulue (domicile ou ext√©rieur, au choix) 
       lors de la rencontre renseign√©e."""
    
    
    
    if equipe in ["domicile" , "dom"] : 
        
        return diagramme_en_barres_domicile_plotly(data = data , journee = journee , type_action = type_action)
        
        
        
        
    elif equipe in ["ext√©rieur" , "ext"] : 
        
        return diagramme_en_barres_exterieur_plotly(data = data , journee = journee , type_action = type_action)
    
        
        
        
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'domicile' , 'dom' , 'ext√©rieur' ou 'ext'.")  
        
        
        
        
        
        
#####################################################################################################################
#####################################################################################################################

###                                     FONCTIONS DE BILAN DE SAISON DE L'USDH :
    
#####################################################################################################################
#####################################################################################################################

## FONCTIONS D'ANALYSE :
    
#####################################################################################################################


## Fonction permettant de conna√Ætre le nombre d'actions du type renseign√© r√©alis√©es par l'USDH OU par ses adversaires (au choix) depuis le d√©but de la saison :
    
def nbr_type_action_saison(data , type_action = "buts marqu√©s" , format_retour = "total" , equipe = "USDH" , periode = "match") :
    
    
    """Retourne au choix le nombre d'actions du type renseign√© r√©alis√©es par l'USDH depuis le d√©but de la saison."""
    
    
    
    if equipe == "USDH" : 
        
        
        if periode == "match" : 
            
    
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")

        
        
        
        
        
        
        
        elif periode == "M1" : 
            
            
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")
 
            
            
            
         
        
        elif periode == "M2" : 
            
            
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")
 
            
            
            
            
            
            
            
            

        
    
    
    elif equipe == "adversaire" : 
        
    
        if periode == "match" : 
            
    
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")

        
        
        
        
        
        
        
        elif periode == "M1" : 
            
            
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] <= 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] <= 30) & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")
 
            
            
            
         
        
        elif periode == "M2" : 
            
            
            if type_action == "buts marqu√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "buts encaiss√©s" : 

                data_filtre = data[(data["√©quipe"] == "USDH") & (data["temps"] > 30) & (data["action"].isin(["but" , "but 7m"]))]




            elif type_action == "tirs tent√©s" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"]))]




            elif type_action == "cartons jaunes" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"] == "avertissement")]  




            elif type_action == "exclusions" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"] == "2min")]




            elif type_action == "arr√™ts" : 

                data_filtre = data[(data["√©quipe"] != "USDH") & (data["temps"] > 30) & (data["action"].isin(["arr√™t" , "arr√™t 7m"]))]




            else : 

                raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")
 
            
        
        
    
    
    
    
    # SI un souhaite le TOTAL des buts : 
    
    if format_retour == "total" :
        
        nbr_total_buts = len(data_filtre)
        
        return nbr_total_buts
    
    
    
    
    elif format_retour == "par match" : 
        
        nbr_buts_par_match = len(data_filtre) / len(data["journ√©e"].unique())
        
        return nbr_buts_par_match
    
    
    
    else : 
        
        raise ValueError("param√®tre attendu pour l'argument 'format_retour' : 'total' ou 'par match'.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        




## Fonction permettant de retourner la SERIES du nombre d'actions du type renseign√© effectu√©es par l'USDH OU par ses adversaires (au choix) lors de chaque match jou√© depuis le d√©but de la saison :
    
def S_nbr_type_action_saison(data , type_action = "buts marqu√©s" , equipe = "USDH" , periode = "match") :
    
    
    """Retourne la Series du nombre d'actions du type renseign√© r√©alis√©es par l'√©quipe voulue lors de chacun des matchs qu'elle 
       a jou√©e depuis le d√©but de la saison."""
    
    
    
        
        
    if periode == "match" : 

        filtre_periode = (data["temps"] >= 0) & (data["temps"] <= 60)



    elif periode == "M1" : 

        filtre_periode = data["temps"] <= 30




    elif periode == "M2" : 

        filtre_periode = data["temps"] > 30




    else : 

        raise ValueError("param√®tre attendu pour l'argument 'periode' : 'match' , 'M1' ou 'M2'.")
        
        
        
        
        
        
    
    if equipe == "USDH" : 
            
            
    
        if type_action == "buts marqu√©s" : 

            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"].isin(["but" , "but 7m"])




        elif type_action == "buts encaiss√©s" : 

            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"].isin(["but" , "but 7m"])




        elif type_action == "tirs tent√©s" : 

            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"])



        elif type_action == "cartons jaunes" : 


            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"] == "avertissement"




        elif type_action == "exclusions" : 

            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"] == "2min"

            


        elif type_action == "arr√™ts" : 

            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"].isin(["arr√™t" , "arr√™t 7m"])


            

        else : 

            raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")




        L_nbr_actions = []


        # Pour chaque journ√©e de championnat disput√©e par cette √©quipe :

        for journee in dico_rencontres_USDH.keys() :


            data_filtre = data[filtre_periode & (data["journ√©e"] == journee) & (filtre_equipe) & (filtre_action)]

            nbr_actions_journee = len(data_filtre)

            L_nbr_actions.append(nbr_actions_journee)



        return pd.Series(L_nbr_actions)
        
        
        
        
        

        
        
    
    
    elif equipe == "adversaire" : 
        
    
        if type_action == "buts marqu√©s" : 

            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"].isin(["but" , "but 7m"])




        elif type_action == "buts encaiss√©s" : 

            filtre_equipe = data["√©quipe"] == "USDH"
            filtre_action = data["action"].isin(["but" , "but 7m"])




        elif type_action == "tirs tent√©s" : 

            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"].isin(["tir" , "tirs 7m" , "but" , "but 7m"])



        elif type_action == "cartons jaunes" : 


            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"] == "avertissement"




        elif type_action == "exclusions" : 

            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"] == "2min"

            


        elif type_action == "arr√™ts" : 

            filtre_equipe = data["√©quipe"] != "USDH"
            filtre_action = data["action"].isin(["arr√™t" , "arr√™t 7m"])


            

        else : 

            raise ValueError("param√®tre attendu pour l'argument 'type_action' : 'buts marqu√©s' , 'buts encaiss√©s' , 'tirs tent√©s' , 'cartons jaunes' , 'exclusions' ou 'arr√™ts'.")




        L_nbr_actions = []


        # Pour chaque journ√©e de championnat disput√©e par cette √©quipe :

        for journee in dico_rencontres_USDH.keys() :


            data_filtre = data[filtre_periode & (data["journ√©e"] == journee) & (filtre_equipe) & (filtre_action)]

            nbr_actions_journee = len(data_filtre)

            L_nbr_actions.append(nbr_actions_journee)



        return pd.Series(L_nbr_actions)
    
    
    
    
    
    
    
    else : 
        
        
        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'USDH' ou 'adversaire'.")
        
























## Fonction permettant de retourner la SERIES des temps pass√©s en t√™te / derri√®re / √† √©galit√© (au choix) par l'√©quipe renseign√©e lors de chaque match jou√© depuis le d√©but de la saison :

def S_durees_situation_score_saison(data , equipe = "USDH" , situation = "m√®ne") :
    
    
    """Retourne la Series des temps pass√©s dans la situation au score voulue par l'√©quipe renseign√©e, lors de chaque match de 
       championnat disput√© depuis le d√©but de la saison."""
    
    
    L_durees = []
    
    
    # Pour chaque journ√©e de championnat disput√©e :
    
    for journee in dico_rencontres_USDH.keys() :
        
        
        # On r√©cup√®re le dictionnaire des temps pass√©s par l'USDH dans chaque situation au score lors de ce match :
        
        dico_durees_situations_journee = duree_situation_score(data = data , journee = journee)[2]  # le 3√®me dictionnaire retourn√© par cette fonction contient les dur√©es TOTALES pss√©es dans chacune des 3 situations au score
        
        
        
        if situation == "m√®ne" : 
            
            
            if equipe == "USDH" : # ==> le temps pass√© par l'USDH √† mener au score est accessible via la cl√© 'USDH m√®ne' du dictionnaire ci-dessus
                

                duree_equipe_mene = dico_durees_situations_journee["USDH m√®ne"]
                
                
                L_durees.append(duree_equipe_mene)

                
                
                
                
            elif equipe == "adversaire" : # ==> le temps pass√© par l'adversaire de l'USDH √† mener au score est accessible via la cl√© 'adversaire m√®ne' du dictionnaire ci-dessus

                
                duree_equipe_mene = dico_durees_situations_journee["adversaire m√®ne"]

            
                L_durees.append(duree_equipe_mene)
                
                
                
                
            else : 
                
                raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'USDH' ou 'adversaire'.")
                
                
                
                
            
            
            
            
            
        elif situation == "est men√©" : 
            
            
            if equipe == "USDH" : # ==> le temps pass√© par l'USDH √† √™tre men√© au score est accessible via la cl√© 'adversaire m√®ne' du dictionnaire ci-dessus
                

                duree_equipe_est_menee = dico_durees_situations_journee["adversaire m√®ne"]
                
                
                L_durees.append(duree_equipe_est_menee)

                
                
                
                
            elif equipe == "adversaire" : # ==> le temps pass√© par l'adversaire de l'USDH √† √™tre men√© au score est accessible via la cl√© 'adversaire m√®ne' du dictionnaire ci-dessus

                
                duree_equipe_est_menee = dico_durees_situations_journee["USDH m√®ne"]

            
                L_durees.append(duree_equipe_est_menee)
                
                
                
                
            else : 
                
                raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'USDH' ou 'adversaire'.")
                
                
                
                
                
            
        
        elif situation == "√©galit√©" :
            
            
            duree_equipe_egalite = dico_durees_situations_journee["√©galit√©"]

            
            L_durees.append(duree_equipe_egalite)
                
                
                
          
        
        
        else : 
            
            raise ValueError("param√®tre attendu pour l'argument 'situation' : 'm√®ne' , 'est men√©' ou '√©galit√©'.")
    
    
   


    return pd.Series(L_durees)
























## Fonction permettant de retourner la SERIES des temps pass√©s en sup√©riorit√© / inf√©riorit√© / √† √©galit√© num√©rique (au choix) par l'√©quipe renseign√©e lors de chaque match jou√© depuis le d√©but de la saison :
    
def S_durees_situation_numerique_saison(data , equipe = "USDH" , situation = "inf√©riorit√© num√©rique") :
    
    
    """Retourne la Series des temps pass√©s dans la situation num√©rique voulue par l'√©quipe renseign√©e, lors de chaque match de 
       championnat disput√© depuis le d√©but de la saison."""
    
    
    L_durees = []
    
    
    # Pour chaque journ√©e de championnat disput√©e :
    
    
    if equipe in ["USDH" , "adversaire"] :
    
        for journee in dico_rencontres_USDH.keys() :



            if equipe == "USDH" : 

                duree_equipe_en_sup_journee = duree_passee_situation_numerique_equipe(data = data , journee = journee , 
                                                                                      equipe = equipe , format_duree = 'float' , 
                                                                                      situation = situation)


                


                





            elif equipe == "adversaire" :

                # On r√©cup√®re l'adversaire de l'USDH ce jour-l√† : 

                adv = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe not in [" " , "USDH"]]
                adv = adv[0]



                duree_equipe_en_sup_journee = duree_passee_situation_numerique_equipe(data = data , journee = journee , 
                                                                                      equipe = adv , format_duree = 'float' , 
                                                                                      situation = situation)




            L_durees.append(duree_equipe_en_sup_journee)


        
        
        return pd.Series(L_durees)

                
                
                
                
            
       
                
    else : 

        raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'USDH' ou 'adversaire'.")






















## Fonction permettant de retourner la SERIES des nbr de buts marqu√©s / encaiss√©s / diff√©rentiels (au choix) en sup√©riorit√© / inf√©riorit√© / √† √©galit√© num√©rique (au choix) par l'√©quipe renseign√©e lors de chaque match jou√© depuis le d√©but de la saison :
    
def S_bilan_situation_numerique_saison(data , equipe = "USDH" , situation = "inf√©riorit√© num√©rique" , type_bilan = "buts marqu√©s") :
    
    
    """Retourne la Series des nbr de buts marqu√©s / encaiss√©s / diff√©rentiels (au choix) en sup√©riorit√© / inf√©riorit√© / √† √©galit√© 
       num√©rique (au choix) par l'√©quipe renseign√©e lors de chaque match jou√© depuis le d√©but de la saison."""
    
    
    
    L_bilans_equipe = []
    
    
    if type_bilan in ["buts marqu√©s" , "buts encaiss√©s" , "diff√©rentiel de buts"] :
        
        
        if situation in ["inf√©riorit√© num√©rique" , "sup√©riorit√© num√©rique" , "√©galit√© num√©rique"] : 
            
            
            if equipe in ["USDH" , "adversaire"] :
                
                
                
                # Pour chaque journ√©e de championnat d√©j√† jou√©e par cette √©quipe :
                
                for journee in dico_rencontres_USDH.keys() :
                
                
                    if equipe == "USDH" :


                        # On r√©cup√®re le dictionnaire contenant, pour chaque p√©riode pass√©e dans la situation num√©rique renseign√©e par l'USDH LORS DE CE MATCH, le bilan comptable de l'USDH :

                        dico_bilans_equipe_situation_journee = bilan_situation_numerique_equipe(data = data , journee = journee , 
                                                                                                equipe = "USDH" , 
                                                                                                situation = situation)
                        
                        
                        
                        
                        # On extrait de ce dictionnaire la liste des buts marqu√©s / buts encaiss√©s / diff√©rentiels de buts (au choix) pour chaque p√©riode que l'USDH a jou√© dans ce type de situation num√©rique LORS DE CE MATCH : 
                    
                        L_bilans_equipe_situation_journee = [dico_bilans_equipe_situation_journee[periode][f"{type_bilan} USDH"] for periode in dico_bilans_equipe_situation_journee.keys()]

        
        
                        




                    else :    # equipe == "adversaire" : 


                        # on r√©cup√®re le nom de l'adversaire de l'USDH lors de cette rencontre :

                        adversaire = [equipe for equipe in data[data["journ√©e"] == journee]["√©quipe"].unique() if equipe not in [" " , "USDH"]]
                        adversaire = adversaire[0]



                        # On r√©cup√®re le dictionnaire contenant, pour chaque p√©riode pass√©e dans la situation num√©rique renseign√©e par l'adversaire de l'USDH LORS DE CE MATCH, le bilan comptable de cet adversaire :

                        dico_bilans_equipe_situation_journee = bilan_situation_numerique_equipe(data = data , journee = journee , 
                                                                                                equipe = adversaire , 
                                                                                                situation = situation)

                        
                        
                    
                        # On extrait de ce dictionnaire la liste des buts marqu√©s / buts encaiss√©s / diff√©rentiels de buts (au choix) pour chaque p√©riode que l'adversaire de l'USDH a jou√© dans ce type de situation num√©rique LORS DE CE MATCH : 
                    
                        L_bilans_equipe_situation_journee = [dico_bilans_equipe_situation_journee[periode][f"{type_bilan} {adversaire}"] for periode in dico_bilans_equipe_situation_journee.keys()]

                
                
                
                
                
                    # On r√©cup√®re le bilan (buts marqu√©s / encaiss√©s / diff√©rentiel de buts, au choix) TOTAL de l'√©quipe voulue dans ce type de situation num√©rique LORS DE CE MATCH, en sommant les √©l√©ments de la liste ci-dessus :
        
                    bilan_equipe_situation_journee = sum(L_bilans_equipe_situation_journee)




                    # On ajoute le bilan de l'√©quipe LORS DE CETTE JOURNEE √† la liste des bilans de chaqu journ√©e d√©j√† disput√©e par l'√©quipe :

                    L_bilans_equipe.append(bilan_equipe_situation_journee)
                
                
                
                
                
                # On retourne la Series des bilans de cette √©quipe lors de chaque match d√©j√† disput√© :
                
                return pd.Series(L_bilans_equipe)
            
            
            
                
                
                
            else : 
                
                raise ValueError("param√®tre attendu pour l'argument 'equipe' : 'USDH' ou 'adversaire'.")
                
              
            
            
            
            
            
                
        else : 
                
                raise ValueError("param√®tre attendu pour l'argument 'situation' : 'inf√©riorit√© num√©rique', 'sup√©riorit√© num√©rique' ou '√©galit√© num√©rique'.")
                
      
    
    
    
    
    
    else : 
                
        raise ValueError("param√®tre attendu pour l'argument 'type_bilan' : 'buts marqu√©s', 'buts encaiss√©s' ou 'diff√©rentiel de buts'.")
                
                








#####################################################################################################################

## FONCTIONS GRAPHIQUES : 

#####################################################################################################################


## Fonction permettant de retourner un double histogramme vertical du type d'action renseign√© de l'USDH et de ses adversaires par tranche de 5 minutes, depuis le d√©but de la saison :
    
def double_vertical_histogram_type_action_saison(fig , ax , data , type_action = ["but" , "but 7m"] , show_title = False , 
                                                 nbr_tranches = 12 , text_color = "black" , unite = "total") : 
    
    
    
    from itertools import permutations
    
    
    
    # SI l'utilisateur souhaite √©crire les textes (graduations, noms des axes, titre, ...) en BLANC : 
    
    if text_color == "white" : 
        
        
        # Alors la couleur de fond du graphique st NOIRE :
        
        fig.set_facecolor("#0E1117")
        ax.set_facecolor("#0E1117")
    
    
    
    
    
    
    # Filtrage des donn√©es concern√©es : 

    data_filtre = data[data["action"].isin(type_action)]
        
        
        

        
    if nbr_tranches in [3 , 4 , 5 , 6 , 10 , 12, 15, 20, 30, 60] :
        
        
        if nbr_tranches != 12 : 
            
            data_filtre["intervalle de temps"] = pd.cut(df["temps"] , bins = np.arange(0 , 61 , 60//nbr_tranches) , 
                                                        include_lowest = True)
            
            


        # diagramme en barres verticales de l'USDH (vers le haut ==> width >= 0) :
        
        # SI je souhaite le diagramme en barres du TOTAL des actions de ce type, depuis le d√©but de saison : 
        
        if unite == "total" :
            
            S_height_USDH = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index()
            S_height_adv = (-1)*data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index()
                
            
            
            
        elif unite == "moyenne / match" :
            
            S_height_USDH = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() / len(dico_rencontres_USDH)
            S_height_adv = (-1)*data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index() / len(dico_rencontres_USDH)
            
            
            
        else : 
            
            raise ValueError("param√®tre attendu pour l'argument 'unite' : 'total' ou 'moyenne / match'.")
            
            
        
        
        
        
        # Choix du label √† afficher : 
            

        if (tuple(type_action) in list(permutations(["but" , "but 7m"]))) or ((tuple(type_action) in list(permutations(["but" , "but 7m" , " "]))) or ((tuple(type_action) in list(permutations(["but" , "but 7m" , "tir" , "tir 7m"]))) or ((tuple(type_action) in list(permutations(["2min" , "avertissement"]))) or ((type_action == ["but"]) or ((type_action == ["but 7m"]) or ((type_action == ["tir"]) or ((type_action == ["avertissement"]) or ((type_action == ["2min"]))))))))) : 
            
            
            if tuple(type_action) in permutations(["but" , "but 7m"]) : 
                
                label_USDH = "buts marqu√©s USDH"
                label_adv = "buts encaiss√©s USDH"
                
                
            
            elif tuple(type_action) in permutations(["but" , "but 7m" , "tir" , "tir 7m"]) : 
                
                label_USDH = "tirs tent√©s USDH"
                label_adv = "tirs subbis USDH"
                
                
                
            elif tuple(type_action) in permutations(["2min" , "avertissement"]) : 
                
                label_USDH = "punitions re√ßues USDH"
                label_adv = "punitions re√ßues adversaires"
                
                
                
            elif type_action == ["but"] : 
                
                label_USDH = "buts marqu√©s dans le jeu USDH"
                label_adv = "buts encaiss√©s dans le jeu USDH"
                
                
                
            elif type_action == ["but 7m"] : 
                
                label_USDH = "buts marqu√©s 7m USDH"
                label_adv = "buts encaiss√©s 7m USDH"
                
                
                
            elif type_action == ["tir"] : 
                
                label_USDH = "tirs tent√©s 7m USDH"
                label_adv = "tirs subbis 7m USDH"
                
                
                
            elif type_action == ["avertissement"] : 
                
                label_USDH = "avertissements re√ßus USDH"
                label_adv = "avertissements re√ßus adversaires"
                
                
                
            elif type_action == ["2min"] : 
                
                label_USDH = "2min re√ßus USDH"
                label_adv = "2min re√ßus adversaires"
            
            
            
        

            

            ax.bar(x = range(1, nbr_tranches + 1) ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
                   height = S_height_USDH , 
                   align = 'center' , 
                   color = '#71E014' , 
                   label = label_USDH)
    
    
    
            # Idem pour son adversaire (vers le bas): 
    
            ax.bar(x = range(1, nbr_tranches + 1) , 
                   height = S_height_adv , 
                   align = 'center' , 
                   color = "#FF0000" , 
                   label = label_adv)
            
            
        
        
        
        else : 
            
            
            raise ValueError(f"Erreur : mauvais param√®tre renseign√© pour l'argument type_action' : {tuple(type_action)} mauvais !")







        # 3) Personnalisation : 

        ax.spines["top"].set_color(None)
        ax.spines["right"].set_color(None)
        ax.spines["bottom"].set_position(("data" , 0))
        ax.spines["left"].set_position(("data" , 0.5))
        
        ax.spines["left"].set_color(text_color)
        ax.spines["bottom"].set_color(text_color)
        

        ax.set_xlim([0.5 , nbr_tranches + 0.5])
        
        


        # ticks : 

        # yticks : 

        max_action_USDH = S_height_USDH.max()    # le plus grand nbr de 'type_action' effectu√©s par l'USDH dans un intervalle de 5 minutes
        max_action_adv = (-1)*S_height_adv.min()  # le plus grand nbr de 'type_action' effectu√©s par l'adversaire dans un intervalle de 5 minutes


        ytick_inf = (-1)*(max_action_adv + 1)      # borne inf√©rieure des yticks
        ytick_sup = max_action_USDH + 1   # borne sup√©rieure des yticks (+1 car un range s'arr√™te une unit√© avant la valeur sp√©cifi√©e)



        ax.set_yticks(np.arange(int(ytick_inf) , int(ytick_sup) + 1 , 5))
        ax.tick_params(axis = 'y', colors = text_color)   # couleur des graduations
        ax.set_yticklabels([abs(tick) for tick in np.arange(int(ytick_inf) , int(ytick_sup) + 1 , 5)] , 
                            fontsize = 12 , 
                            color = text_color)
        
        
        
        





        # xticks :


        for tick in range(1 , nbr_tranches + 1) :

            ax.text(x = tick , 
                    y = ytick_inf + (9/10)*S_height_adv.mean() ,
                    s = f"{int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].left)}√®me - {int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].right)}√®me" ,
                    fontsize = 11 , 
                    rotation = 90 , 
                    color = text_color ,
                    verticalalignment = "center" , 
                    horizontalalignment = "center")



        ax.set_xticks(list(range(1 , nbr_tranches + 1)))
        ax.tick_params(axis = 'x', colors = text_color)   # couleur des graduations
        ax.set_xticklabels(nbr_tranches*[" "] , color = text_color)




        # titre du graphique : 

        # Si l'on regarde les tirs pris : ['tir' , 'but 7m' , 'but'] :

        if len(type_action) == 3 :


            titre = "Saison USDH : r√©partition des tirs par tranche de 5 minutes"


            ylabel = "nombre de tirs tent√©s"



        # Si l'on regarde les buts marqu√©s : ['but 7m' , 'but'] :

        elif len(type_action) == 2 : 

            titre = "Saison USDH : r√©partition des buts par tranche de 5 minutes"


            ylabel = "nombre de buts inscrits"




        else : 

            titre = f"Saison USDH : r√©partition des {type_action[0]} par tranche de 5 minutes"


            ylabel = f"nombre de {type_action[0]}"






        if show_title == True : 

            ax.set_title(titre , fontsize = 30 , family = "serif" , color = text_color ,
                         pad = 75)





        ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
        ax.set_xlabel(" ")







        # 4) Annotation des effectifs en face de chaque barre :

        # Pour chacune des 2 √©quipes : 

        for filtre in [data_filtre["√©quipe"] == "USDH" , data_filtre["√©quipe"] != "USDH"] :


            # Pour chaque intervalle de temps (12 au total) :

            for i , intervalle in zip(list(range(1,nbr_tranches + 1)) , data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().index) :

                
                # CAS 1 : si le nombre de tranches souhait√© vaut 3, 5 OU 15 --> la ligne de la mi-temps coupe la tranche du milieu et passe en plein sur le texte de l'effectif de cette tranche ==> d√©calage du texte sur un c√¥t√© !
                
                if nbr_tranches in [3 , 5 , 15] : 
                    
                    if i == nbr_tranches//2 + 1 :  # S'il s'agit de la tranche du milieu :
                        
                        x = i + 0.075   # on d√©cale le texte vers la droite
                        
                        
                    else : # SINON, s'il s'agit d'une autre tranche quelconque :
                        
                        x = i  # pas de soucis, on √©crit le texte au milieu
                
                
                
                # CAS 2 : 
                
                else : 
                    
                    x = i
                    
                    
                    
                    
                # SI il s'agit des effectifs de l'USDH :

                if False not in (filtre == (data_filtre["√©quipe"] == "USDH")).unique() : 
                    
                    
                    # Texte et couleur du texte √† afficher : 
                        
                    color = "#71E014"   # vert clair
                    txt = np.round(S_height_USDH.loc[intervalle] , 2)
                        


                    # Gestion de la taille de police : 
                        
                    # SI le nombre de tranches est √©lev√© ET que l'on regarde les moyennes / match ==> texte long √† afficher ==> r√©duire la taille de police :
                            
                    if (nbr_tranches in [30 , 60]) and (unite == "moyenne / match") :
                        
                        fontsize = 13
                        
                        
                        
                        # SI le nombre de tranches voulu est 60 ==> rotation des effectifs car sinon, chevauchement ==> illisible !
                        
                        if nbr_tranches == 60 : 
                            
                            rotation = 90
                            y = S_height_USDH.loc[intervalle] + (4.5/10)*S_height_USDH.mean()
                        
                            
                            
                        else : 
                            
                            rotation = 0
                            y = S_height_USDH.loc[intervalle] + (1.25/10)*S_height_USDH.mean()
                        
                        
                        
                        
                        
                        
    
                    # SINON, si le nombre de tranches est moyennement / peu √©lev√© : 
                        
                    else :
                            
                        fontsize = 16
                        rotation = 0
                        y = S_height_USDH.loc[intervalle] + (1.25/10)*S_height_USDH.mean()
                    
                        
                    
                    
                    
                    
                        
                        
                        
                    
                    
                # SINON, s'il s'agit des effectifs de l'adversaire de l'USDH :
                    
                else : 
                    
                    
                    color = "#FF0000"
                    txt = (-1)*np.round(S_height_adv.loc[intervalle] , 2)
                    
                    
                    # Gestion de la taille de police : 
                        
                    # SI le nombre de tranches est √©lev√© ET que l'on regarde les moyennes / match ==> texte long √† afficher ==> r√©duire la taille de police :
                            
                    if (nbr_tranches in [30 , 60]) and (unite == "moyenne / match") :
                        
                        fontsize = 13
                        
                        
                        
                        # SI le nombre de tranches voulu est 60 ==> rotation des effectifs car sinon, chevauchement ==> illisible !
                        
                        if nbr_tranches == 60 : 
                            
                            rotation = 90
                            y = S_height_adv.loc[intervalle] + (4.5/10)*S_height_adv.mean()
                     
                        
                            
                            
                        else : 
                            
                            rotation = 0
                            y = S_height_adv.loc[intervalle] + (1.25/10)*S_height_adv.mean()
                     
                        
                        
                        
                        
                        
                        
    
                    # SINON, si le nombre de tranches est moyennement / peu √©lev√© : 
                        
                    else :
                        
                        fontsize = 16
                        rotation = 0
                        y = S_height_adv.loc[intervalle] + (1.25/10)*S_height_adv.mean()
                     
                    
                    
                    
                       
 

                ax.text(x = x , 
                        y = y , 
                        s = txt , 
                        horizontalalignment = "center" , 
                        verticalalignment = "center" , 
                        color = color , 
                        fontsize = fontsize , 
                        rotation = rotation)








        # 5) Ligne symbolisant la mi-temps :


        ord_mi_temps_1 = ytick_inf - 0.5
        ord_mi_temps_2 = (ytick_sup-1) + (ytick_sup-1)/5 + (1.4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean()

        abs_mi_temps = (nbr_tranches + 1)/2


        ax.plot(2*[abs_mi_temps] , [ord_mi_temps_1 , ord_mi_temps_2] , 
                color = "#00D1FF" , 
                ls = "--" , 
                lw = 2)


        ax.text(x = abs_mi_temps , 
                y = (51/50)*ord_mi_temps_2 , 
                color = "#00D1FF" , 
                fontsize = 12 , 
                s = "mi-temps" , 
                verticalalignment = "center" , 
                horizontalalignment = "center")




        ax.legend(loc = "upper left" , 
                  fontsize = 8)







        # 6) Inscription du score des 2 √©quipes lors de chaque p√©riode : 
        
        
        if type_action in [["but" , "but 7m"] , ["2min"] , ["avertissement"] , ["arr√™t" , "arr√™t 7m"] , ["tir" , "tir 7m" , "but" , "but 7m"]] :
        
        
            if type_action == ["but" , "but 7m"] :

                action = "buts marqu√©s"


            elif type_action == ["2min"] : 

                action = "exclusions"


            elif type_action == ["avertissement"] : 

                action = "cartons jaunes"


            elif type_action == ["arr√™t" , "arr√™t 7m"] : 

                action = "arr√™ts"


            elif type_action == ["tir" , "tir 7m" , "but" , "but 7m"] : 

                action = "tirs tent√©s"
            
            
            
            
            
            if unite == "total" : 

                score_M1_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M1").sum()
                score_M2_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M2").sum()   # nbr de buts inscrits en 2√®me p√©riode par l'USDH
    
                score_M1_adv = S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M1").sum()
                score_M2_adv = S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M2").sum()   # nbr de buts inscrits en 2√®me p√©riode par les adversaires



                # Coordonn√©es du score de la M1 : 
                    
                x_M1_USDH = (1 + nbr_tranches/2)/2 - 2*nbr_tranches/50
                
                x_tiret_M1 = (1 + nbr_tranches/2)/2
                
                x_M1_adv = (1 + nbr_tranches/2)/2 + 2*nbr_tranches/50

                 
                
                

                
                # Coordonn√©es du score de la M2 : 
                    
                x_M2_USDH = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 - 2*nbr_tranches/50
                
                x_tiret_M2 = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2

                x_M2_adv = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 + 2*nbr_tranches/50
                
                
                
                # hauteur du texte : 
                    
                y_score = (ytick_sup-1) + (ytick_sup-1)/5 + (1.4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean()
                
                




            elif unite == "moyenne / match" : 

                score_M1_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M1").sum() / len(dico_rencontres_USDH)
                score_M2_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M2").sum() / len(dico_rencontres_USDH)  # nbr de buts inscrits en 2√®me p√©riode par l'USDH
    
                score_M1_adv = S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M1").sum() / len(dico_rencontres_USDH)
                score_M2_adv = S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M2").sum() / len(dico_rencontres_USDH)   # nbr de buts inscrits en 2√®me p√©riode par les adversaires



                # Coordonn√©es du score de la M1 : 
                    
                x_M1_USDH = (1 + nbr_tranches/2)/2 - 4.5*nbr_tranches/50
                
                x_tiret_M1 = (1 + nbr_tranches/2)/2
                
                x_M1_adv = (1 + nbr_tranches/2)/2 + 1.75*nbr_tranches/50

                 
                
                

                
                # Coordonn√©es du score de la M2 : 
                    
                x_M2_USDH = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 - 4.5*nbr_tranches/50
                
                x_tiret_M2 = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2

                x_M2_adv = (nbr_tranches + 0.25)/2 + (0.25 + nbr_tranches/2)/2 + 1.75*nbr_tranches/50
                
                
                
                # hauteur du texte : 
                    
                y_score = (ytick_sup-1) + (ytick_sup-1)/5 + (1.4/10)*data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().mean()
                






            # SCORE M1 : 

            # USDH : 

            ax.text(y = y_score , 
                    x = x_M1_USDH ,   # (nbr_tranches + 0.5)/4 , 
                    s = np.round(score_M1_USDH , 2) , 
                    color = "#71E014" , 
                    fontsize = 30 , 
                    verticalalignment = "center")


            # tiret : 

            ax.text(y = y_score , 
                    x = x_tiret_M1 ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                    s = " -" , 
                    color = text_color , 
                    fontsize = 30 , 
                    verticalalignment = "center")



            # adv : 

            ax.text(y = y_score , 
                    x = x_M1_adv ,   # (nbr_tranches + 0.5)/4 + 2*nbr_tranches/30 , 
                    s = np.round(score_M1_adv , 2) , 
                    color = "#FF0000" , 
                    fontsize = 30 , 
                    verticalalignment = "center")







            # score M2 : 

            # USDH : 

            ax.text(y = y_score , 
                    x = x_M2_USDH , 
                    s = np.round(score_M2_USDH , 2) ,
                    color = "#71E014" , 
                    fontsize = 30 , 
                    verticalalignment = "center")


            # tiret : 

            ax.text(y = y_score , 
                    x = x_tiret_M2  ,     # 2.5*(nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                    s = " -" , 
                    color = text_color , 
                    fontsize = 30 , 
                    verticalalignment = "center")





            # adv : 

            ax.text(y = y_score , 
                    x = x_M2_adv , 
                    s = np.round(score_M2_adv , 2) ,
                    color = "#FF0000" , 
                    fontsize = 30 , 
                    verticalalignment = "center")
            
            
            


        

        return ax
    
    
    
    
    
    
    else : 
        
        
        raise ValueError("nombre de tranches attendu : 3, 4, 5, 6, 10, 12, 15, 20, 30 ou 60.")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    



## Fonction permettant de retourner un double histogramme vertical du DIFFERENTIEL du type d'action renseign√© de l'USDH et de ses adversaires par tranche de 5 minutes, depuis le d√©but de la saison :
 
def histogram_differentiel_type_action_saison(fig , ax , data , type_action = ["but" , "but 7m"] , nbr_tranches = 12 , 
                                              text_color = "black" , unite = "total" , show_title = False) : 
    
    
    
    
    
    # SI l'utilisateur souhaite √©crire les textes (graduations, noms des axes, titre, ...) en BLANC : 
    
    if text_color == "white" : 
        
        
        # Alors la couleur de fond du graphique st NOIRE :
        
        fig.set_facecolor("#0E1117")
        ax.set_facecolor("#0E1117")
        
        
        
    
    
    
    # Filtrage des donn√©es concern√©es : 

    data_filtre = data[data["action"].isin(type_action)]
    
    
    
    
    
    if nbr_tranches in [3 , 4 , 5 , 6 , 10 , 12, 15, 20, 30, 60] :


        if nbr_tranches != 12 : 

            data_filtre["intervalle de temps"] = pd.cut(df["temps"] , bins = np.arange(0 , 61 , 60//nbr_tranches) , 
                                                        include_lowest = True)







        # diagramme en barres verticales des diff√©rentiels de buts :

        # On calcule la Series des diff√©rentiels, en faveur de l'USDH : 

        S_differentiel = data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index()
        
        
        # On construit le DataFrame (√† 1 seule colonne : 'intervalle de temps') des diff√©rentiels, en faveur de l'USDH : 

            
        # CAS 1 : SI l'on souhaite l'histogramme des diff√©rentiels TOTAUX par tranche, depuis le d√©but de la saison :
           
        if unite == "total" : 
            
            
            data_differentiel = pd.DataFrame(data = S_differentiel)
            
            
            
        
        # CAS 2 : SI l'on souhaite l'histogramme des diff√©rentiels MOYENS / MATCH par tranche, depuis le d√©but de la saison :
            
        elif unite == "moyenne / match" : 
            
            data_differentiel = pd.DataFrame(data = S_differentiel / len(dico_rencontres_USDH))
            
            
            
            
        else : 
            
            raise ValueError("param√®tre attendu pour l'argument 'unite' : 'total' ou 'moyenne / match'.")
            
        
        
            
            
        # SI le nombre de tranches renseign√© est le bon :

        if nbr_tranches in [3, 4, 5, 6, 10, 12, 15, 20, 30, 60] :



            # PARTIE 1 : histogramme des diff√©rentiels positifs (en VERT) :

            data_differentiel_pos = data_differentiel[data_differentiel["intervalle de temps"] > 0]
    

            ax.bar(x = np.arange(1, nbr_tranches + 1)[data_differentiel["intervalle de temps"] > 0] ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
                   height = data_differentiel_pos["intervalle de temps"] , 
                   align = 'center' , 
                   color = '#1FBF28')





            # PARTIE 2 : histogramme des diff√©rentiels negatifs (en ROUGE) :
                
            data_differentiel_neg = data_differentiel[data_differentiel["intervalle de temps"] < 0]


            ax.bar(x = np.arange(1, nbr_tranches + 1)[data_differentiel["intervalle de temps"] < 0] ,   # car si on d√©coupe les 60 minutes en intervalle de 5 minutes, on trouve 12 intervalles (5 x 12 = 60).
                   height = data_differentiel_neg["intervalle de temps"] , 
                   align = 'center' , 
                   color = 'red')
            
            


    

            # 3) Personnalisation : 
    
            ax.spines["top"].set_color(None)
            ax.spines["right"].set_color(None)
            ax.spines["bottom"].set_position(("data" , 0))
            ax.spines["bottom"].set_color(text_color)
            ax.spines["left"].set_position(("data" , 0.5))
            ax.spines["left"].set_color(text_color)
            
            
            
            ax.set_xlim([0.15 , nbr_tranches + 1])
    
    
    
    
            # ticks : 
    
            # yticks : 
    
            min_diff = data_differentiel["intervalle de temps"].min()
            max_diff = data_differentiel["intervalle de temps"].max()
    
    
            ytick_inf = min_diff       # borne inf√©rieure des yticks
            ytick_sup = max_diff       # borne sup√©rieure des yticks (+1 car un range s'arr√™te une unit√© avant la valeur sp√©cifi√©e)
    
    
    
            ax.set_yticks(list(np.arange(int(ytick_inf) , 0 , 1)) + list(np.arange(0 , int(ytick_sup) + 1 , 1)))
            ax.tick_params(axis = 'y', colors = text_color)   # couleur des graduations
            ax.set_yticklabels([abs(tick) for tick in list(np.arange(int(ytick_inf) , 0 , 1)) + list(np.arange(0 , int(ytick_sup) + 1 , 1))] , 
                                fontsize = 12  , color = text_color)
    
    
    
    
            # xticks :
    
    
            for tick in range(1, nbr_tranches + 1) :
                
                
                if nbr_tranches <= 6 : 
                    
                    rotation = 0
                    
                else : 
                    
                    rotation = 90
                    
                    
                   
    
                ax.text(x = tick , 
                        y = ytick_inf - 1 + (6/10)*data_differentiel_neg["intervalle de temps"].mean()  ,
                        s = f"{int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].left)}√®me - {int(data_filtre['intervalle de temps'].value_counts().sort_index().index[tick-1].right)}√®me" ,
                        fontsize = 11 , 
                        rotation = rotation , 
                        color = text_color , 
                        verticalalignment = "center" , 
                        horizontalalignment = "center")
    
    
    
                
            ax.set_xticks(list(range(1, nbr_tranches + 1)))
            ax.tick_params(axis = 'x', colors = text_color)   # couleur des graduations
            ax.set_xticklabels(nbr_tranches*[" "] , color = text_color)
    
    
    
    
    
    
    
    
    
            # titre du graphique : 

            # Si l'on regarde les tirs pris : ['tir' , 'but 7m' , 'but'] :
    
            if len(type_action) == 3 :
    
    
                titre = "Saison USDH : diff√©rentiel des tirs par tranche de 5 minutes"
    
    
                ylabel = "diff√©rentiel de tirs tent√©s"
    
    
    
            # Si l'on regarde les buts marqu√©s : ['but 7m' , 'but'] :
    
            elif len(type_action) == 2 : 
    
                titre = "Saison USDH : diff√©rentiel des buts par tranche de 5 minutes"
    
    
                ylabel = "diff√©rentiel de buts inscrits"
    
    
    
    
            else : 
    
                titre = f"Saison USDH : diff√©rentiel des {type_action[0]} par tranche de 5 minutes"
    
    
                ylabel = f"diff√©rentiel de {type_action[0]}"
    
    
    
    
    
    
            if show_title == True : 
    
                ax.set_title(titre , fontsize = 30 , family = "serif" , color = text_color ,
                             pad = 75)
    
    
    
    
    
            ax.set_ylabel(ylabel , fontsize = 15 , family = "serif" , color = text_color)
            ax.set_xlabel(" ")
    
    
    
    
    
    
    
            # 4) Annotation des effectifs en face de chaque barre :
    
    
    
            # Pour chaque intervalle de temps (12 au total) :
    
            for i , intervalle in zip(list(range(1, nbr_tranches + 1)) , data_differentiel.index) :
    
    
                
                # CAS 1 : si le nombre de tranches souhait√© vaut 3 ou 5 --> la ligne de la mi-temps coupe la tranche du milieu et passe en plein sur le texte de l'effectif de cette tranche ==> d√©calage du texte sur un c√¥t√© !
                
                if nbr_tranches in [3,5] : 
                    
                    if i == nbr_tranches//2 + 1 :  # S'il s'agit de la tranche du milieu :
                        
                        x = i + 0.075   # on d√©cale le texte vers la droite
                        
                        
                    else : # SINON, s'il s'agit d'une autre tranche quelconque :
                        
                        x = i  # pas de soucis, on √©crit le texte au milieu
                
                
                
                # CAS 2 : 
                
                else : 
                    
                    x = i
                
                
                
                
                
                if unite in ["total" , "moyenne / match"] :
                    
                    
                    # CAS 1 : si je souhaite le diff√©rentiel TOTAL par tranche, depuis le d√©but de la saison :
                        
                    if unite == "total" : 
                        
    
                        differentiel_buts = data_differentiel["intervalle de temps"].loc[intervalle]    # data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle] - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle]
    
                        
    
                        # Gestion de la police + de la couleur de l'affichage du diff√©rentiel de buts :
    
                        if differentiel_buts >= 0 :
                            
                            y = differentiel_buts + (2.75/10)*data_differentiel_pos["intervalle de temps"].mean()
                        
                        
                            if differentiel_buts > 0 :
        
                                couleur = "#71E014"
                                txt = "+ " + str(np.round(differentiel_buts , 2))
                                
                                
                            else :   # differentiel_buts == 0 : 
            
                                couleur = "orange"
                                txt = "0"
                            
                            
                            
                            
    
                        else :    # differentiel_buts < 0
                        
                        
                            y = differentiel_buts + (1.5/10)*data_differentiel_neg["intervalle de temps"].mean()
        
                            couleur = "#FF0000"
                            txt = "- " + str(abs(np.round(differentiel_buts , 2)))
    
    
    
    
    
    
    
                    # CAS 2 : si je souhaite le diff√©rentiel MOYEN / MATCH par tranche, depuis le d√©but de la saison :
                        
                    else :    # unite == "moyenne / match" : 
                        
    
                        differentiel_buts = (data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle])/len(dico_rencontres_USDH) - (data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts().sort_index().loc[intervalle])/len(dico_rencontres_USDH)
    
    
                        # Gestion de la police + de la couleur de l'affichage du diff√©rentiel de buts :
    
                        if differentiel_buts >= 0 :
                            

                        
                            if differentiel_buts > 0 :
        
                                couleur = "#71E014"
                                txt = "+ " + str(np.round(differentiel_buts , 2))
                                
                                
                            else :   # differentiel_buts == 0 : 
            
                                couleur = "orange"
                                txt = "0"
                            
                            
                            
                            
    
                        else :    # differentiel_buts < 0
                        
                        
                            couleur = "#FF0000"
                            txt = "- " + str(abs(np.round(differentiel_buts , 2)))
    
                    
    
                    
                        
                        
                        
                    
                    
                    
                    
                    
                    # Gestion de la taille + de l'orientation de l'affichage du diff√©rentiel de buts :
    
                    
                    # SI le nombre de tranches est √©lev√© ET que l'on regarde les moyennes / match ==> texte long √† afficher ==> r√©duire la taille de police :
                                
                    if nbr_tranches in [30 , 60] :
                        
                        if nbr_tranches == 60 :
                            
                            fontsize = 8.5
                            
                            
                            if differentiel_buts >= 0 :
                                
                                y = differentiel_buts + 3*(data_differentiel_pos["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
                        
                        
                        
                        
                            else : 
                                
                                y = differentiel_buts + 2*(data_differentiel_neg["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
                        
                                
                                
                            
                            
                            
                            
                            if unite == "total" :
                        
                                rotation = 0
                                
                                
                                
                            else : 
                                
                                rotation = 75
                                
                                
                                
                        else :   # nbr_tranches == 30
                        
                        
                            if differentiel_buts >= 0 :
                                
                                y = differentiel_buts + 2*(data_differentiel_pos["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
                        
                        
                        
                        
                            else : 
                                
                                y = differentiel_buts + 2*(data_differentiel_neg["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
                        
                        
                        
                            fontsize = 9.5
                            rotation = 0
                        
                        
                        
         
                        
                        
    
                    # SINON, si le nombre de tranches est moyennement / peu √©lev√© : 
                        
                    else :
                        
                        rotation = 0
                        
                        
                        if unite == "moyenne / match" :
                            
                            fontsize = 13
                            
                            
                            if differentiel_buts >= 0 :
                                
                                y = differentiel_buts + 2*(data_differentiel_pos["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
        
                            
                            else :
                                
                                y = differentiel_buts + 2*(data_differentiel_neg["intervalle de temps"]/len(dico_rencontres_USDH)).mean()
        
            
                            
                        else : 
                            
                            fontsize = 16
                            
                            
                       
                        
    
    
                    ax.text(x = x , 
                            y = y , 
                            s = txt , 
                            horizontalalignment = "center" , 
                            verticalalignment = "center" , 
                            color = couleur , 
                            fontsize = fontsize , 
                            rotation = rotation)
    
    
    
    
    
    
    
    
            # 5) Ligne symbolisant la mi-temps :
    
    
            ord_mi_temps_1 = ytick_inf - 0.5
            ord_mi_temps_2 = (ytick_sup-1) + (ytick_sup-1)/5 + (8/10)*abs(data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts()).mean() + 0.55
    
            abs_mi_temps = (nbr_tranches + 1)/2
    
    
            ax.plot(2*[abs_mi_temps] , [ord_mi_temps_1 , ord_mi_temps_2] , 
                    color = "#00D1FF" , 
                    ls = "--" , 
                    lw = 2)
    
    
            ax.text(x = abs_mi_temps , 
                    y = (51/50)*ord_mi_temps_2 , 
                    color = "#00D1FF" , 
                    fontsize = 12 , 
                    s = "mi-temps" , 
                    verticalalignment = "center" , 
                    horizontalalignment = "center")
    
    
    
    
    
    
    
    
    
            # 6) Inscription du diff√©rentiel des 2 √©quipes lors de chaque p√©riode : 
    
    
            if type_action in [["but" , "but 7m"] , ["2min"] , ["avertissement"] , ["arr√™t" , "arr√™t 7m"] , ["tir" , "tir 7m" , "but" , "but 7m"]] :
    
    
                if type_action == ["but" , "but 7m"] :
    
                    action = "buts marqu√©s"
    
    
                elif type_action == ["2min"] : 
    
                    action = "exclusions"
    
    
                elif type_action == ["avertissement"] : 
    
                    action = "cartons jaunes"
    
    
                elif type_action == ["arr√™t" , "arr√™t 7m"] : 
    
                    action = "arr√™ts"
    
    
                elif type_action == ["tir" , "tir 7m" , "but" , "but 7m"] : 
    
                    action = "tirs tent√©s"
    
    
    
    
    
    
                differentiel_M1_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M1").sum() - S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M1").sum()
                differentiel_M2_USDH = S_nbr_type_action_saison(data = data , type_action = action , equipe = "USDH" , periode = "M2").sum() - S_nbr_type_action_saison(data = data , type_action = action , equipe = "adversaire" , periode = "M2").sum()
    
    
    
                # diff√©rentiel M1 : 
    
                if differentiel_M1_USDH > 0 :
    
                    color = "lime"
    
                else : 
    
                    color = "red"
    
    
     
               
                    
                
                ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + (8/10)*abs(data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts()).mean() + 0.55, 
                        x = (1 + nbr_tranches/2)/3 ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                        s = "M1 :" , 
                        color = text_color , 
                        fontsize = 30 , 
                        verticalalignment = "center")
                    
                    
                    
                ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + (8/10)*abs(data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts()).mean() + 0.55 , 
                        x = (1 + nbr_tranches/2)/2  ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                        s = differentiel_M1_USDH , 
                        color = color , 
                        fontsize = 30 , 
                        verticalalignment = "center")
    
    
    
    
    
    
    
                # diff√©rentiel M2 : 
    
                if differentiel_M2_USDH > 0 :
    
                    color = "lime"
    
                else : 
    
                    color = "red"
    
                
                
                
                ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + (8/10)*abs(data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts()).mean() + 0.55 , 
                        x = 2*(1 + nbr_tranches)/3 ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                        s = "M2 : " , 
                        color = text_color , 
                        fontsize = 30 , 
                        verticalalignment = "center")
                
    
    
                ax.text(y = (ytick_sup-1) + (ytick_sup-1)/5 + (8/10)*abs(data_filtre[data_filtre["√©quipe"] == "USDH"]["intervalle de temps"].value_counts() - data_filtre[data_filtre["√©quipe"] != "USDH"]["intervalle de temps"].value_counts()).mean() + 0.55 , 
                        x = 2*(1 + nbr_tranches)/2.65 ,  # (nbr_tranches + 0.5)/4 + nbr_tranches/30 , 
                        s = differentiel_M2_USDH , 
                        color = color , 
                        fontsize = 30 , 
                        verticalalignment = "center")
    
    
    
    
    
    
    
            return ax







        else : 
            
            
            raise ValueError("nombre de tranches attendu : 3, 4, 5, 6, 10, 12, 15, 20, 30 ou 60.")
        
        
        
        
        
################################ FIN DES FONCTIONS UTILES A L'ANALYSE ET A L'APPLICATION !! #########################        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
#####################################################################################################################
#####################################################################################################################
#####################################################################################################################






###        IMPORTATION DE LA BASE DE DONNEES DES ACTIONS DE L'EQUIPE SM1 DE L'USDH 2022-2023 (fichier excel) : 

chemin_acces = "https://github.com/jujuHandF144/streamlit-USDH-/blob/main/base_de_donnees_feuilles_de_match_SM1.xlsx?raw=true"

df = importation_et_nettoyage(link = chemin_acces) 






#####################################################################################################################
#####################################################################################################################
#####################################################################################################################

###                                          CREATION DE L'APPLICATION STREAMLIT.



#####################################################################################################################
#####################################################################################################################



##                                   Cr√©ation d'un MENU LATERAL sur la gauche de l'√©cran :
    
    
    
st.sidebar.markdown("<h1 style='text-align: center; color: white;'>Menu :</h1>",
                    unsafe_allow_html = True)  
 
    
st.sidebar.write(" ")
st.sidebar.write(" ")









# Cr√©ation d'un bouton DANS LE MENU LATERAL, pour renseigner le type d'analyse que l'on souhaite faire :
        
# Bouton pour le choix de l'activit√© :
    
    
bouton_activite = st.sidebar.selectbox("Que souhaitez-vous regarder ?" , 
                                      [" " , 
                                       "analyse de match" , 
                                       "BILAN saison USDH"])






        
        
for i in range(5) : 
    
    st.sidebar.write("")
    
    
    
    
# SI l'utilisateur N'a PAS renseign√© ce qu'il souhaite faire :
    
if bouton_activite == " " :
    
    
    
    # Titre de l'application : 
                                     
    st.markdown(f"<h1 style='text-align: center; color: white;'>Application d'analyse de donn√©es pour l'Union Saumur Dou√© Handball.</h1>",
                unsafe_allow_html = True)
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
    st.header("- 1) Description de l'outil.")
    
    
    for i in range(3) : 
        
        st.write("")
        
        
        
     
    st.write("""--> Enti√®rement r√©alis√©e √† partir des feuilles de match au format PDF disponibles sur le site de la FFHB, cette application web ne concernant √† ce jour que l'√©quipe 
                    S√©nior Masculine 1 du club de handball de l'USDH a pour vocation d'extraire de ces feuilles de matchs des statistiques et graphiques int√©ressants afin d'aider √† 
                    une meilleure analyse et √† la compr√©hension des matchs jou√©s par cette √©quipe lors de la saison 2022-2023.""")  
    
    
    for i in range(2) : 
        
        st.write("")
        
        
            
                
    st.write("""--> A chaque nouvelle journ√©e de championnat, la feuille de match devant √™tre saisie manuellement pour mettre √† jour la base de donn√©es utilis√©e pour cette application, 
                    il est possible que les donn√©es du dernier match ne soient pas imm√©diatement accessibles (quelques jours d'attente sont √† pr√©voir). """)
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
        
    st.header("- 2) Accessibilit√© de l'outil.")
    
    
    for i in range(3) : 
        
        st.write("")
        
                    

    st.write("""--> Cette application n'est accessible QUE par les personnes ayant connaissance du lien ci-dessus : elle ne peut pas √™tr√© trouv√©e via une recherche internet, 
                    mais le code informatique utilis√© pour son bon fonctionnement est quant √† lui stock√© sur un d√©p√¥t public (car le rendre priv√© ne permet pas √† l'application de fonctionner correctement) : aisni, 
                    toute personne ayant de bonnes connaissances en data et en programmation peut potentiellement avoir acc√®s au code que j'ai cr√©√©. 
                    Contenant des analyses particuli√®rement centr√©es sur l'USDH, il serait donc plus judicieux que le lien de cette application reste connu uniquement des membres et licenci√©s de l'USDH.  
                    Je ne fournirai pour ma part le lien √† aucune autre personne que celles du club.""") 
    
    
 
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
        
    st.header("- 3) Temps de chargement.")
    
    
    
    for i in range(3) : 
        
        st.write("")
        
        
        
    st.write("""--> Certains graphiques et/ou statistiques n√©cessitent de r√©aliser des calculs longs et complexes, qui utilisent des ressources importantes en termes de m√©moire de l'ordinateur : 
                    il faudra donc parfois attendre quelques dizaines de secondes avant de voir enfin s'afficher le r√©sultat : tant que le bouton 'running' appara√Æt en haut √† droite de votre √©cran, 
                    cela signifie que le calcul est en cours et que vous n'avez qu'√† patienter.  
                    De la m√™me mani√®re, avec ce genre d'application, le fait de choisir une option via un bouton entra√Æne le rechargement de tout ce qui avait d√©j√† √©t√© charg√© p√©c√©demment, d'ou 
                    un temps d'attente logique de quelques dizaines de secondes par moments dont je m'excuse par avance.""")
    
    
    
    
    for i in range(3) : 
        
        st.write("")
        
        
        
        
        
    st.header("- 4) Absence de chargement.")
    
    
    
    for i in range(3) : 
        
        st.write("")
        
        
        
    st.write("""--> Si la page ne charge plus malgr√© la fait que vous avez s√©lectionnez une option via un bouton, vous pouvez cliquer sur le bouton aux 3 bandes horizontales (en haut √† droite de votre √©cran) 
                    et cliquer ensuite sur 'Rerun' afin de faire charger manuellement l'application.  
                    Vous pouvez √©galement r√©gler, si vous le souhaitez, quelques param√®tres visuels gr√¢ce √† ce m√™me bouton aux 3 bandes (option 'Settings').""")
    
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
    st.header("- 5) Gestion des erreurs / bugs.")
    
    
    
    for i in range(3) : 
        
        st.write("")
                    
                    
                    
    st.write("""--> A priori, tous les bugs et toutes les erreurs ont √©t√© r√©solues avant le lancement de cette application : cependant, si de telles anomalies devaient subvenir (message 
                    d'erreur et/ou apparition d'un encadr√© rouge incompr√©hensible), ne pas h√©siter √† me contacter afin que je me penche sur leur r√©solution.""")
    
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
    st.header("- 6) Mise en veille de l'application.")
    
    
    
    for i in range(3) : 
        
        st.write("")
                     
                     
                     
    st.write("""--> Il est possible qu'un NON usage prolong√© de l'application entra√Æne sa mise en veille : dans ce cas, il vous sera s√ªrement demand√© de cliquer sur un bouton afin de 
                    'r√©veiller' l'application. Dans le cas contraire, me tenir au courant afin de rem√©dier au probl√®me.""")
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
    st.header("- 7) Extension de l'application √† un usage plus large.")
    
    
    
    for i in range(3) : 
        
        st.write("")
                     
     
                    
    st.write("""--> N'ayant eu que quelques semaines pour d√©velopper cette application, elle n'est aujourd'hui utile que pour l'√©quipe SM1 du club, mais son usage pourrait potentiellement 
                    √™tre √©tendu aux autres √©quipes s√©niors du club (SF1, SF2, SM2, SM3). 
                    Cependant, pas mal de modifications devant √™tre effectuer pour √©tendre cet outil aux autres √©quipes (adaptation du code informatique, saisie des feuilles de match) et mon emploi 
                    du temps √©tant amen√© √† √©voluer, une telle manoeuvre prendrait plus ou moins de temps.
                    N'h√©sitez pas √† me signaler si une autre √©quipe du club souhaite disposer des m√™mes analyses de match que les SM1 √† l'heure actuelle.""")
    
    
    
    
    
    for i in range(7) : 
        
        st.write("")
        
        
        
        
    st.write("Bonne navigation !")
    
    
    
    
    for i in range(5) : 
        
        st.write("")
        
        
        
        
        
     # Ajout d'un lien clickable vers mes pages web : 
            
    st.write("Julien Lickel, Data Analyst et joueur de l'USDH.")

    lien_linkedin = "https://www.linkedin.com/in/julien-lickel-b45001211/"
    lien_instagram = "https://www.instagram.com/l_analyste_data/"


    st.write("[LinkedIn](%s)" % lien_linkedin)
    st.write("[Instagram](%s)" % lien_instagram)
    
    

        
        
        
       
    
    
    
    

    
    
# SI l'utilisateur a renseign√© ce qu'il souhaite faire :
    
else :    # bouton_activite != " " :
        
        
    


#####################################################################################################################
#####################################################################################################################


### 2√®me PAGE DE L'APPLICATION (analyse de match) :
    
    
     
        
    # CAS 1 : si l'utilisateur souhaite r√©aliser une analyse d'1 match particulier de cette saison 2022-23 : 
        
    if bouton_activite == "analyse de match" : 
        
        
        
        
        

        
        
        # Cr√©ation d'un bouton DANS LE MENU LATERAL permettant de choisir la journ√©e de championnat qui l'int√©resse :
            
        bouton_journee = st.sidebar.selectbox("Choisissez le match de l'USDH √† analyser :" , 
                                             [" "] + list(dico_rencontres_USDH.keys()))
        
        
        
        

        
        
        # SI l'utilisateur a renseign√© une journ√©e de championnat :
                
        if bouton_journee != " " : 
        
        
        
        
            # CAS A : le match de la journ√©e saisie N'A PAS ENCORE ETE JOUE : 
                
            if bouton_journee not in dico_rencontres_USDH.keys() : 
                
                st.write(f"Le match de la {bouton_journee.split(sep = 'J')[1]}√®me journ√©e n'a pas encore √©t√© jou√© : veuillez s√©lectionner une journ√©e ant√©rieure.")
            
            
            
            
            
            
            
            
            # CAS B : le match de la journ√©e saisie A BEL ET BIEN ETE JOUE :
                
            else :    
            
            
                # Titre de la page : 
                    
                    
                st.markdown(f"<h1 style='text-align: center; color: white;'>Journ√©e {bouton_journee[-1]} :</h1>",
                            unsafe_allow_html = True)  
                
                
                
                
                
                
                for i in range(3) : 
                    
                    st.write("")









                # Filtrage de la base de donn√©es de l'USDH, en fonction de la journ√©e s√©lectionn√©e : 
                        
                df_journee = df[df["journ√©e"] == bouton_journee]    
                
                
                
                
                
                
                
                # R√©cup√©ration du nom des 2 √©quipes oppos√©es lors de cette journ√©e : 
                    
        
                equipe_domicile = dico_rencontres_USDH[bouton_journee][0]   # nom de l'√©quipe jouant √† domicile
                equipe_exterieur = dico_rencontres_USDH[bouton_journee][1]  # nom de l'√©quipe jouant √† l'ext√©rieur
                    
                    
                    
                
                    
                # Affichage des NOMS DES 2 EQUIPES OPPOSEES + DE LEUR LOGO (en face du nom) : 
                            
                # col1 , col2 , col3 , col4 , col5 = st.columns([2 , 2 , 2 , 2 , 2]) 
                
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                    
                
                col3.header(f"**{equipe_domicile.upper()}**")
                
                logo_equipe_1 = Image.open(dico_logos[equipe_domicile]) 
                col2.image(logo_equipe_1 , width = 115)
            
                
                col6.header(f"**{equipe_exterieur.upper()}**")
                
                logo_equipe_2 = Image.open(dico_logos[equipe_exterieur]) 
                col7.image(logo_equipe_2 , width = 115)
                
                    
                    
                st.write("")  
                st.write("")
                st.write("-------------------------------------------------------------------------------------")
                
                
                
                
                
                
                
                
                
                
                
                # PARTIE 1 : m√©triques / graphiques li√©s aux BUTS :
                    
                    
                st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es au score.</h1>",
                            unsafe_allow_html = True)  
                
                
                st.write("-------------------------------------------------------------------------------------")
                
                
                
                
                
                
                
                
                # M√©trique n¬∞1-2-3 : Affichage du SCORE FINAL / en M1 / en M2 DE CHAQUE EQUIPE : 
                        
                for type_score in ["final" , "M1" , "M2"] :
                    
                    
                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                        
                    col4.write(f"score {type_score} :") 
                    
                    
                    # R√©cup√©ration du score final de l'√©quipe √† domicile et de l'√©quipe √† l'ext√©rieur :
                        
                    score_final_domicile = score(data = df , journee = bouton_journee , periode = type_score , equipe = "domicile")
                    score_final_exterieur = score(data = df , journee = bouton_journee , periode = type_score , equipe = "ext√©rieur")
    
    

    
                    # Calcul de la diff√©rence de buts EN FAVEUR DE L'USDH : 
                        
                    # CAS 1 : l'USDH joue √† domicile : 
                        
                    if equipe_domicile == "USDH" :
                    
                        difference_finale = score_final_domicile - score_final_exterieur   # diff√©rence de buts finale (en faveur de l'USDH)
                    
                    
                    
                    
                        # R√©-√©criture de la diff√©rence de buts finale :
                         
                        if difference_finale > 0 : 
                                
                                difference_finale = "+ " + str(difference_finale) + " buts"
                            
                            
                            
                        elif difference_finale < 0 : 
                            
                            difference_finale = "- " + str(abs(difference_finale)) + " buts"
                            
                            
                            
                    
                    
                    
                        # On √©crit le delta de buts en-dessous de l'√©quipe √† domicile, car il s'agit de l'USDH :
                            
                        col3.metric(label = "" , 
                                    value = score_final_domicile , 
                                    delta = str(difference_finale))
                    
                    
                        col6.metric(label = "" , 
                                    value = score_final_exterieur , 
                                    delta = " ")
                    
                    
                    
                    
                    
                    
                    # CAS 2 : l'USDH joue √† l'ext√©rieur :
                        
                    else : 
                        
                        difference_finale = score_final_exterieur - score_final_domicile   # diff√©rence de buts finale (en faveur de l'USDH)
                    
                        
                        
                        # R√©-√©criture de la diff√©rence de buts finale :
                         
                        if difference_finale > 0 : 
                                
                                difference_finale = "+ " + str(difference_finale) + " buts"
                            
                            
                            
                        elif difference_finale < 0 : 
                            
                            difference_finale = "- " + str(abs(difference_finale)) + " buts"
                            
                            
                            
                    
                    
                    
                        # On √©crit le delta de buts en-dessous de l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                            
                        col3.metric(label = "" , 
                                    value = score_final_domicile , 
                                    delta = " ")
                    
                    
                        col6.metric(label = "" , 
                                    value = score_final_exterieur , 
                                    delta = str(difference_finale))
                    
                    
                    
                    st.write("")
                    st.write("")
                    
                    
                    
                    
                    
                    
                    
                 
                    
                 
                    
                    
                    
                    
                # M√©trique n¬∞4 : Affichage du temps pass√© en t√™te PAR CHAQUE EQUIPE : 
                    
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1.25,1.15,2.3,1]) 
                        
                col4.write("Temps pass√© en t√™te (en minutes) :") 
                
                
                # R√©cup√©ration du temps pass√© en t√™te par l'√©quipe √† domicile et par l'√©quipe √† l'ext√©rieur :
                        
                tps_en_tete_domicile = temps_en_tete(data = df , journee = bouton_journee , duree_en = "minutes" , equipe = "domicile")
                tps_en_tete_exterieur = temps_en_tete(data = df , journee = bouton_journee , duree_en = "minutes" , equipe = "ext√©rieur")
 



                # Calcul de la diff√©rence de temps en t√™te EN FAVEUR DE L'USDH : 
                    
                # CAS 1 : l'USDH joue √† domicile : 
                    
                if equipe_domicile == "USDH" :
                
                    difference_tps_en_tete = np.round(tps_en_tete_domicile - tps_en_tete_exterieur , 2)   # diff√©rence de temps pass√© en t√™te (en faveur de l'USDH)
                
                
                
                
                    # R√©-√©criture de la diff√©rence de temps en t√™te :
                     
                    if difference_tps_en_tete > 0 : 
                            
                        difference_tps_en_tete = "+ " + str(np.round(difference_tps_en_tete , 2)) + " minutes"
                        
                        
                        
                    elif difference_tps_en_tete < 0 : 
                        
                        difference_tps_en_tete = "- " + str(abs(difference_tps_en_tete)) + " minutes"
                        
                        
                        
                
                
                
                    # On √©crit le delta de temps pass√© en t√™te par l'√©quipe √† domicile, car il s'agit de l'USDH :
                        
                    col3.metric(label = "" , 
                                value = np.round(tps_en_tete_domicile , 2) ,
                                delta = difference_tps_en_tete)
                
                
                    col6.metric(label = "" , 
                                value = np.round(tps_en_tete_exterieur , 2) , 
                                delta = " ")
                
                
                
                
                
                
                # CAS 2 : l'USDH joue √† l'ext√©rieur :
                    
                else : 
                    
                    difference_tps_en_tete = np.round(tps_en_tete_exterieur - tps_en_tete_domicile , 2)  # diff√©rence de temps pass√© en t√™te (en faveur de l'USDH)
                
                    
                    
                    # R√©-√©criture de la diff√©rence de temps en t√™te :
                     
                    if difference_tps_en_tete > 0 : 
                            
                            difference_tps_en_tete = "+ " + str(difference_tps_en_tete) + " minutes"
                        
                        
                        
                    elif difference_tps_en_tete < 0 : 
                        
                        difference_tps_en_tete = "- " + str(abs(difference_tps_en_tete)) + " minutes"
                        
                        
                        
                
                
                
                    # On √©crit le delta de temps pass√© en t√™te par l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                        
                    col3.metric(label = "" , 
                                value = np.round(tps_en_tete_domicile , 2) , 
                                delta = " ")
                
                
                    col6.metric(label = "" , 
                                value = np.round(tps_en_tete_exterieur , 2) , 
                                delta = difference_tps_en_tete)
                
                
                
                st.write("")
                st.write("")
                
                
                
                
                
                
                
                
                
                
                
                # M√©trique n¬∞5 : Affichage de la plus grosse s√©rie de buts encaiss√©s successivement sans scorer PAR LES 2 EQUIPES : 
                        
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1.25,1.15,2.3,1]) 
                        
                col4.write("Plus grand nombre de buts encaiss√©s successivement sans marquer :") 
                
                
                
                
                # R√©cup√©ration de cette plus grosse s√©rie pour l'√©quipe √† domicile et l'√©quipe √† l'ext√©rieur :
                        
                plus_grand_nbr_buts_encaisses_succ_domicile = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = "domicile")[0][1]
                plus_grand_nbr_buts_encaisses_succ_exterieur = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = "ext√©rieur")[0][1]
                



                # R√©cup√©ration des dates de d√©but et de fin de la s√©rie de chacune des 2 √©quipes : 
                    
                date_debut_plus_grande_serie_domicile = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = 'domicile')[1][0]
                date_fin_plus_grande_serie_domicile = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = 'domicile')[1][1]
                duree_plus_grande_serie_domicile = date_fin_plus_grande_serie_domicile - date_debut_plus_grande_serie_domicile
                
                
                date_debut_plus_grande_serie_exterieur = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = 'ext√©rieur')[1][0]
                date_fin_plus_grande_serie_exterieur = plus_grosse_serie_buts_encaisses(data = df , journee = bouton_journee , equipe = 'ext√©rieur')[1][1]
                duree_plus_grande_serie_exterieur = date_fin_plus_grande_serie_exterieur - date_debut_plus_grande_serie_exterieur
                




                # Calcul de la diff√©rence de buts encaiss√©s successivement sans scorer EN FAVEUR DE L'USDH : 
                    
                # CAS 1 : l'USDH joue √† domicile : 
                    
                if equipe_domicile == "USDH" :
                
                    difference_plus_grand_nbr_buts_encaisses_succ = plus_grand_nbr_buts_encaisses_succ_domicile - plus_grand_nbr_buts_encaisses_succ_exterieur
                    
                
                
                    # R√©-√©criture de la diff√©rence de temps en t√™te :
                     
                    if difference_plus_grand_nbr_buts_encaisses_succ > 0 : 
                            
                        difference_plus_grand_nbr_buts_encaisses_succ = "+ " + str(difference_plus_grand_nbr_buts_encaisses_succ) + " buts"
                        
                        
                        
                    elif difference_plus_grand_nbr_buts_encaisses_succ < 0 : 
                        
                        difference_plus_grand_nbr_buts_encaisses_succ = "- " + str(abs(difference_plus_grand_nbr_buts_encaisses_succ)) + " buts"
                        
                        
                        
                
                
                
                    # On √©crit le delta de temps pass√© en t√™te par l'√©quipe √† domicile, car il s'agit de l'USDH :
                        
                    col3.metric(label = f"de la {np.round(date_debut_plus_grande_serie_domicile , 2)}√®me √† la {np.round(date_fin_plus_grande_serie_domicile , 2)}√®me ({np.round(duree_plus_grande_serie_domicile , 2)} min) :" , 
                                value = plus_grand_nbr_buts_encaisses_succ_domicile ,
                                delta = difference_plus_grand_nbr_buts_encaisses_succ , 
                                delta_color = "inverse")
                
                
                    col6.metric(label = f"de la {np.round(date_debut_plus_grande_serie_exterieur , 2)}√®me √† la {np.round(date_fin_plus_grande_serie_exterieur , 2)}√®me ({np.round(duree_plus_grande_serie_exterieur , 2)} min) :" , 
                                value = plus_grand_nbr_buts_encaisses_succ_exterieur , 
                                delta = " ")
                
                
                
                
                
                
                # CAS 2 : l'USDH joue √† l'ext√©rieur :
                    
                else : 
                    
                    difference_plus_grand_nbr_buts_encaisses_succ = plus_grand_nbr_buts_encaisses_succ_exterieur - plus_grand_nbr_buts_encaisses_succ_domicile
                    
                    
                    
                    # R√©-√©criture de la diff√©rence de temps en t√™te :
                     
                    if difference_plus_grand_nbr_buts_encaisses_succ > 0 : 
                            
                        difference_plus_grand_nbr_buts_encaisses_succ = "+ " + str(difference_plus_grand_nbr_buts_encaisses_succ) + " buts"
                        
                        
                        
                    elif difference_plus_grand_nbr_buts_encaisses_succ < 0 : 
                        
                        difference_plus_grand_nbr_buts_encaisses_succ = "- " + str(abs(difference_plus_grand_nbr_buts_encaisses_succ)) + " buts"
                        
                        
                        
                
                
                
                    # On √©crit le delta de temps pass√© en t√™te par l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                        
                    col3.metric(label = f"de la {np.round(date_debut_plus_grande_serie_domicile , 2)}√®me √† la {np.round(date_fin_plus_grande_serie_domicile , 2)}√®me ({np.round(duree_plus_grande_serie_domicile , 2)} min) :" , 
                                value = plus_grand_nbr_buts_encaisses_succ_domicile , 
                                delta = " ")
                
                
                    col6.metric(label = f"de la {np.round(date_debut_plus_grande_serie_exterieur , 2)}√®me √† la {np.round(date_fin_plus_grande_serie_exterieur , 2)}√®me ({np.round(duree_plus_grande_serie_exterieur , 2)} min) :" , 
                                value = plus_grand_nbr_buts_encaisses_succ_exterieur , 
                                delta = difference_plus_grand_nbr_buts_encaisses_succ  , 
                                delta_color = "inverse")
                
                
                
                
                for i in range(5) : 
                    
                    st.write("")
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                
                
                
                
                
                # Affichage du camembert / diagramme en barres des buts marqu√©s par joueur de chaque √©quipe :
                    
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1.75,1.15,2.3,1])
                
                
                st.write("")
                st.write("")
                
                bouton_graphique_buts = col4.selectbox("R√©partition des buts marqu√©s par joueur et par √©quipe :" , 
                                                       [" " , "camembert" , "b√¢tons"])
                
                
                


                
                if bouton_graphique_buts != " " :
                    
                    
                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2.5,1.15,2.3,1])
                    
                
                
                    if bouton_graphique_buts == "camembert" :
                    
                    
                        camembert_domicile = camembert_plotly(data = df , journee = bouton_journee , show_title = False , type_action = ["but" , "but 7m"] , equipe = "domicile" , showlegend = False)
                        camembert_exterieur = camembert_plotly(data = df , journee = bouton_journee , show_title = False , type_action = ["but" , "but 7m"] , equipe = "ext√©rieur" , showlegend = False)
                        
                       
                        col1.write(camembert_domicile)
                        
                        col5.write(camembert_exterieur)
                    
                    
                    
                    
                    else : 
                        
                        
                        batons_domicile = diagramme_en_barres_plotly(data = df , journee = bouton_journee , type_action = ["but" , "but 7m"] , equipe = "domicile")
                        batons_exterieur = diagramme_en_barres_plotly(data = df , journee = bouton_journee , type_action = ["but" , "but 7m"] , equipe = "ext√©rieur")
                        
                       
                        col1.write(batons_domicile)
                        
                        col5.write(batons_exterieur)
                        
                        
                        
                        
                        
                        
                        
                    for i in range(5) : 
                        
                        st.write("")
        
        
        
        
        
        
                    
        
        
        
        
        
                    # Affichage de GRAPHIQUES LIES AU SCORE :
                        
                        
                        
                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2.5,1.15,2.3,1])
                    
                        
                        
                    # Cr√©ation d'un bouton multi-choix permettant d'afficher un graphique li√© au score : 
                        
                    bouton_graphe_score = col4.selectbox("Choisissez un graphique √† afficher :" , 
                                                         [" " , 
                                                          "√©volution du score" , 
                                                          "√©volution de l'√©cart au score" , 
                                                          "r√©partition des buts par p√©riode" , 
                                                          "diff√©rentiel de buts par p√©riode"])
                    
                    
                    
                    
                    for i in range(3) : 
                        
                        st.write("")
                    
                    
                    
                    
                    # SI un choix de graphique a √©t√© effectu√© :
                        
                    if bouton_graphe_score != " " :
                    
                        

                        
                        
                        # CAS 1 : SI l'on souhaite afficher le graphique de l'√©volution du score des 2 √©quipes :
                            
                        if bouton_graphe_score == "√©volution du score" :
                            
                            
                            # Cr√©ation d'une figure vierge : 
                            
                            fig , ax = plt.subplots(figsize = (16,6.5))
                            
                            
                            
                            
                            evolution_score(fig = fig , ax = ax , data = df , 
                                            journee = bouton_journee , 
                                            show_title = True , afficher_points = False , 
                                            par_but_ou_par_minute = "par minute" , 
                                            colorer_gap = False , 
                                            text_color = "white");
                            
                            
                            st.write(fig)
 
                                
                            
                                                                                                                                 
                            
                            
   
                        
                        
                        
                        
                        # CAS 2 : SI l'on souhaite afficher le graphique de l'√©volution du GAP au score :
                            
                        elif bouton_graphe_score == "√©volution de l'√©cart au score" :
                            
                            # Cr√©ation d'une figure vierge : 
                            
                            fig , ax = plt.subplots(figsize = (16,6.5))
                            
                            
                            evolution_gap_score(fig = fig , ax = ax , data = df , journee = bouton_journee , 
                                                show_title = True , afficher_points = False , 
                                                par_but_ou_par_minute = "par minute");
                            
                            
                            st.write(fig)
                            
                            
                            
                            
                            
                        # CAS 3 : SI l'on souhaite afficher l'histogramme des buts :
                            
                        elif bouton_graphe_score == "r√©partition des buts par p√©riode" :
                            
                            

                        
                            # Ajout d'un bouton pour le choix du nombre tranches des 60 minutes √† d√©couper :
                            
                            bouton_tranches = col6.selectbox("D√©couper les 60 minutes de match par p√©riodes de ..... minutes :" , 
                                                             [" " , 1 , 2 , 4 , 5 , 6 , 10 , 12 , 15 , 20])
                            
                            
                            
                            for i in range(3) : 
                                
                                st.write("")
                                
                                
                                
                            
                            if bouton_tranches != " " :
                                
                                
                                # Cr√©ation d'une figure vierge : 
                            
                                fig , ax = plt.subplots(figsize = (16,6.5))
                                
                                
                                double_vertical_histogram(fig = fig , ax = ax , data = df , 
                                                          journee = bouton_journee , 
                                                          type_action = ["but" , "but 7m"] , 
                                                          show_title = False , 
                                                          text_color = "white" , 
                                                          nbr_tranches = 60//bouton_tranches);
                                
                                
                                st.write(fig)
                            
                            
                            
                            
                            
                            
                        # CAS 4 : SI l'on souhaite afficher l'histogramme des diff√©rentiels de buts par tranches de 5 minutes :
                            
                        elif bouton_graphe_score == "diff√©rentiel de buts par p√©riode" :
                            
                            # Cr√©ation d'une figure vierge : 
                            
                            fig , ax = plt.subplots(figsize = (16,6.5))
                            
                            
                            histogram_differentiel_buts(fig = fig , ax = ax , data = df , journee = bouton_journee , 
                                                        show_title = False);
                            
                            
                            
                            st.write(fig)
                            
                            
                    
                    
                    
                    
                    
                            
                        
                        
                    
                    
                    
                    
                        for i in range(10) : 
                            
                            st.write("")
                    
                    

                    
                        st.write("-------------------------------------------------------------------------------------")
                    
        
        
        
        
        
        
                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
                        # PARTIE 2 : m√©triques / graphiques li√©s √† la SITUATION NUMERIQUE :
                        
                        
                        st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es √† la situation num√©rique.</h1>",
                                    unsafe_allow_html = True)  
                        
                        
                        st.write("-------------------------------------------------------------------------------------")
                        
                    
                    
                    
                        for i in range(3) : 
                            
                            st.write("")
            
            



                        # Affichage de la DROITE GRAPHIQUE repr√©sentant les p√©riodes de sup√©riorit√© / √©galit√© / inf√©riorit√© num√©rique de l'USDH lors de CE MATCH : 
                            
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,1,1,2,1,1,1])
                        
                        
                        col4.write("D√©coupage des 60 minutes de match selon la situation num√©rique de l'USDH :")
                        
                        
                        
                        for i in range(3) : 
                            
                            st.write("")
                        
                            
                        
                        fig , ax = plt.subplots(figsize = (16,6))



                        droite_sup_inf_numeriques_equipe(fig , ax , data = df , journee = bouton_journee , 
                                                         equipe = "USDH" , 
                                                         afficher_scores = True , 
                                                         afficher_differentiels = True ,
                                                         afficher_bilan = True , 
                                                         show_title = False , 
                                                         text_color = "white")

                        
                        
                        
                        
                        
                    
                        st.write(fig)
                        
                        
                        
                        
                        for i in range(12) : 
                                
                            st.write("")
                            
                            
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        # M√©trique n¬∞6-7 : Affichage du nombre d'AVERTISSEMENTS / 2MIN re√ßus PAR LES 2 EQUIPES : 
                            
                            
                        for punition in ["avertissement" , "2min"] :
                            
                            
                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                              
                            
                            
                            if punition == "avertissement" :
                                
                                col4.write(f"nombre d'{punition}s re√ßus :") 
                                
                                
                            else:  
                                
                                col4.write(f"nombre de {punition} re√ßus :")
                                
                            
                            
                            # R√©cup√©ration du nbr de punitions de ce type re√ßues par l'√©quipe √† domicile et de l'√©quipe √† l'ext√©rieur :
                                    
                            nbr_punitions_recues_domicile = nbr_punitions(data = df , journee = bouton_journee , type_punition = punition , equipe = "domicile")
                            nbr_punitions_recues_exterieur = nbr_punitions(data = df , journee = bouton_journee , type_punition = punition , equipe = "ext√©rieur")
            
            
    
            
                            # Calcul de la diff√©rence de punitions re√ßues EN FAVEUR DE L'USDH : 
                                
                            # CAS 1 : l'USDH joue √† domicile : 
                                
                            if equipe_domicile == "USDH" :
                            
                                difference_nbr_punitions = nbr_punitions_recues_domicile - nbr_punitions_recues_exterieur
                                
                            
                            
                                # R√©-√©criture de la diff√©rence de punitions :
                                 
                                if difference_nbr_punitions > 0 : 
                                        
                                    difference_nbr_punitions = "+ " + str(difference_nbr_punitions) + f" {punition}"
                                    
                                    
                                    
                                elif difference_nbr_punitions < 0 : 
                                    
                                    difference_nbr_punitions = "- " + str(abs(difference_nbr_punitions)) + f" {punition}"
                                    
                                    
                                    
                            
                            
                            
                                # On √©crit le delta de cartons jaunes sous l'√©quipe √† domicile, car il s'agit de l'USDH :
                                    
                                col3.metric(label = "" , 
                                            value = nbr_punitions_recues_domicile ,
                                            delta = difference_nbr_punitions , 
                                            delta_color = "inverse")
                            
                            
                                col6.metric(label = "" , 
                                            value = nbr_punitions_recues_exterieur , 
                                            delta = " ")
                            
                            
                            
                            
                            
                            
                            # CAS 2 : l'USDH joue √† l'ext√©rieur :
                                
                            else : 
                                
                                difference_nbr_punitions = nbr_punitions_recues_exterieur - nbr_punitions_recues_domicile
                                
                                
                                
                                # R√©-√©criture de la diff√©rence de punitions :
                                 
                                if difference_nbr_punitions > 0 : 
                                        
                                    difference_nbr_punitions = "+ " + str(difference_nbr_punitions) + f" {punition}"
                                    
                                    
                                    
                                elif difference_nbr_punitions < 0 : 
                                    
                                    difference_nbr_punitions = "- " + str(abs(difference_nbr_punitions)) + f" {punition}"
                                    
                                    
                                    
                            
                            
                            
                                # On √©crit le delta de punitions sous l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                                    
                                col3.metric(label = "" , 
                                            value = nbr_punitions_recues_domicile , 
                                            delta = " ")
                            
                            
                                col6.metric(label = "" , 
                                            value = nbr_punitions_recues_exterieur , 
                                            delta = difference_nbr_punitions  , 
                                            delta_color = "inverse")
                            
                            
                            
                            
                            
                            for i in range(5) : 
                                
                                st.write("")
                                
                                
                                
                                
                            
                            
                            
                            
                            
                            
                        # Affichage de l'histogramme des 2min re√ßus par p√©riode :
                            
                        
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                        
                        
                        for i in range(3) : 
                            
                            st.write("")
                            
                            
                        
                    
                        col4.write("R√©partition des 2min re√ßus par p√©riode :")
                        
                        
                        
                        
                        
                        
                        # Ajout d'un bouton pour le choix du nombre tranches des 60 minutes √† d√©couper :
                        
                        
                        bouton_tranches_bis = col6.selectbox("D√©couper les 60 minutes du match par p√©riodes de ..... minutes :" , 
                                                             [" " , 1 , 2 , 4 , 5 , 6 , 10 , 12 , 15 , 20])
                        
                        
                        
                        for i in range(3) : 
                            
                            st.write("")
                            
                            
                            
                            
                        
                        if bouton_tranches_bis != " " :
                            
                            
                            fig , ax = plt.subplots(figsize = (16,8))
                        
                            
                            
                            double_vertical_histogram(fig = fig , ax = ax , data = df , 
                                                      journee = bouton_journee , 
                                                      type_action = ["2min"] , 
                                                      show_title = False , 
                                                      text_color = "white" , 
                                                      nbr_tranches = 60//bouton_tranches_bis);
                    
                    
                    
                        
                        
                            st.write(fig)
                        
                        
                        
                            for i in range(10) : 
                                
                                st.write("")
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                        
                            # Affichage du CAMEMBERT des EXCLUSIONS re√ßues par joueur de chaque √©quipe : 
                                
                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                            
                            
                            col4.write("R√©partition des 2min re√ßus par joueur :")
                            
                            
    
                            
                            # R√©cup√©ration du nbr d'exclusions pour 2min re√ßues par l'√©quipe √† domicile et par l'√©quipe √† l'ext√©rieur lors de match :
                                        
                            nbr_exclusions_recues_domicile = nbr_punitions(data = df , journee = bouton_journee , type_punition = "2min" , equipe = "domicile")
                            nbr_exclusions_recues_exterieur = nbr_punitions(data = df , journee = bouton_journee , type_punition = "2min" , equipe = "ext√©rieur")
            
                            
                            
                            
                            # SI l'√©quipe jouant √† domicile a re√ßu AU MOINS 1 exclusion durant ce match : 
                                
                            if nbr_exclusions_recues_domicile != 0 :
                                
                                
                                
                                # ALORS, dans ce cas, on dessine le camembert des exclusions de cette √©quipe :
                                
                                camembert_exclusions_domicile = camembert_plotly(data = df , journee = bouton_journee , 
                                                                                 show_title = False , 
                                                                                 type_action = ["2min"] , 
                                                                                 equipe = "domicile" , 
                                                                                 showlegend = False)
                                
                                
                            
                                col1.write(camembert_exclusions_domicile)
                                
                                
                                
                                
                                
                                
                            
                            # SI l'√©quipe jouant √† l'ext√©rieur a re√ßu AU MOINS 1 exclusion durant ce match :
                                
                            if nbr_exclusions_recues_exterieur != 0 :
                            
                                
                                # ALORS, dans ce cas, on dessine le camembert des exclusions de cette √©quipe :
                                
                                camembert_exclusions_exterieur = camembert_plotly(data = df , journee = bouton_journee , 
                                                                                  show_title = False , 
                                                                                  type_action = ["2min"] , 
                                                                                  equipe = "ext√©rieur" , 
                                                                                  showlegend = False)
                                 
                                
                            
                                col5.write(camembert_exclusions_exterieur)
                                
                                
                            
                            
                            
                            for i in range(3) : 
                                
                                st.write("")
                                
                            
                            
                            
                            
                            
                            
                            
                            
                             
                            
                            
                            
                            
      
        
      
                            
                            
                            
                            
                            
                            
                            # Analyse des p√©riodes de SUPERIORITE / INFERIORITE NUMERIQUE de chaque √©quipe :
                                    
                                
                            for situation_numerique in ["sup√©riorit√© num√©rique" , "inf√©riorit√© num√©rique"] :
                                
                                
                                
                                st.write("------------------------------------------------------------------------")
                                    
                                    
                                    
                                if situation_numerique == "sup√©riorit√© num√©rique" : 
                                    
                                    st.markdown(f"<h1 style='text-align: center; color: white;'>P√©riodes de {situation_numerique} de l'USDH.</h1>",
                                                     unsafe_allow_html = True)   
                                    
                                    
                                    
                                else :    # situation_numerique == "inf√©riorit√© num√©rique" : 
                                    
                                    st.markdown(f"<h1 style='text-align: center; color: white;'>P√©riodes d'{situation_numerique} de l'USDH.</h1>",
                                                     unsafe_allow_html = True)   
                                    
                                    
                                    
                                
                                
                                
                                for i in range(5) : 
                                    
                                    st.write("")
                                    
                                    
                                    
                                
                                
                                
                                
                                
                                # M√©triques n¬∞8 + 13 : Nombre de p√©riodes jou√©es en 'situation_numerique' par les 2 √©quipes :
                                

                            
                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                            
                                col4.write(f"Nombre de fois o√π l'√©quipe s'est retrouv√©e en {situation_numerique} :")
                                
                                
                                
                                
                                    
                                # On r√©cup√®re le nombre de p√©riodes jou√©es en 'situation_numerique' par l'USDH et par ses adversaires lors de cette rencontre :
                                
                               
                                # CAS 1 : si l'√©quipe jouant √† domicile est l'USDH = celle jouant √† l'ext√©rieur est son adversaire :
                                    
                                if equipe_domicile == "USDH" : 
                                    
                                    if situation_numerique == "sup√©riorit√© num√©rique" : 
                                    
                                        nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "domicile")
                                        nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "ext√©rieur")
                                            
                                            
                                   
                                    else :   # situation_numerique == "inf√©riorit√© num√©rique"
                                    
                                    
                                        nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "ext√©rieur")
                                        nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "domicile")
                                
                                
                                
                                
                                
                                
                                # CAS 2 : si l'√©quipe jouant √† l'ext√©rieur st l'USDH = celle jouant √† domicile est son adversaire :
                                    
                                else :   # equipe_ext == "USDH" : 
                                    
                                    
                                    if situation_numerique == "sup√©riorit√© num√©rique" : 
                                    
                                    
                                        nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "ext√©rieur")
                                        nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "domicile")
                                        
                                    
                                    else :   # situation_numerique == "inf√©riorit√© num√©rique"
                                    
                                    
                                        nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "domicile")
                                        nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = bouton_journee , equipe = "ext√©rieur")
                                    
                                    
                                    
                                        

                                
                                # Calcul du diff√©rentiel de p√©riodes jou√©es en 'situation_numerique' par les 2 √©quipes : 
                                    
                                differentiel_periodes_situation_numerique = nbr_periodes_situation_numerique_USDH_journee - nbr_periodes_situation_numerique_adv_journee
                                
                                
                                # Gestion de l'affichage du diff√©rentiel suivant son signe : 
                                    
                                if differentiel_periodes_situation_numerique > 0 :
                                    
                                    differentiel_periodes_situation_numerique = "+ " + str(np.round(differentiel_periodes_situation_numerique , 2)) + " p√©riodes"
                                    
                                    
                                    
                                    
                                elif differentiel_periodes_situation_numerique == 0 : 
                                    
                                    differentiel_periodes_situation_numerique = str(differentiel_periodes_situation_numerique) + " p√©riodes"
                                    
                                    
                                    
                                    
                                else : 
                                    
                                    differentiel_periodes_situation_numerique = "- " + str(abs(np.round(differentiel_periodes_situation_numerique , 2))) + " p√©riodes"
                                    
                                
                                
                                
                                
                                    
                                col3.metric(label = "" , 
                                            value = np.round(nbr_periodes_situation_numerique_USDH_journee , 2) ,
                                            delta = differentiel_periodes_situation_numerique)
                            
                            
                                col6.metric(label = "" , 
                                            value = np.round(nbr_periodes_situation_numerique_adv_journee , 2))
                            
                            
                            
                            
                            
                                for i in range(3) : 
                            
                                    st.write("")
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                # M√©trique n¬∞9 + 14 : temps pass√© en 'situation_numerique' par les 2 √©quipes :
                                

                            
                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                            
                                col4.write(f"Temps durant lequel l'√©quipe a jou√© en {situation_numerique} (en minutes) :")
                                
                                
                                
                                
                                    
                                # On r√©cup√®re le temps pass√© en 'situation_numerique' par l'USDH et par ses adversaires tout au long de la saison :
                                
                                temps_situation_numerique_USDH = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                     situation = situation_numerique).loc[int(bouton_journee[-1])-1]
                                    
                                temps_situation_numerique_adv = S_durees_situation_numerique_saison(data = df , equipe = "adversaire" , 
                                                                                                    situation = situation_numerique).loc[int(bouton_journee[-1])-1]
                                    
                                    
                                    
                                    
                                
                                    
                                    
                                    
                                    
                                
                                # Calcul du diff√©rentiel de temps pass√© en 'situation_numerique' par les 2 √©quipes : 
                                    
                                differentiel_temps_situation_numerique = temps_situation_numerique_USDH - temps_situation_numerique_adv
                                
                                
                                
                                # Gestion de l'affichage du diff√©rentiel suivant son signe : 
                                    
                                if differentiel_temps_situation_numerique > 0 :
                                    
                                    differentiel_temps_situation_numerique = "+ " + str(np.round(differentiel_temps_situation_numerique , 2)) + " minutes"
                                    
                                    
                                    
                                    
                                elif differentiel_temps_situation_numerique == 0 : 
                                    
                                    differentiel_temps_situation_numerique = str(differentiel_temps_situation_numerique) + " minutes"
                                    
                                    
                                    
                                    
                                else : 
                                    
                                    differentiel_temps_situation_numerique = "- " + str(abs(np.round(differentiel_temps_situation_numerique , 2))) + " minutes"
                                    
                                
                                
                                
                                
                                    
                                col3.metric(label = "" , 
                                            value = np.round(temps_situation_numerique_USDH , 2) ,
                                            delta = differentiel_temps_situation_numerique)
                            
                            
                                col6.metric(label = "" , 
                                            value = np.round(temps_situation_numerique_adv , 2))
                            
                            
                            
                            
                            
                            
                            
                                for i in range(7) : 
                            
                                    st.write("")
                                    
                                    
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                # M√©trique n¬∞10-11-12 + 15-16-17 : Affichage du BILAN de l'USDH sur SES PROPRES PERIODES de 'situation_numerique' : 
                            
                                    
                                # SI l'USDH a jou√© AU MOINS 1 FOIS dans cette situation num√©rique lors de ce match : 
                                    
                                if nbr_periodes_situation_numerique_USDH_journee > 0 :
                                    
                                    
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,3.15,3.15,2.5,1.15,1,4])
                                            
                                    col4.write(f"COMPARATIF LORSQUE l'USDH JOUE EN {situation_numerique.upper()} :") 
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                        
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    # Cr√©ation d'un bouton pour le choix de l'unit√© des buts marqu√©s / encaiss√©s / diff√©rentiels sur les sup√©riorit√©s num√©riques lors de ce match : 
                                     
                                        
                                    bouton_unite_bilan_situation_numerique = col7.selectbox("Bilan exprim√© en :" , 
                                                                                            [" " , 
                                                                                             "total" , 
                                                                                             f"/ minute jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" , 
                                                                                             f"/ p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}"])
                                    
                                    
                                    st.write("")
                                    st.write("")
                                    
                                    
                                    
                                    
                                    
                                    if bouton_unite_bilan_situation_numerique != " " :
                                        
                                        
                                        
                                        L_delta_colors = ["normal" , "inverse" , "normal"]
                                            
                                            
                                            
                                        
                                        for type_bilan , delta_color in zip(["buts marqu√©s" , "buts encaiss√©s" , "diff√©rentiel de buts"] , L_delta_colors) :
                                            
                                            
                                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                            
                                        
                                            
                                            
                                            # R√©cup√©ration du bilan du type renseign√© de l'√©quipe √† domicile lorsqu'elle joue en 'situation_numerique', et idem pour l'√©quipe √† l'ext√©rieur :
                                             
                                            if bouton_unite_bilan_situation_numerique == "total" :
                                                
                                                
                                                
                                                # Bilan de l'USDH dans cette situation num√©rique : 
                                                    
                                                buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                        equipe = "USDH" , 
                                                                                                                        situation = situation_numerique , 
                                                                                                                        type_bilan = type_bilan).loc[int(bouton_journee[-1])-1]
                                             
                                                
                                                
                                                
                                                # Bilan de ses adversaires dans cette m√™me situation num√©rique : lorsque l'USDH joue en sup√©riorit√© (resp. en inf√©riorit√©) ==> son adversaire joue quant √† lui en inf√©riorit√© (resp. en sup√©riorit√©) : 
                                                
                                                
                                                if situation_numerique == "sup√©riorit√© num√©rique" :
                                                    
                                                
                                                    buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                           equipe = "adversaire" , 
                                                                                                                           situation = "inf√©riorit√© num√©rique" , 
                                                                                                                           type_bilan = type_bilan).loc[int(bouton_journee[-1])-1]
                                                
                                                
                                                
                                                
                                                else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                
                                                
                                                    buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                           equipe = "adversaire" , 
                                                                                                                           situation = "sup√©riorit√© num√©rique" , 
                                                                                                                           type_bilan = type_bilan).loc[int(bouton_journee[-1])-1]
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                unite = f" {type_bilan}"
                                                
                                                
                                                
                                                
                                                col4.write(f"{type_bilan} (quand l'USDH joue en {situation_numerique}) :") 
                                                    
                                                    
                                               
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                            elif bouton_unite_bilan_situation_numerique == f"/ minute jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" :
                                                
                                                
                                                
                                                # Calcul du temps pass√© en 'situation_numerique' par l'USDH lors de cette rencontre : 
                                                    
                                                temps_situation_numerique_USDH = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                                     situation = situation_numerique).loc[int(bouton_journee[-1])-1]
                                                
    
                                                
                                                
                                                
                                                
                                                # SI l'USDH A PASSE DU TEMPS EN 'situation_numerique' (pour √©viter une division par 0) : 
                                                
                                                if temps_situation_numerique_USDH > 0 :
                                                    
                                                    
                                                    # Bilan USDH :
                                                    
                                                    buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = situation_numerique , type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / temps_situation_numerique_USDH
                                                    
                                                    
                                                    
                                                    # Bilan adversaires : 
                                                        
                                                    if situation_numerique == "sup√©riorit√© num√©rique" :
                                                        
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "inf√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / temps_situation_numerique_USDH
                                                    
                                                    
                                                    
                                                    
                                                    else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                    
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "sup√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / temps_situation_numerique_USDH
                                                    
                                                        
                                                
                                                
                                                
                                                # SINON, si l'USDH a pass√© 0 seconde √† jouer en sup√©riorit√© cette saison :
                                                
                                                else : 
                                                    
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = 0
                                                    
                                                    
                                                    
                                                    # Bilan adversaires : 
                                                    
                                                    buts_type_situation_numerique_adv = 0
                                                    
                                                    
                                                
                                                
    
                                                
                                                
                                                unite = f" {type_bilan} / min de {situation_numerique.split(sep = ' ')[0][0:4]}."
                                                
                                                
                                                col4.write(f"{type_bilan} (par minute que l'USDH a jou√© en {situation_numerique}) :") 
                                                    
                                                    
                                               
                                            
                                         
                                            
                                         
                                            
                                         
                                         
                                            elif bouton_unite_bilan_situation_numerique == f"/ p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" :
                                                
                                                
                                                
                                                
                                                # SI l'USDH A JOUE EN 'situation_numerique' (pour √©viter une division par 0) : 
                                                
                                                if nbr_periodes_situation_numerique_USDH_journee > 0 :
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = situation_numerique , type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / nbr_periodes_situation_numerique_USDH_journee
                                                
                                                
                                                
                                                
                                                    # Bilan adversaires : 
                                                        
                                                    
                                                    if situation_numerique == "sup√©riorit√© num√©rique" :
                                                        
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "inf√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / nbr_periodes_situation_numerique_USDH_journee
                                                    
                                                    
                                                    
                                                    
                                                    else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                    
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "sup√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).loc[int(bouton_journee[-1])-1] / nbr_periodes_situation_numerique_USDH_journee
                                                    
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        
                                                
                                                # SINON, si l'USDH a pass√© 0 seconde √† jouer en 'situation numerique' cette saison :
                                                
                                                else : 
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = 0
                                                    
                                                    
                                                    
                                                    # Bilan adversaires :
                                                    
                                                    buts_type_situation_numerique_adv = 0
                                                    
                                                    
                                                
    
                                               
                                                
                                                
                                                
                                                unite = f" {type_bilan} / p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0][0:4]}."
                                                
                                                
                                                if type_bilan in ["buts marqu√©s" , "buts encaiss√©s"] :
                                                
                                                    col4.write(f"{type_bilan} (par p√©riode que l'USDH a jou√© en {situation_numerique.split(sep = ' ')[0][0:4]}) :") 
                                                    
                                                    
                                                else : 
                                                    
                                                    col4.write("Diff√©rentiel de buts (par p√©riode que l'USDH a jou√© en {situation_numerique.split(sep = ' ')[0][0:4]}) :")
                                                
                                         
                                            
                                         
                                            
                                         
                                            
                                         
                                 
                                            # Calcul de la diff√©rence de bilan sur les 'situation_numerique' EN FAVEUR DE L'USDH : 
                                                    
                                                
                                            difference_type_buts_situation_numerique = np.round(buts_type_situation_numerique_USDH - buts_type_situation_numerique_adv , 2)
                                                
                                            
                                            
                                            
                                            # R√©-√©criture de la diff√©rence bilan sur les 'situation_numerique' :
                                             
                                            if difference_type_buts_situation_numerique > 0 : 
                                                    
                                                difference_type_buts_situation_numerique = "+ " + str(difference_type_buts_situation_numerique) + unite
                                                
                                                
                                                
                                            elif difference_type_buts_situation_numerique < 0 : 
                                                
                                                difference_type_buts_situation_numerique = "- " + str(abs(difference_type_buts_situation_numerique)) + unite
                                                
                                                
                                                    
                                            
                                            
                                            
                                            # On √©crit le delta de bilan en 'situation_numerique' sous l'USDH (√† gauche) :
                                                
                                            col3.metric(label = "" , 
                                                        value = np.round(buts_type_situation_numerique_USDH , 2) ,
                                                        delta = str(difference_type_buts_situation_numerique) , 
                                                        delta_color = delta_color)
                                        
                                        
                                        
                                            col6.metric(label = "" , 
                                                        value = np.round(buts_type_situation_numerique_adv , 2) , 
                                                        delta = " ")
                                        
                                            
                                            
    
                                            
                                            
                                            for i in range(3) : 
                                                
                                                st.write("")
                                            
                                            
                                            
                                            
                                        
                                    
                                for i in range(5) : 
                                    
                                    st.write("")
                                    
                                    
                                    
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                            # Analyse des p√©riodes d'EGALITE NUMERIQUE des 2 √©quipes : 
                                
                                
                            if bouton_unite_bilan_situation_numerique != " " :
                             
                            
                        
                                st.write("------------------------------------------------------------------------")
                                    
                                    
                                    
                                    
                                st.markdown("<h1 style='text-align: center; color: white;'>P√©riodes d'√©galit√© num√©rique.</h1>",
                                                 unsafe_allow_html = True)   
                                    
                                
                                
                            
                            
                            
                                for i in range(5) : 
                                    
                                    st.write("")
                                    
                                    
                                    
                                

                                
                                
                                
                                
                                # M√©trique n¬∞18 : temps pass√© √† √©galit√© num√©rique par les 2 √©quipes :
                            

                        
                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                            
                                col4.write("Temps pass√© √† √©galit√© num√©rique (en minutes) :")
                                
                                
                                
                                
                                    
                                # On r√©cup√®re le temps pass√© √† √©galit√© num√©rique par l'USDH et par ses adversaires tout au long de la saison :
                                
                                temps_egalite_num = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                        situation = "√©galit√© num√©rique").loc[int(bouton_journee[-1]) -1]
                                    
                                   
                                    
                                    
                                    
                                
                                
                                
                                    
                                col3.metric(label = "" , 
                                            value = np.round(temps_egalite_num , 2))
                            
                            
                                col6.metric(label = "" , 
                                            value = np.round(temps_egalite_num , 2))
                            
                            
                            
                            
                            
                            
                            
                                for i in range(7) : 
                            
                                    st.write("")
                                    
                                    
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                # M√©trique n¬∞19-20-21 : Affichage du BILAN de chaque √©quipe sur LES PERIODES (communes) d'EGALITE NUMERIQUE DES 2 EQUIPES : 
                            

                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                        
                                col4.write("COMPARATIF DES 2 EQUIPES LORSQU'ELLES JOUENT A EGALITE NUMERIQUE :") 
                                
                                
                                
                                for i in range(3) : 
                                    
                                    st.write("")
                                
                                
                                
                                
                                
                                
                                # Cr√©ation d'un bouton pour le choix de l'unit√© des buts marqu√©s / encaiss√©s / diff√©rentiels sur les √©galit√©s num√©riques : 
                                 
                               
                                bouton_unite_bilan_egalite = col6.selectbox("Chiffres exprim√©s en :" , 
                                                                            [" " , 
                                                                             "total" , 
                                                                             "/ minute jou√©e √† √©galit√© num"])

                                    
                                
                                

                                
                                st.write("")
                                st.write("")
                                
                                
                                
                                
                                
                                if bouton_unite_bilan_egalite != " " :
                                    
                                    
                                    for type_bilan , delta_color in zip(["buts marqu√©s" , "buts encaiss√©s" , "diff√©rentiel de buts"] , ["normal" , "inverse" , "normal"]) :
                                        
                                        
                                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                                        
                                    
                                        
                                        
                                        # R√©cup√©ration du bilan du type renseign√© de l'√©quipe √† domicile lorsqu'elle joue √† √©galit√© num√©rique, et idem pour l'√©quipe √† l'ext√©rieur :
                                         
                                        if bouton_unite_bilan_egalite == "total" :
                                            
                                            
                                            
                                            # Bilan de l'USDH : 
                                                
                                            buts_type_a_ega_USDH = S_bilan_situation_numerique_saison(data = df , 
                                                                                                      equipe = "USDH" , 
                                                                                                      situation = "√©galit√© num√©rique" , 
                                                                                                      type_bilan = type_bilan).loc[int(bouton_journee[-1]) -1]
                                         
                                            
                                            
                                            
                                            # Bilan de ses adversaires : 
                                                
                                            buts_type_a_ega_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                     equipe = "adversaire" , 
                                                                                                     situation = "√©galit√© num√©rique" , 
                                                                                                     type_bilan = type_bilan).loc[int(bouton_journee[-1]) -1]
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            unite = f" {type_bilan}"
                                            
                                            
                                            
                                            
                                            col4.write(f"{type_bilan} sur les p√©riodes d'√©galit√© num√©rique :") 
                                                
                                                
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                        elif bouton_unite_bilan_egalite == "/ minute jou√©e √† √©galit√© num" :
                                            
                                            
                                            
                                            # Calcul du temps pass√© √† √©galit√© num√©rique par les 2 √©quipes depuis le d√©but de la saison (temps total) : 
                                                
                                            temps_egalite_num = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                    situation = "√©galit√© num√©rique").loc[int(bouton_journee[-1]) -1]
                                            
                                            
                                            
                                            
                                            
                                            
                                            # SI les 2 √©quipes ONT JOUES A EGALITE NUMERIQUE cette saison (pour √©viter une division par 0) : 
                                            
                                            if temps_egalite_num > 0 :
                                                
                                                buts_type_a_ega_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = "√©galit√© num√©rique" , type_bilan = type_bilan).loc[int(bouton_journee[-1]) -1] / temps_egalite_num
                                                buts_type_a_ega_adv = S_bilan_situation_numerique_saison(data = df , equipe = "adversaire" ,  situation = "√©galit√© num√©rique" , type_bilan = type_bilan).loc[int(bouton_journee[-1]) -1] / temps_egalite_num
                                            
                                            
                                            
                                            
                                            # SINON, si l'USDH a pass√© 0 seconde √† jouer en sup√©riorit√© cette saison :
                                            
                                            else : 
                                                
                                                buts_type_a_ega_USDH = 0
                                                buts_type_a_ega_adv = 0
                                                
                                            
                                            
                                            
                                            

                                            
                                            
                                            unite = f" {type_bilan} / min √† √©galit√© num."
                                            
                                            
                                            if type_bilan in ["buts marqu√©s" , "buts encaiss√©s"] :
                                            
                                                col4.write(f"{type_bilan} / minute que l'√©quipe a jou√© √† √©galit√© num√©rique :") 
                                                
                                                
                                            else : 
                                                
                                                col4.write("Diff√©rentiel de buts / minute que l'√©quipe a jou√© √† √©galit√© num√©rique :")
                                            
                                            
                                     
                                        

                             
                                        # Calcul de la diff√©rence de bilan sur les √©galit√©s num√©riques EN FAVEUR DE L'USDH : 
                                                
                                            
                                        difference_type_buts_ega = np.round(buts_type_a_ega_USDH - buts_type_a_ega_adv , 2)
                                            
                                        
                                        
                                        # R√©-√©criture de la diff√©rence bilan sur les √©galit√©s nums :
                                         
                                        if difference_type_buts_ega > 0 : 
                                                
                                            difference_type_buts_ega = "+ " + str(difference_type_buts_ega) + unite
                                            
                                            
                                            
                                        elif difference_type_buts_ega < 0 : 
                                            
                                            difference_type_buts_ega = "- " + str(abs(difference_type_buts_ega)) + unite
                                            
                                            
                                                
                                        
                                        
                                        
                                        # On √©crit le delta de bilan en sup√©riorit√© sous l'USDH (√† gauche) :
                                            
                                        col3.metric(label = "" , 
                                                    value = np.round(buts_type_a_ega_USDH , 2) ,
                                                    delta = str(difference_type_buts_ega) , 
                                                    delta_color = delta_color)
                                    
                                    
                                    
                                        col6.metric(label = "" , 
                                                    value = np.round(buts_type_a_ega_adv , 2) , 
                                                    delta = " ")
                                    
                                        
                                        

                                        
                                        
                                        for i in range(3) : 
                                            
                                            st.write("")
                                            
                                            
                                            
                                            
                                        
                                    
                                    for i in range(5) : 
                                        
                                        st.write("")
                                        
                                        
                                     
                                        
                                     
                                    for i in range(7) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    st.write("----------------------------------------------------------------------")
                                    
                                    
                                    
                                
                                
                                
                                
                                
                                
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
      
        
      
    
    
    
                                    # PARTIE 3 : m√©triques / graphiques li√©s √† la DYNAMIQUE DE JEU :
                                
                                
                                    st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es √† la dynamique de jeu.</h1>",
                                                unsafe_allow_html = True)  
                                    
                                    
                                    st.write("-------------------------------------------------------------------------------------")
                                    
                                
                                
                                
                                    for i in range(3) : 
                                        
                                        st.write("")
                                    
                                    
                                    
                                    
                                    
                                    st.markdown("<h1 style='text-align: center; color: white;'>A) Dans les moments cruciaux.</h1>",
                                                unsafe_allow_html = True)
                                    
                                    
                                    
                                    
                                    for i in range(2) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    st.write("==> Pour √©valuer la capacit√© des 2 √©quipes √† √™tre pr√©sente dans les moments cruciaux d'un match.")    
                                       
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                    
                                    
                                        
                                        
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    # M√©trique n¬∞11-12-13-14-15 : Affichage de la dynamique DES 2 EQUIPES dans les p√©riodes cruciales du match (d√©but de match, avant mi-temps, retour de mi-temps et money time) :
                        
                                    L_dates = [10 , 30 , 35 , 35 , 60]               # la liste des dates
                                    L_x_dernieres_minutes = [10 , 5 , 5 , 10 , 10]   # la liste des x derni√®res minutes √† regarder pr√©c√©dant chaque date de la liste ci-dessus
                                    
                                    
                                    
                                    
                                    # Pour chaque p√©riode cruciale du match :
                                        
                                    for date , x_dernieres_minutes in zip(L_dates , L_x_dernieres_minutes) :
                                        
                                        
                                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                                        
                                        
                                        
                                        # CAS 1 : SI l'on regarde la dynamique en DEBUT DE MATCH :
                                        
                                        if date == 10 :
                                                    
                                            col4.write("Dynamique d√©but de match (0-10√®me minute) :") 
                                            
                                        
                                        
                                        
                                        # CAS 2 : SI l'on regarde la dynamique d'AVANT MI-TEMPS :
                                        
                                        elif date == 30 : 
                                            
                                            col4.write("Dynamique avant mi-temps (25-30√®me minute)")
                                            
                                            
                                        
                                        
                                        elif date == 35 : 
                                            
                                            
                                            # CAS 3 : SI l'on regarde la dynamique au RETOUR DE MATCH :
                                            
                                            if x_dernieres_minutes == 5 :
                                            
                                                col4.write("Dynamique retour de mi-temps (30-35√®me minute) :")
                                                
                                             
                                                
                                             
                                            # CAS 4 : SI l'on regarde la dynamique AUTOUR DE LA MI-TEMPS (5 minutes avant + 5 minutes au retour) :
                                            
                                            else : 
                                            
                                                col4.write("Dynamique aux alentours de la mi-temps (25-35√®me minute) :")    
                                            
                                            
                                            
                                           
                                            
                                        # CAS 5 : SI l'on regarde la dynamique dans le MONEY TIME :
                                            
                                        else : 
                                            
                                            col4.write("Dynamique money-time (50-60√®me minute) :")
                                            
                                            
                                        
                                        
                                        # R√©cup√©ration du nombre de buts inscrits par l'√©quipe √† domicile et par l'√©quipe √† l'ext√©rieur dans cette p√©riode cruciale du match :
                                                
                                            
                                        nbr_buts_periode_cruciale_domicile = dynamique_buts_marques(data = df , 
                                                                                                    date = date , 
                                                                                                    x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                    journee = bouton_journee , 
                                                                                                    equipe = "domicile")
                                        
                                        
                                        nbr_buts_periode_cruciale_exterieur = dynamique_buts_marques(data = df , 
                                                                                                     date = date , 
                                                                                                     x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                     journee = bouton_journee , 
                                                                                                     equipe = "ext√©rieur")
                                        
                                    
                                        
                             
                                
                                        # Calcul de la diff√©rence de buts marqu√©s EN FAVEUR DE L'USDH dans cette p√©riode de jeu cruciale : 
                                                
                                            
                                        # CAS 1 : l'USDH joue √† domicile : 
                                            
                                        if equipe_domicile == "USDH" :
                                        
                                            difference_nbr_buts_periode_cruciale = nbr_buts_periode_cruciale_domicile - nbr_buts_periode_cruciale_exterieur
                                            
                                        
                                        
                                            # R√©-√©criture de la diff√©rence de buts marqu√©s calcul√©e ci-dessus :
                                             
                                            if difference_nbr_buts_periode_cruciale > 0 : 
                                                    
                                                difference_nbr_buts_periode_cruciale = "+ " + str(difference_nbr_buts_periode_cruciale) + " buts marqu√©s"
                                                
                                                
                                                
                                                
                                            elif difference_nbr_buts_periode_cruciale < 0 : 
                                                
                                                difference_nbr_buts_periode_cruciale = "- " + str(abs(difference_nbr_buts_periode_cruciale)) + " buts marqu√©s"
                                                
                                                
                                                
                                        
                                        
                                        
                                            # On √©crit le delta de buts marqu√©s sous l'√©quipe √† domicile, car il s'agit de l'USDH :
                                                
                                            # SI on NE regarde PAS le d√©but de match ==> on peut, en plus de la dynamique, afficher le score au d√©but de la p√©riode :
                                            
                                            if date != 10 :
                                                
                                                score_USDH_debut_periode_cruciale = score_USDH(data = df , journee = bouton_journee , temps = date-x_dernieres_minutes)        # le score de l'USDH au d√©but de cette p√©riode cruciale
                                                score_adv_debut_periode_cruciale = score_adversaire(data = df , journee = bouton_journee , temps = date-x_dernieres_minutes)   # le score de l'adversaire de l'USDH au d√©but de cette p√©riode cruciale
                                                differentiel_debut_periode_cruciale = score_USDH_debut_periode_cruciale - score_adv_debut_periode_cruciale                     # le diff√©rentiel de buts en faveur de l'USDH a d√©but de cette p√©riode cruciale
                                                
                                                
                                                # R√©-√©criture du diff√©rentiel de buts suivant son signe : 
                                                    
                                                if differentiel_debut_periode_cruciale > 0 :
                                                    
                                                    differentiel_debut_periode_cruciale = "+ " + str(differentiel_debut_periode_cruciale)
                                                    
                                                    
                                                    
                                                    
                                                elif differentiel_debut_periode_cruciale < 0 :
                                                    
                                                    differentiel_debut_periode_cruciale = "- " + str(abs(differentiel_debut_periode_cruciale))
                                                    
                                                    
                                                    
                                                    
                                               
                                                    
                                                    
                                                
                                                label_USDH = f"score √† la {date-x_dernieres_minutes}√®me minute : {score_USDH_debut_periode_cruciale} - {score_adv_debut_periode_cruciale} ({differentiel_debut_periode_cruciale})"
                                                label_adv = " "
                                            
                                              
                                            # SINON, si on regarde le d√©but de match ==> pas besoin d'afficher le score, car il est de 0-0 :
                                        
                                            else : 
                                                
                                                label_USDH = " "
                                                label_adv = " "
                                                
                                              
                                                
                                              
                                              
                                            col3.metric(label = label_USDH , 
                                                        value = nbr_buts_periode_cruciale_domicile ,
                                                        delta = difference_nbr_buts_periode_cruciale)
                                            
                                                
                                                
                                            col6.metric(label = label_adv , 
                                                        value = nbr_buts_periode_cruciale_exterieur , 
                                                        delta = " ")
                                        
                                        
                                        
                                        
                                        
                                        
                                        # CAS 2 : l'USDH joue √† l'ext√©rieur :
                                            
                                        else : 
                                            
                                            difference_nbr_buts_periode_cruciale = nbr_buts_periode_cruciale_exterieur - nbr_buts_periode_cruciale_domicile
                                            
                                            
                                            
                                            
                                            # R√©-√©criture de la diff√©rence de buts marqu√©s calcul√©e ci-dessus :
                                             
                                            if difference_nbr_buts_periode_cruciale > 0 : 
                                                    
                                                difference_nbr_buts_periode_cruciale = "+ " + str(difference_nbr_buts_periode_cruciale) + " buts marqu√©s"
                                                
                                                
                                                
                                            elif difference_nbr_buts_periode_cruciale < 0 : 
                                                
                                                difference_nbr_buts_periode_cruciale = "- " + str(abs(difference_nbr_buts_periode_cruciale)) + " buts marqu√©s"
                                                
                                                
                                        
                                        
                                        
                                            # On √©crit le delta de buts marqu√©s sous l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                                             
                                            # SI on NE regarde PAS le d√©but de match ==> on peut, en plus de la dynamique, afficher le score au d√©but de la p√©riode :
                                            
                                            if date != 10 :
                                                
                                                label_USDH = f"score √† la {date-x_dernieres_minutes}√®me minute : {score_USDH(data = df , journee = bouton_journee , temps = date-x_dernieres_minutes)} - {score_adversaire(data = df , journee = bouton_journee , temps = date-x_dernieres_minutes)}"
                                                label_adv = " "
                                            
                                              
                                            
                                            # SINON, si on regarde le d√©but de match ==> pas besoin d'afficher le score, car il est de 0-0 :
                                        
                                            else : 
                                                
                                                label_USDH = " "
                                                label_adv = " "
                                                
                                                
                                              
                                            col3.metric(label = label_adv , 
                                                        value = nbr_buts_periode_cruciale_domicile , 
                                                        delta = " ")
                                        
                                        
                                            col6.metric(label = label_USDH , 
                                                        value = nbr_buts_periode_cruciale_exterieur , 
                                                        delta = difference_nbr_buts_periode_cruciale)
                                        
                                        
                                        
                                        
                                        
                                        for i in range(6) : 
                                            
                                            st.write("")
                                            
                                            
                                            
                                    
                                    
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                        
                                        
                                    
                                    st.markdown("<h1 style='text-align: center; color: white;'>B) Au sortir des temps morts.</h1>",
                                                unsafe_allow_html = True)
                                    
                                    
                                    
                                    
                                    for i in range(2) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    st.write("==> Pour √©valuer la capacit√© des 2 √©quipes √† r√©agir ou √† maintenir le m√™me niveau de jeu au sortir d'un temps mort.")    
                                       
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                        
                                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
                                        
                                        
                                    # M√©trique n¬∞15-16 : Affichage de la DYNAMIQUE DES 2 EQUIPES au SORTIR DES TEMPS MORTS pos√©s par chaque equipe : 
                            
                                    # Pour chacune des 2 √©quipes oppos√©es ce jour-l√† :
                                        
                                    for TM_de , num_equipe in zip([equipe_domicile , equipe_exterieur] , [1 , 2]) :
                                        
                                        
                                        st.markdown(f"<h1 style='text-align: center; color: white;'>B-{num_equipe}) Temps morts {TM_de}.</h1>",
                                                    unsafe_allow_html = True)
                                        
                                        
                                       
                                        
                                        for i in range(5) : 
                                            
                                            st.write("")
                                            
                                            
                                        # On r√©cup√®re le dictionnaire des dynamiques des 2 √©quipes oppos√©es AVANT et APRES le TM, POUR CHAQUE TM pos√© par cette √©quipe :
                                            
                                        dico_dynamiques_avant_TM_domicile = dynamique_autour_TM(data = df , 
                                                                                                avant_ou_apres = "avant" ,
                                                                                                x_minutes_avant_apres = 5 , 
                                                                                                journee = bouton_journee , 
                                                                                                equipe = equipe_domicile , 
                                                                                                TM_de = TM_de)
                                        
                                        
                                        
                                        dico_dynamiques_apres_TM_domicile = dynamique_autour_TM(data = df , 
                                                                                                avant_ou_apres = "apr√®s" ,
                                                                                                x_minutes_avant_apres = 5 , 
                                                                                                journee = bouton_journee , 
                                                                                                equipe = equipe_domicile , 
                                                                                                TM_de = TM_de)
                                        
                                        
                                        
                                        
                                        dico_dynamiques_avant_TM_exterieur = dynamique_autour_TM(data = df , 
                                                                                                 avant_ou_apres = "avant" ,
                                                                                                 x_minutes_avant_apres = 5 , 
                                                                                                 journee = bouton_journee , 
                                                                                                 equipe = equipe_exterieur , 
                                                                                                 TM_de = TM_de)
                                        
                                        
                                        
                                        dico_dynamiques_apres_TM_exterieur = dynamique_autour_TM(data = df , 
                                                                                                 avant_ou_apres = "apr√®s" ,
                                                                                                 x_minutes_avant_apres = 5 , 
                                                                                                 journee = bouton_journee , 
                                                                                                 equipe = equipe_exterieur , 
                                                                                                 TM_de = TM_de)
                                            
                                            
                                            
                                                
                                        
        
                                        # CAS 1 : si AU MOINS 1 temps mort a √©t√© pos√© par l'√©quipe :
                                            
                                        if len(dico_dynamiques_avant_TM_domicile) > 0 :
                                            
                                            
                                            
                                            
                                            # On extrait de n'importe lequel des 4 dictionaires la (les) date(s) des temps morts pos√©s :
                                        
                                            L_dates_TM = list(dico_dynamiques_avant_TM_domicile.keys())
                                            
                                            
                                            
                                            # Pour chaque date de temps mort pos√© :
                                            
                                            k = 1
                                            
                                            for date_TM in L_dates_TM :
                                                
                                                
                                                st.write("------------------------------------------------------------")
                                                
                                                
                                                for i in range(2) : 
                                                    
                                                    st.write("")
                                                    
                                                
                                                
                                                
                                                
                                                # On r√©cup√®re le score des 2 √©quipes √† la date lors de laquelle a √©t√© pris le TM :
                                                        
                                                            
                                                score_dom_a_date_TM = score_USDH(data = df , journee = bouton_journee , temps = date_TM[0])        # le score de l'USDH au moment ou le TM est pos√©
                                                score_ext_a_date_TM = score_adversaire(data = df , journee = bouton_journee , temps = date_TM[0])        # le score de l'adversaire de l'USDH au moment ou le TM est pos√©
                                                difference_score_a_date_TM = score_dom_a_date_TM - score_ext_a_date_TM  # √©cart au score en faveur de l'USDH au moment du TM
                                                
                                                
                                                
                                    
                                                # R√©-√©criture de la diff√©rence de buts marqu√©s calcul√©e ci-dessus :
                                                 
                                                if difference_score_a_date_TM > 0 : 
                                                        
                                                    difference_score_a_date_TM = "+ " + str(difference_score_a_date_TM)
                                                    
                                                    
                                                    
                                                    
                                                elif difference_score_a_date_TM < 0 : 
                                                    
                                                    difference_score_a_date_TM = "- " + str(abs(difference_score_a_date_TM))
                                                    
                                                      
                                                    
                                                    
                                                    
                                                    
                                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([4,1,1,1,1,1,1]) 
                                            
                                                col1.write(f"Temps mort ¬∞{k} {TM_de} : {np.round(date_TM[0] , 2)}√®me minute (score : {score_dom_a_date_TM} - {score_ext_a_date_TM} , {difference_score_a_date_TM}) :")
                                                    
                                                    
                                                for i in range(3) : 
                                                    
                                                    st.write("")
                                                    
                                                    
                                                
                                                
                                                # Pour les x minutes AVANT / APRES la date du temps mort :
                                                    
                                                for anteriorite in ["avant" , "apr√®s"] :
                                                
                                                
                                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                                            
                                                    
                                                    
                                                    if k == 1 : 
                                                        
                                                        col4.write(f"Dynamique lors des 5 minutes {anteriorite.upper()} ce temps mort :")
                                                
                                                    
                                                    else : 
                                                        
                                                        col4.write(f"Dynamique lors des 5 minutes {anteriorite.upper()} ce temps mort :")
                                                
                                                
                                                
                                                
                                                    
                                                    # On r√©cup√®re le score de chaque √©quipe dans les 5 minutes autour de ce TM pos√© + le diff√©rentiel de buts :
                                                        
                                                    if anteriorite == "avant" : 
                                                        
                                                        buts_marques_domicile_autour_TM = dico_dynamiques_avant_TM_domicile[date_TM][f"buts marqu√©s {equipe_domicile}"]
                                                        buts_marques_exterieur_autour_TM = dico_dynamiques_avant_TM_domicile[date_TM][f"buts encaiss√©s {equipe_domicile}"]
                                                        
                                                        
                                                    else : 
                                                        
                                                        buts_marques_domicile_autour_TM = dico_dynamiques_apres_TM_domicile[date_TM][f"buts marqu√©s {equipe_domicile}"]
                                                        buts_marques_exterieur_autour_TM = dico_dynamiques_apres_TM_domicile[date_TM][f"buts encaiss√©s {equipe_domicile}"]
                                                        
                                                        
                                                        
                                                        
                                                    
                                                    # On calcule le diff√©rentiel de buts (en faveur de l'USDH) :
                                                    
                                                        
                                                    # SI l'USDH joue √† domicile : 
                                                        
                                                    if equipe_domicile == "USDH" :
                                                        
                                                        differentiel_buts_autour_TM = buts_marques_domicile_autour_TM - buts_marques_exterieur_autour_TM
                                                        
                                                        
                                                        
                                                        
                                                        # R√©-√©criture du diff√©rentiel de buts suivant son signe : 
                                                    
                                                        if differentiel_buts_autour_TM > 0 :
                                                            
                                                            differentiel_buts_autour_TM = "+ " + str(differentiel_buts_autour_TM)
                                                            
                                                            
                                                            
                                                            
                                                        elif differentiel_buts_autour_TM < 0 :
                                                            
                                                            differentiel_buts_autour_TM = "- " + str(abs(differentiel_buts_autour_TM))
                                                            
                                                            
        
                                                        
            
                                                        # On √©crit le diff√©rentiel de buts sous l'√©quipe √† domicile, car il s'agit de l'USDH :
                                                             
                                                        col3.metric(label = "" , 
                                                                    value = buts_marques_domicile_autour_TM ,
                                                                    delta = differentiel_buts_autour_TM)
                                                        
                                                            
                                                            
                                                        col6.metric(label = "" , 
                                                                    value = buts_marques_exterieur_autour_TM , 
                                                                    delta = " ")
                                                        
                                                        
                                                        
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    # SINON, SI l'USDH joue √† l'ext√©rieur : 
                                                        
                                                    else :   # equipe_exterieur == "USDH" :
                                                        
                                                        differentiel_buts_autour_TM = buts_marques_exterieur_autour_TM - buts_marques_domicile_autour_TM
                                                        
                                                        
                                                        
                                                        
                                                        # R√©-√©criture du diff√©rentiel de buts suivant son signe : 
                                                    
                                                        if differentiel_buts_autour_TM > 0 :
                                                            
                                                            differentiel_buts_autour_TM = "+ " + str(differentiel_buts_autour_TM)
                                                            
                                                            
                                                            
                                                            
                                                        elif differentiel_buts_autour_TM < 0 :
                                                            
                                                            differentiel_buts_autour_TM = "- " + str(abs(differentiel_buts_autour_TM))
                                                            
                                                            
            
                                                        
                                                        # On r√©cup√®re √©galement le score des 2 √©quipes √† la date lors de laquelle a √©t√© pris le TM :
                                                        
                                                            
                                                        score_dom_a_date_TM = score_adversaire(data = df , journee = bouton_journee , temps = date_TM[0])        # le score de l'adversaire de l'USDH au moment ou le TM est pos√©
                                                        score_ext_a_date_TM = score_USDH(data = df , journee = bouton_journee , temps = date_TM[0])        # le score de l'USDH au moment ou le TM est pos√©
                                                        difference_score_a_date_TM = score_ext_a_date_TM - score_dom_a_date_TM  # √©cart au score en faveur de l'USDH au moment du TM
                                                        
                                                        
                                                        
                                            
                                                        # R√©-√©criture de la diff√©rence de buts marqu√©s calcul√©e ci-dessus :
                                                         
                                                        if difference_score_a_date_TM > 0 : 
                                                                
                                                            difference_score_a_date_TM = "+ " + str(difference_score_a_date_TM)
                                                            
                                                            
                                                            
                                                            
                                                        elif difference_score_a_date_TM < 0 : 
                                                            
                                                            difference_score_a_date_TM = "- " + str(abs(difference_score_a_date_TM))
                                                        
                                                        
                                                        
            
                                                        # On √©crit le diff√©rentiel de buts sous l'√©quipe √† l'ext√©rieur, car il s'agit de l'USDH :
                                                             
                                                        
                                                        col3.metric(label = "" , 
                                                                    value = buts_marques_domicile_autour_TM ,
                                                                    delta = " ")
                                                        
                                                            
                                                            
                                                        col6.metric(label = "" , 
                                                                    value = buts_marques_exterieur_autour_TM , 
                                                                    delta = differentiel_buts_autour_TM)
                                                        
                                                        
                                                        
                                                        
                                                    for i in range(3) : 
                                                        
                                                        st.write("")
                                        
                                        
                                                        
                                                    
                                                    
                                                    
                                                k += 1
                                                
                                                for i in range(3) : 
                                                    
                                                    st.write("")
                                                    
                                                
                            
                                                    
                                                    
                                                    
                                                    
                                           
                                        
                                        
                                        
          
        
          
                                            
                                                
                                        # CAS 2 : SINON, si AUCUN temps mort N'a √©t√© pos√© par cette √©quipe :
                                            
                                        else :   # len(dico_dynamiques_TM_domicile) == 0 :     
                                            
                                            st.write(f"--> {TM_de} n'a pos√© aucun temps mort lors de ce match !")
                                            
                                            
                                            
                                            for i in range(8) : 
                                                
                                                st.write("")
                                                
                                                
                                                
                                        st.write("--------------------------------------------------------------------")
                                 
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                     
                                            
                                     

                                





















    # CAS 2 : si l'utilisateur souhaite r√©aliser une analyse GLOBALE DE L'USDH lors de cette saison 2022-23 : 
        
    else :    # bouton_activite == "BILAN saison USDH" : 
        
      
    
        st.markdown(f"<h1 style='text-align: center; color: white;'>BILAN saison USDH ({list(dico_rencontres_USDH.keys())[0]} - {list(dico_rencontres_USDH.keys())[-1]}) :</h1>",
                                    unsafe_allow_html = True)  
        
        
        
        
        for i in range(5) : 
            
            st.write("")
            
            
            
            
            
            
            
        # Affichage des √©quipes (USDH et adversaire) et du logo de l'USDH : 
                            
                        
                            
        # Affichage des NOMS DES 2 EQUIPES OPPOSEES + DE LEUR LOGO (en face du nom) : 
                    
        # col1 , col2 , col3 , col4 , col5 = st.columns([2 , 2 , 2 , 2 , 2]) 
        
        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
            
        
        col3.header("**USDH**")
        
        logo_equipe_1 = Image.open(dico_logos["USDH"]) 
        col2.image(logo_equipe_1 , width = 115)
    
        
        col6.header("**ADVERSAIRES**")
        
      
        
            
            
        for i in range(3) : 
            
            st.write("")
            
            
        
        
    
        
        
        # Cr√©ation DANS LE MENU LATERAL d'un bouton pour le choix de l'unit√© des m√©triques √† venir (TOTAL ou PAR MATCH) :
                            
        
                
        bouton_unite = st.sidebar.radio("Dans quelle unit√© souhaitez-vous afficher les statistiques et graphiques ?" , 
                                        [" " , "total" , "moyenne / match"])
             
             
             

        
        
        
            
        # SI un choix a √©t√© fait pour l'unit√© des indicateurs : 
                            
        if bouton_unite != " " :
            
            
            
            

            
            
            
            
                # PARTIE 1 : m√©triques / graphiques li√©s aux BUTS :
                    
                    
                    
                st.write("-------------------------------------------------------------------------------------")
                
                    
                    
                st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es au score.</h1>",
                            unsafe_allow_html = True)  
                
                
                st.write("-------------------------------------------------------------------------------------")
                
        
        
            
                for i in range(3) : 
                    
                    st.write("")
        
        
        
        
        
            
                # M√©trique 1-2-3 : Nombre de BUTS MARQUES par les 2 √©quipes depuis le d√©but de la saison (match entier, M1 et M2) : 
                
                for periode in ["match" , "M1" , "M2"] :
                    
                    
                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                        
                        
                        
                    # On r√©cup√®re la s√©rie des buts de l'USDH et de ses adversaires depuis le d√©but de saison :
                
                    S_buts_USDH = S_nbr_type_action_saison(data = df , type_action = "buts marqu√©s" , 
                                                           equipe = "USDH" , periode = periode)
                    
                    
                    S_buts_adv = S_nbr_type_action_saison(data = df , type_action = "buts marqu√©s" , 
                                                          equipe = "adversaire" , periode = periode)
                    
                    
                    
                    
                    if periode == "match" :
                    
                        col4.write("Nombre de buts marqu√©s (sur le match entier) :")
                        
                        
                        
                    else :
                    
                        col4.write(f"Nombre de buts marqu√©s en {periode} :")
                    
                    
                    
                    
                    
                    # CAS 1 : si je souhaite avoir les TOTAUX de buts ==> je n'ai qu'√† SOMMER les buts de la s√©rie.
                        
                    if bouton_unite == "total" : 
                        
                        
                        nbr_buts_USDH = S_buts_USDH.sum()
                        nbr_buts_adv = S_buts_adv.sum()
                        
                        differentiel_nbr_buts = nbr_buts_USDH - nbr_buts_adv
                        
                        
                        
                        
                    # CAS 2 : si je souhaite avoir les MOYENNES de buts / MATCH ==> je n'ai qu'√† MOYENNER les buts de la s√©rie.
                        
                    elif bouton_unite == "moyenne / match" : 
                        
                        
                        nbr_buts_USDH = S_buts_USDH.mean()
                        nbr_buts_adv = S_buts_adv.mean()
                        
                        differentiel_nbr_buts = nbr_buts_USDH - nbr_buts_adv
                        
                        
                        
                    
                    # CAS 3 : si je souhaite avoir les MEDIANES de buts / MATCH ==> je n'ai qu'√† calculer la MEDIANE des buts de la s√©rie.
                        
                    else :   # bouton_unite == "mediane" : 
                        
                        
                        nbr_buts_USDH = S_buts_USDH.median()
                        nbr_buts_adv = S_buts_adv.median()
                        
                        differentiel_nbr_buts = nbr_buts_USDH - nbr_buts_adv
                        
                        
                        
                        
                        
                    
                    
                    
                    # R√©-√©criture de la diff√©rence de buts marqu√©s :
                     
                    if differentiel_nbr_buts > 0 : 
                            
                        differentiel_nbr_buts = "+ " + str(np.round(differentiel_nbr_buts , 2)) + " buts marqu√©s"
                        
                        
                        
                    elif differentiel_nbr_buts < 0 : 
                        
                        differentiel_nbr_buts = "- " + str(abs(np.round(differentiel_nbr_buts , 2))) + " buts marqu√©s"
                        
                        
            


                        
                        
                    col3.metric(label = "" , 
                                value = np.round(nbr_buts_USDH , 2) ,
                                delta = differentiel_nbr_buts)
                
                
                    col6.metric(label = "" , 
                                value = np.round(nbr_buts_adv , 2))
                
                
                
                
                
                    for i in range(3) : 
                
                        st.write("")
                        
                        
                        
                        
                        
                
                
                
                
                
                
                
                
                
                # HISTOGRAMME de la r√©partition des buts inscrits par les 2 √©quipes par tranche de x minutes : 
                                
                # Cr√©ation d'un bouton pour le choix du nombre de tranches des 60 minutes √† cr√©er : 
                    
                    
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1])
                
                col4.write("R√©partition des buts par tranches de x minutes :")
                
                
                bouton_choix_graphe = col6.selectbox("Type de graphique :" , 
                                                      [" " , 
                                                       "r√©partition des buts par p√©riode" , 
                                                       "diff√©rentiel de buts par p√©riode"])
                
                
                
                
                for i in range(3) : 
                    
                    st.write("")
                    
                    
                    
                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                
                

                
                
                # SI un choix de graphique a √©t√© fait : 
                
                if bouton_choix_graphe != " " :
                    
                    

                    
                    # Ajout d'un bouton pour le choix du nombre tranches des 60 minutes √† d√©couper :
                    
                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1])
                    
                    
                    bouton_tranches = col6.selectbox("D√©couper les 60 minutes de match par p√©riodes de ..... minutes :" , 
                                                     [" " , 1 , 2 , 4 , 5 , 6 , 10 , 12 , 15 , 20])
                    
                    
                    
                    for i in range(5) : 
                        
                        st.write("")
                        
                        
                        
                        
                        
                    if bouton_tranches != " " :
                        
                        
                        
                        fig , ax = plt.subplots(figsize = (16,6.5))
                        
                        
                        
                        # SI l'utilisateur souhaite regarder la r√©partition des buts par tranches :
                            
                        if bouton_choix_graphe == "r√©partition des buts par p√©riode" :
                                
                                

                                
                            double_vertical_histogram_type_action_saison(fig = fig , 
                                                                         ax = ax , 
                                                                         data = df , 
                                                                         type_action = ["but" , "but 7m"] , 
                                                                         nbr_tranches = 60//bouton_tranches ,
                                                                         text_color = "white" , 
                                                                         unite = bouton_unite)
                            
                            
                            
                            
                            
                        else :   # bouton_choix_graphe == "diff√©rentiel de buts par p√©riode"
                        
                        
                            histogram_differentiel_type_action_saison(fig = fig , 
                                                                      ax = ax , 
                                                                      data = df , 
                                                                      type_action = ["but" , "but 7m"] , 
                                                                      nbr_tranches = 60//bouton_tranches , 
                                                                      text_color = "white" , 
                                                                      unite = bouton_unite)
                            
                        
                        
                        
                        
                        
                        
                        
                        st.write(fig)
                        
                        
                        
                        
                
                
                
                        for i in range(10) : 
                            
                            st.write("")
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                        # Graphique en CAMEMBERT du temps pass√© devant / derri√®re au score par l'USDH depuis le d√©but de la saison (match entier, M1 et M2) : 
                                    
                                    
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1])
                        
                        
                        col4.write("Temps pass√© par l'USDH dans chaque situation au score possible :")
                        
                                    
                                
                        # On r√©cup√®re le temps pass√© par l'USDH √† mener / √™tre men√© / √©galit√© depuis le d√©but de saison :
                            
                            
                        # CAS 1 : si je souhaite avoir le temps TOTAL :
                            
                        if bouton_unite == "total" : 
                    
                            temps_USDH_devant = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "m√®ne").sum()
                            temps_USDH_derriere = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "est men√©").sum()
                            temps_USDH_egalite = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "√©galit√©").sum()
                            
                            
                        
                        # CAS 2 : si je souhaite avoir le temps MOYEN / MATCH :
                            
                        elif bouton_unite == "moyenne / match" : 
                    
                            temps_USDH_devant = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "m√®ne").mean()
                            temps_USDH_derriere = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "est men√©").mean()
                            temps_USDH_egalite = S_durees_situation_score_saison(data = df , equipe = "USDH" , situation = "√©galit√©").mean()
                            
                            
                            
                            
                        
                        
                        
                        
                        # Construction du camembert PLOTLY associ√© : 
                            
                            
                        fig = px.pie(values = [temps_USDH_devant , temps_USDH_derriere , temps_USDH_egalite] , 
                                     names = ["USDH devant" , "USDH derri√®re" , "√©galit√©"] , 
                                     color_discrete_sequence = px.colors.sequential.RdBu , 
                                     hole = 1/5)  
                        
                        
                        
                        fig.update_layout(width = 1250 , 
                                          height = 600)
                        
                        
                        
                        
                        
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([0.25,0.25,2,1,1,1,1])
                        
                        col3.write(fig)
                        
                        
                        
                        
                        
                        for i in range(3) : 
                            
                            st.write("")
                            
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        # Diagramme en barres du nombre de buts inscrits par joueur de l'USDH depuis le d√©but de la saison :
                           
                            
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1])
                        
                        col4.write("Nombre de buts inscrits par joueur de l'USDH :")
                        
                        
                        for i in range(2) : 
                            
                            st.write("")
                        
                        
                            
                        # On commence par r√©cup√©rer la s√©rie du nombre de buts inscrits par joueur de l'USDH cette saison :
                        
                        # CAS 1 : on souhaite regarder le nombre de buts TOTAL de chaque joueur :
                        
                        if bouton_unite == "total" :
                            
                            S_buts_par_joueur_USDH_saison = df[(df["√©quipe"] == "USDH") & (df["action"].isin(["but" , "but 7m"]))]["joueur"].value_counts()
                        
                        
                        
                            # On cr√©er un diagramme en barres plotly √† partir de cette Series : 
                            
                            
                            fig = px.bar(x = S_buts_par_joueur_USDH_saison.index , 
                                         y = S_buts_par_joueur_USDH_saison , 
                                         color = S_buts_par_joueur_USDH_saison , 
                                         text = S_buts_par_joueur_USDH_saison)
        
        
            
            
                            
                                
                                
                                
                            # Personnalisation de la figure : 
                                
                            fig.update_layout(xaxis_title = "joueur USDH" , 
                                              yaxis_title = "buts marqu√©s" , 
                                              template = "plotly_dark" , 
                                              width = 1350 , 
                                              height = 700)
                        
                        
                            fig.update_yaxes(range = [0 , S_buts_par_joueur_USDH_saison.max() + 1])
                        
                        
                            
                            fig.update_traces(textposition = "outside" , 
                                              textfont = {"size" : 16 , 
                                                          "color" : "red"})
                            
                            
                            
                            fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
                            
                            
                            
                            
                              
                            st.write(fig)
                        
                        
                        
                        
                        
                        
                        # CAS 2 : on souhaite regarder le nombre de buts MOYEN / MATCH de chaque joueur :
                        
                        else :   # bouton_unite == "moyenne / match"
                        
                            L_buts_par_joueur_USDH_saison = []
                            
                            L_matchs_par_joueur_USDH_saison = []
                            
                            L_joueurs_USDH_scoreurs = list(df[(df["√©quipe"] == "USDH") & (df["action"].isin(["but" , "but 7m"]))]["joueur"].unique())  # la liste des joueurs de l'USDH 
                        
                            
                            # Pour chaque scoreur de l'USDH :
                                
                            for joueur in L_joueurs_USDH_scoreurs :
                                
                                nbr_matchs_joues = 0
                                nbr_buts_marques = 0
                                
                                
                                # Pour chaque journ√©e de championnat d√©j√† jou√©e par l'USDH :
                                    
                                for journee in dico_rencontres_USDH.keys() : 
                                    
                                    
                                    # SI le scoreur de l'USDH a jou√© lors de cette journ√©e :
                                        
                                    if joueur in df[(df["journ√©e"] == journee) & (df["√©quipe"] == "USDH")]["joueur"].unique() :
                                        
                                        
                                        nbr_matchs_joues += 1
                                        
                                        nbr_buts_inscrits_journee = len(df[(df["journ√©e"] == journee) & (df["joueur"] == joueur) & (df["action"].isin(["but" , "but 7m"]))])
                        
                                        nbr_buts_marques += nbr_buts_inscrits_journee
                                        
                                        
                                
                                # SI le joueur a jou√© AU MOINS 1 MATCH cette saison :
                                    
                                if nbr_matchs_joues > 0 :
                                    
                                    L_buts_par_joueur_USDH_saison.append(np.round(nbr_buts_marques / nbr_matchs_joues , 2))
                                    
                                    L_matchs_par_joueur_USDH_saison.append(nbr_matchs_joues)
                                    
                                
                                
                                    
                                    
                                    
                                    
                                    
                               
                                    
                                    
                                
                                
                                
                            S_buts_par_joueur_USDH_saison = pd.Series(L_buts_par_joueur_USDH_saison , 
                                                                      index = L_joueurs_USDH_scoreurs)
                            
                        
                        
             
                        
                            df_stats_joueurs_USDH = pd.DataFrame(data = list(S_buts_par_joueur_USDH_saison.index) ,
                                                                 columns = ["joueur"])
                            
                            
                            
                            df_stats_joueurs_USDH["buts marqu√©s"] = list(S_buts_par_joueur_USDH_saison)
                            
                            
                            df_stats_joueurs_USDH["matchs jou√©s"] = L_matchs_par_joueur_USDH_saison
                            
                            
                            df_stats_joueurs_USDH = df_stats_joueurs_USDH.sort_values(by = "buts marqu√©s" , 
                                                                                      ascending = False)
                            
                            
                            
                            
                            
                            
                        
                        
                        
                        
                            # On cr√©er un diagramme en barres plotly √† partir de cette Series : 
                                
                                
                            fig = px.bar(x = df_stats_joueurs_USDH["joueur"] , 
                                         y = df_stats_joueurs_USDH["buts marqu√©s"] , 
                                         color = df_stats_joueurs_USDH["buts marqu√©s"] , 
                                         text = df_stats_joueurs_USDH["buts marqu√©s"])
        
        
            
            
                            
                                
                                
                                
                            # Personnalisation de la figure : 
                                
                            fig.update_layout(xaxis_title = "joueur USDH" , 
                                              yaxis_title = "buts marqu√©s" , 
                                              template = "plotly_dark" , 
                                              width = 1450 , 
                                              height = 700)
                        
                        
                            fig.update_yaxes(range = [0 , df_stats_joueurs_USDH["buts marqu√©s"].max() + 1])
                        
                        
                            
                            fig.update_traces(textposition = "outside" , 
                                              textfont = {"size" : 16 , 
                                                          "color" : "red"})
                            
                            
                            
                            fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
                            
                            
                            
         
        
                            st.write(fig)
                            
                            
                            
                            
                            

                            
                        for i in range(10) : 
                            
                            st.write("")
                            
                            
                            
                        st.write("-------------------------------------------------------------------------------------")
                    
        
        
        
        
        
        
                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
                        # PARTIE 2 : m√©triques / graphiques de bilan de saison li√©s √† la SITUATION NUMERIQUE :
                        
                        
                        st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es √† la situation num√©rique.</h1>",
                                    unsafe_allow_html = True)  
                        
                        
                        st.write("-------------------------------------------------------------------------------------")
                        
                    
                    
                    
                    
                        for i in range(3) : 
                            
                            st.write("")
            
            









                        # Affichage de la DROITE GRAPHIQUE repr√©sentant les p√©riodes de sup√©riorit√© / √©galit√© / inf√©riorit√© num√©rique de l'USDH LORS DU MATCH VOULU : 
                            
                        col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                        
                        col4.write("D√©coupage des 60 minutes de match selon la situation num√©rique de l'USDH :")
                        
                        
                        
                        # Cr√©ation d'un bouton pour le choix du (des) match(s) dont on souhaite voir la droite des p√©riodes d'inf√©riorit√© / sup√©riorit√© / √©galit√© num√©rique :
                            
                        bouton_journee = col6.selectbox("Choisissez le(s) match(s) qui vous int√©resse(nt) :" , 
                                                       [" "] + list(dico_rencontres_USDH.keys()) + ["tous"])
                        
                        
                        
                        for i in range(5) : 
                            
                            st.write("")
                            
                            
                            
                        if bouton_journee != " " :
                            
                            
                            if bouton_journee != "tous" :
                        
                            
                                fig , ax = plt.subplots(figsize = (16,6))
        
        
                                droite_sup_inf_numeriques_equipe(fig , ax , data = df , journee = bouton_journee , 
                                                                 equipe = "USDH" , 
                                                                 afficher_scores = True , 
                                                                 afficher_differentiels = True ,
                                                                 afficher_bilan = True , 
                                                                 show_title = True , 
                                                                 text_color = "white")
                                
                                
                                
                                st.write(fig)
                                
                                
                                
                                
                                for i in range(8) : 
                                    
                                    st.write("")
                                
                                
                                
                                
                                
                                
                            else : 
                                
                                
                                for journee in dico_rencontres_USDH.keys() : 
                                    
                                    
                                    fig , ax = plt.subplots(figsize = (16,6))
        
        
                                    droite_sup_inf_numeriques_equipe(fig , ax , data = df , 
                                                                     journee = journee , 
                                                                     equipe = "USDH" , 
                                                                     afficher_scores = True , 
                                                                     afficher_differentiels = True ,
                                                                     afficher_bilan = True , 
                                                                     show_title = True , 
                                                                     text_color = "white")
                                    
                                    


                                    st.write(fig)
                        
                        
                                    for i in range(10) : 
                                        
                                        st.write("")
                        
                        
                        
                        
                        
                        
                            for i in range(5) : 
                                
                                st.write("")
                                
                                
                                
                                
                                
                                
                                
                            
                            
                            
                            
                            
                            
                            
                            
                            
                                    

                                
                                
                                
                                
                            # M√©triques n¬∞1-2 : nombre de cartons JAUNES + nombre de 2MINS re√ßus par l'USDH et par ses adversaires : 
                            
                                
                            for punition in ["cartons jaunes" , "exclusions"] :    
                                
                        
                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                            
                            
                                if punition == "cartons jaunes" : 
                                
                                    col4.write(f"Nombre de {punition} re√ßus ({bouton_unite}) :")
                                    
                                else : 
                                    
                                    col4.write(f"Nombre d'{punition} re√ßues ({bouton_unite}) :")
                                
                                
                                
                                
                                for i in range(2) : 
                            
                                    st.write("")
                                    
                                    
                                    
                                    
                                # On r√©cup√®re le nombre de punitions de ce type re√ßues par l'USDH et par ses adversaires tout au long de la saison :
                                
                                # CAS 1 : on souhaite afficher le nombre TOTAL de punitions des 2 √©quipes :
                                
                                if bouton_unite == "total" :
                                
                                    nbr_punitions_USDH = S_nbr_type_action_saison(data = df , type_action = punition , 
                                                                                  equipe = "USDH" , periode = "match").sum()
                                    
                                    nbr_punitions_adv = S_nbr_type_action_saison(data = df , type_action = punition , 
                                                                                 equipe = "adversaire" , periode = "match").sum()
                                    
                                    
                                    
                                    
                                else :  # bouton_unite == "moyenne / match"
                                            
                                    nbr_punitions_USDH = S_nbr_type_action_saison(data = df , type_action = punition , 
                                                                                  equipe = "USDH" , periode = "match").mean()
                                    
                                    nbr_punitions_adv = S_nbr_type_action_saison(data = df , type_action = punition , 
                                                                                 equipe = "adversaire" , periode = "match").mean()
                                    
                                    
                                    
                                    
                                
                                # Calcul du diff√©rentiel entre les punitions re√ßues par l'USDH, et celles re√ßues par ses adversaires : 
                                    
                                differentiel_punitions = nbr_punitions_USDH - nbr_punitions_adv
                                
                                
                                # Gestion de l'affichage du diff√©rentiel suivant son signe : 
                                    
                                if differentiel_punitions > 0 :
                                    
                                    differentiel_punitions = "+ " + str(np.round(differentiel_punitions , 2))
                                    
                                    
                                    
                                elif differentiel_punitions == 0 : 
                                    
                                    differentiel_punitions = str(differentiel_punitions)
                                    
                                    
                                    
                                else : 
                                    
                                    differentiel_punitions = "- " + str(abs(np.round(differentiel_punitions , 2)))
                                    
                                
                                
                                
                                
                                    
                                col3.metric(label = "" , 
                                            value = np.round(nbr_punitions_USDH , 2) ,
                                            delta = differentiel_punitions , 
                                            delta_color = "inverse")
                            
                            
                                col6.metric(label = "" , 
                                            value = np.round(nbr_punitions_adv , 2))
                            
                            
                            
                            
                            
                                for i in range(3) : 
                            
                                    st.write("")
                                            
                                                
                                
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            # Double histogramme de la r√©partition des 2mins re√ßus par tranches de x minutes : 
                            
                            
                            # Ajout d'un bouton pour le choix du nombre tranches des 60 minutes √† d√©couper :
                                
                    
                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1.5,1.15,2.3,1])
                            
                            col4.write("R√©partition des 2mins re√ßus par p√©riode :")
                            
                            
                            bouton_tranches_bis = col6.selectbox("D√©couper les 60 minutes du match par p√©riodes de ..... minutes :" , 
                                                                 [" " , 4 , 5 , 6 , 10 , 12 , 15 , 20])
                            
                            
                            
                            for i in range(5) : 
                                
                                st.write("")
                                
                                
                                
                                
                                
                            if bouton_tranches_bis != " " :
                                
                                
                                
                                fig , ax = plt.subplots(figsize = (16,6.5))
                                

                                double_vertical_histogram_type_action_saison(fig = fig , 
                                                                             ax = ax , 
                                                                             data = df , 
                                                                             type_action = ["2min"] , 
                                                                             nbr_tranches = 60//bouton_tranches_bis ,
                                                                             text_color = "white" , 
                                                                             unite = bouton_unite)
                                
                                
                                
                                st.write(fig)
                                
                                
                                
                                
                                
                                for i in range(6) : 
                                    
                                    st.write("")
                                
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                                # Affichage du diagramme en barres des 2mins re√ßus par joueur de l'USDH :
                            
                                col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                            
                                
                                col4.write("R√©partition des 2mins re√ßus par joueur de l'USDH :")
                                
                                
                                for i in range(2) : 
                            
                                    st.write("")
                                
                                
                                    
                                # On commence par r√©cup√©rer la s√©rie du nombre de 2mins re√ßus par joueur de l'USDH cette saison :
                                
                                # CAS 1 : on souhaite regarder le nombre de 2mins TOTAL de chaque joueur :
                                
                                if bouton_unite == "total" :
                                    
                                    S_2mins_par_joueur_USDH_saison = df[(df["√©quipe"] == "USDH") & (df["action"] == "2min")]["joueur"].value_counts()
                                
                                
                                
                                    # On cr√©er un diagramme en barres plotly √† partir de cette Series : 
                                    
                                    
                                    fig = px.bar(x = S_2mins_par_joueur_USDH_saison.index , 
                                                 y = S_2mins_par_joueur_USDH_saison , 
                                                 color = S_2mins_par_joueur_USDH_saison , 
                                                 text = S_2mins_par_joueur_USDH_saison)
                
                
                    
                    
                                    
                                        
                                        
                                        
                                    # Personnalisation de la figure : 
                                        
                                    fig.update_layout(xaxis_title = "joueur USDH" , 
                                                      yaxis_title = "2mins re√ßus" , 
                                                      template = "plotly_dark" , 
                                                      width = 1450 , 
                                                      height = 700)
                                
                                
                                    fig.update_yaxes(range = [0 , S_2mins_par_joueur_USDH_saison.max() + 1])
                                
                                
                                    
                                    fig.update_traces(textposition = "outside" , 
                                                      textfont = {"size" : 16 , 
                                                                  "color" : "red"})
                                    
                                    
                                    
                                    fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
                                    
                                    
                                    
                                    
                                    
                                    st.write(fig)
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                            
                            
                            
                            
                            
                            
                                # CAS 2 : on souhaite regarder le nombre de 2mins re√ßus MOYEN / MATCH de chaque joueur :
                                
                                else :   # bouton_unite == "moyenne / match"
                                
                                    L_2mins_par_joueur_USDH_saison = []
                                    
                                    L_matchs_par_joueur_USDH_saison = []
                                    
                                    L_joueurs_USDH_expulses = list(df[(df["√©quipe"] == "USDH") & (df["action"] == "2min")]["joueur"].unique())  # la liste des joueurs de l'USDH ayant √©t√© expuls√©s au moins 1 fois
                                
                                    
                                    # Pour chaque scoreur de l'USDH :
                                        
                                    for joueur in L_joueurs_USDH_expulses :
                                        
                                        nbr_matchs_joues = 0
                                        nbr_2min_recus = 0
                                        
                                        
                                        # Pour chaque journ√©e de championnat d√©j√† jou√©e par l'USDH :
                                            
                                        for journee in dico_rencontres_USDH.keys() : 
                                            
                                            
                                            # SI le joueur expuls√© de l'USDH a jou√© lors de cette journ√©e :
                                                
                                            if joueur in df[(df["journ√©e"] == journee) & (df["√©quipe"] == "USDH")]["joueur"].unique() :
                                                
                                                
                                                nbr_matchs_joues += 1
                                                
                                                nbr_2min_recus_journee = len(df[(df["journ√©e"] == journee) & (df["joueur"] == joueur) & (df["action"] == "2min")])
                                
                                                nbr_2min_recus += nbr_2min_recus_journee
                                                
                                                
                                        
                                        # SI le joueur a jou√© AU MOINS 1 MATCH cette saison :
                                            
                                        if nbr_matchs_joues > 0 :
                                            
                                            L_2mins_par_joueur_USDH_saison.append(np.round(nbr_2min_recus / nbr_matchs_joues , 2))
                                            
                                            L_matchs_par_joueur_USDH_saison.append(nbr_matchs_joues)
                                            
                                        
                                        
                                            
                                            
                                           
                                            
                                            
                                       
                                            
                                            
                                        
                                        
                                        
                                    S_2min_par_joueur_USDH_saison = pd.Series(L_2mins_par_joueur_USDH_saison , 
                                                                              index = L_joueurs_USDH_expulses)
                                    
                                
                                
                     
                                
                                    df_stats_joueurs_USDH = pd.DataFrame(data = list(S_2min_par_joueur_USDH_saison.index) ,
                                                                         columns = ["joueur"])
                                    
                                    
                                    
                                    df_stats_joueurs_USDH["2mins re√ßus"] = list(S_2min_par_joueur_USDH_saison)
                                    
                                    
                                    df_stats_joueurs_USDH["matchs jou√©s"] = L_matchs_par_joueur_USDH_saison
                                    
                                    
                                    df_stats_joueurs_USDH = df_stats_joueurs_USDH.sort_values(by = "2mins re√ßus" , 
                                                                                              ascending = False)
                                    
                                    
                                    
                                    
                                    
                                    
                                
                                
                                
                                
                                    # On cr√©er un diagramme en barres plotly √† partir de cette Series : 
                                        
                                        
                                    fig = px.bar(x = df_stats_joueurs_USDH["joueur"] , 
                                                 y = df_stats_joueurs_USDH["2mins re√ßus"] , 
                                                 color = df_stats_joueurs_USDH["2mins re√ßus"] , 
                                                 text = df_stats_joueurs_USDH["2mins re√ßus"])
                
                
                    
                    
                                    
                                        
                                        
                                        
                                    # Personnalisation de la figure : 
                                        
                                    fig.update_layout(xaxis_title = "joueur USDH" , 
                                                      yaxis_title = "2mins re√ßus" , 
                                                      template = "plotly_dark" , 
                                                      width = 1450 , 
                                                      height = 700)
                                
                                
                                    fig.update_yaxes(range = [0 , df_stats_joueurs_USDH["2mins re√ßus"].max() + 1])
                                
                                
                                    
                                    fig.update_traces(textposition = "outside" , 
                                                      textfont = {"size" : 16 , 
                                                                  "color" : "red"})
                                    
                                    
                                    
                                    fig.update(layout_coloraxis_showscale = False)   # Pour masquer la barre de couleur
                                    
                                    


                                    
                                    
                                    st.write(fig)
                                    
                                    
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                # Analyse des p√©riodes de SUPERIORITE / INFERIORITE NUMERIQUE de chaque √©quipe :
                                    
                                
                                for situation_numerique in ["sup√©riorit√© num√©rique" , "inf√©riorit√© num√©rique"] :
                                    
                                    
                                    
                                    st.write("------------------------------------------------------------------------")
                                        
                                        
                                        
                                    if situation_numerique == "sup√©riorit√© num√©rique" : 
                                        
                                        st.markdown(f"<h1 style='text-align: center; color: white;'>P√©riodes de {situation_numerique} de l'USDH.</h1>",
                                                         unsafe_allow_html = True)   
                                        
                                        
                                        
                                    else :    # situation_numerique == "inf√©riorit√© num√©rique" : 
                                        
                                        st.markdown(f"<h1 style='text-align: center; color: white;'>P√©rodes d'{situation_numerique} de l'USDH.</h1>",
                                                         unsafe_allow_html = True)   
                                        
                                        
                                        
                                    
                                    
                                    
                                    for i in range(5) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    # M√©triques n¬∞3 + 9 : Nombre de p√©riodes jou√©es en 'situation_numerique' par les 2 √©quipes :
                                    
    
                                
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                
                                    col4.write(f"Nombre de fois o√π l'√©quipe s'est retrouv√©e en {situation_numerique} ({bouton_unite}) :")
                                    
                                    
                                    
                                    
                                        
                                    # On r√©cup√®re le nombre de p√©riodes jou√©es en 'situation_numerique' par l'USDH et par ses adversaires tout au long de la saison :
                                    
                                    L_nbr_periodes_situation_numerique_USDH = []  # la liste du nbr de p√©riodes que l'USDH a jou√© en situation_numerique lors de chaque match disput√©
                                    L_nbr_periodes_situation_numerique_adv = []   # la liste du nbr de p√©riodes que l'adversaire de l'USDH a jou√© en situation_numerique lors de chaque match disput√©
                                        
                                    
                                    # Pour chaque journ√©e de championnat disput√©e :
                                        
                                    for journee in dico_rencontres_USDH.keys() : 
                                        
                                        if journee != 'J11' :
                                        
                                            equipe_dom = df[df["journ√©e"] == journee]["domicile"].unique()
                                            equipe_dom = equipe_dom[0]  # nom de l'√©quipe jouant √† domicile

                                            equipe_ext = df[df["journ√©e"] == journee]["ext√©rieur"].unique()
                                            equipe_ext = equipe_ext[0]  # nom de l'√©quipe jouant √† l'ext√©rieur



                                            # CAS 1 : si l'√©quipe jouant √† domicile est l'USDH = celle jouant √† l'ext√©rieur est son adversaire :

                                            if equipe_dom == "USDH" : 

                                                if situation_numerique == "sup√©riorit√© num√©rique" : 

                                                    nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "domicile")
                                                    nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "ext√©rieur")



                                                else :   # situation_numerique == "inf√©riorit√© num√©rique"


                                                    nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "ext√©rieur")
                                                    nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "domicile")






                                            # CAS 2 : si l'√©quipe jouant √† l'ext√©rieur st l'USDH = celle jouant √† domicile est son adversaire :

                                            else :   # equipe_ext == "USDH" : 


                                                if situation_numerique == "sup√©riorit√© num√©rique" : 


                                                    nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "ext√©rieur")
                                                    nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "domicile")


                                                else :   # situation_numerique == "inf√©riorit√© num√©rique"


                                                    nbr_periodes_situation_numerique_USDH_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "domicile")
                                                    nbr_periodes_situation_numerique_adv_journee = nbr_periodes_superiorite(data = df , journee = journee , equipe = "ext√©rieur")

                                            
                                            
                                            
                                            
                                            
                                            
                                        
                                        # On ajoute le nombre de p√©riodes des √©quipes respectives √† la liste qui leur est d√©di√©e : 
                                            
                                        L_nbr_periodes_situation_numerique_USDH.append(nbr_periodes_situation_numerique_USDH_journee)
                                        L_nbr_periodes_situation_numerique_adv.append(nbr_periodes_situation_numerique_adv_journee)
                                        
                                        
                                        
                                        
                                    # On utilise ces 2 listes pour cr√©er 2 Series : 
                                        
                                    S_nbr_periodes_situation_numerique_USDH = pd.Series(L_nbr_periodes_situation_numerique_USDH)
                                    S_nbr_periodes_situation_numerique_adv = pd.Series(L_nbr_periodes_situation_numerique_adv)      
                                        
                                        
                                    
                                    
                                    
                                    # CAS 1 : on souhaite afficher le nombre TOTAL de p√©riodes jou√©es en 'situation_numerique' des 2 √©quipes :
                                    
                                    if bouton_unite == "total" :
                                    
                                        nbr_periodes_situation_numerique_USDH = S_nbr_periodes_situation_numerique_USDH.sum()
                                        
                                        nbr_periodes_situation_numerique_adv = S_nbr_periodes_situation_numerique_adv.sum()
                                        
                                        
                                        
                                        
                                    else :  # bouton_unite == "moyenne / match"
                                                
                                        nbr_periodes_situation_numerique_USDH = S_nbr_periodes_situation_numerique_USDH.mean()
                                        
                                        nbr_periodes_situation_numerique_adv = S_nbr_periodes_situation_numerique_adv.mean()
                                        
                                        
                                        
                                        
                                    
                                    # Calcul du diff√©rentiel de p√©riodes jou√©es en 'situation_numerique' par les 2 √©quipes : 
                                        
                                    differentiel_periodes_situation_numerique = nbr_periodes_situation_numerique_USDH - nbr_periodes_situation_numerique_adv
                                    
                                    
                                    # Gestion de l'affichage du diff√©rentiel suivant son signe : 
                                        
                                    if differentiel_periodes_situation_numerique > 0 :
                                        
                                        differentiel_periodes_situation_numerique = "+ " + str(np.round(differentiel_periodes_situation_numerique , 2)) + " p√©riodes"
                                        
                                        
                                        
                                    elif differentiel_periodes_situation_numerique == 0 : 
                                        
                                        differentiel_periodes_situation_numerique = str(differentiel_periodes_situation_numerique) + " p√©riodes"
                                        
                                        
                                        
                                    else : 
                                        
                                        differentiel_periodes_situation_numerique = "- " + str(abs(np.round(differentiel_periodes_situation_numerique , 2))) + " p√©riodes"
                                        
                                    
                                    
                                    
                                    
                                        
                                    col3.metric(label = "" , 
                                                value = np.round(nbr_periodes_situation_numerique_USDH , 2) ,
                                                delta = differentiel_periodes_situation_numerique)
                                
                                
                                    col6.metric(label = "" , 
                                                value = np.round(nbr_periodes_situation_numerique_adv , 2))
                                
                                
                                
                                
                                
                                    for i in range(3) : 
                                
                                        st.write("")
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    # M√©trique n¬∞4 + 10 : temps pass√© en 'situation_numerique' par les 2 √©quipes :
                                    
    
                                
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                
                                    col4.write(f"Temps durant lequel l'√©quipe a jou√© en {situation_numerique} ({bouton_unite}, en minutes) :")
                                    
                                    
                                    
                                    
                                        
                                    # On r√©cup√®re le temps pass√© en 'situation_numerique' par l'USDH et par ses adversaires tout au long de la saison :
                                    
                                    # CAS 1 : on souhaite afficher le temps TOTAL en 'situation_numerique' des 2 √©quipes :
                                    
                                    if bouton_unite == "total" :
                                    
                                        temps_situation_numerique_USDH = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                             situation = situation_numerique).sum()
                                        
                                        temps_situation_numerique_adv = S_durees_situation_numerique_saison(data = df , equipe = "adversaire" , 
                                                                                                            situation = situation_numerique).sum()
                                        
                                        
                                        
                                        
                                    else :  # bouton_unite == "moyenne / match"
                                                
                                        temps_situation_numerique_USDH = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                             situation = situation_numerique).mean()
                                        
                                        temps_situation_numerique_adv = S_durees_situation_numerique_saison(data = df , equipe = "adversaire" , 
                                                                                                            situation = situation_numerique).mean()
                                        
                                        
                                        
                                        
                                    
                                    # Calcul du diff√©rentiel de temps pass√© en 'situation_numerique' par les 2 √©quipes : 
                                        
                                    differentiel_temps_situation_numerique = temps_situation_numerique_USDH - temps_situation_numerique_adv
                                    
                                    
                                    # Gestion de l'affichage du diff√©rentiel suivant son signe : 
                                        
                                    if differentiel_temps_situation_numerique > 0 :
                                        
                                        differentiel_temps_situation_numerique = "+ " + str(np.round(differentiel_temps_situation_numerique , 2)) + " minutes"
                                        
                                        
                                        
                                    elif differentiel_temps_situation_numerique == 0 : 
                                        
                                        differentiel_temps_situation_numerique = str(differentiel_temps_situation_numerique) + " minutes"
                                        
                                        
                                        
                                    else : 
                                        
                                        differentiel_temps_situation_numerique = "- " + str(abs(np.round(differentiel_temps_situation_numerique , 2))) + " minutes"
                                        
                                    
                                    
                                    
                                    
                                        
                                    col3.metric(label = "" , 
                                                value = np.round(temps_situation_numerique_USDH , 2) ,
                                                delta = differentiel_temps_situation_numerique)
                                
                                
                                    col6.metric(label = "" , 
                                                value = np.round(temps_situation_numerique_adv , 2))
                                
                                
                                
                                
                                
                                
                                
                                    for i in range(7) : 
                                
                                        st.write("")
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    # M√©trique n¬∞5-6-7 + 11-12-13 : Affichage du BILAN de l'USDH sur SES PROPRES PERIODES de 'situation_numerique' : 
                                
                                
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,3.15,3.15,2.5,1.15,1,4])
                                            
                                    col4.write(f"BILAN DE l'USDH LORSQU'IL JOUE EN {situation_numerique.upper()} :") 
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                    
                                    
                                    
                                    
                                    
                                    
                                    # Cr√©ation d'un bouton pour le choix de l'unit√© des buts marqu√©s / encaiss√©s / diff√©rentiels sur les sup√©riorit√©s num√©riques : 
                                     
                                        
                                    bouton_unite_bilan_situation_numerique = col7.selectbox("Bilan exprim√© en :" , 
                                                                                            [" " , 
                                                                                             "total" , 
                                                                                             f"/ minute jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" , 
                                                                                             f"/ p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}"])
                                    
                                    
                                    st.write("")
                                    st.write("")
                                    
                                    
                                    
                                    
                                    
                                    if bouton_unite_bilan_situation_numerique != " " :
                                        
                                        
                                        
                                        L_delta_colors = ["normal" , "inverse" , "normal"]
                                            
                                            
                                            
                                        
                                        for type_bilan , delta_color in zip(["buts marqu√©s" , "buts encaiss√©s" , "diff√©rentiel de buts"] , L_delta_colors) :
                                            
                                            
                                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                            
                                        
                                            
                                            
                                            # R√©cup√©ration du bilan du type renseign√© de l'√©quipe √† domicile lorsqu'elle joue en 'situation_numerique', et idem pour l'√©quipe √† l'ext√©rieur :
                                             
                                            if bouton_unite_bilan_situation_numerique == "total" :
                                                
                                                
                                                
                                                # Bilan de l'USDH dans cette situation num√©rique : 
                                                    
                                                buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                        equipe = "USDH" , 
                                                                                                                        situation = situation_numerique , 
                                                                                                                        type_bilan = type_bilan).sum()
                                             
                                                
                                                
                                                
                                                # Bilan de ses adversaires dans cette m√™me situation num√©rique : lorsque l'USDH joue en sup√©riorit√© (resp. en inf√©riorit√©) ==> son adversaire joue quant √† lui en inf√©riorit√© (resp. en sup√©riorit√©) : 
                                                
                                                
                                                if situation_numerique == "sup√©riorit√© num√©rique" :
                                                    
                                                
                                                    buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                           equipe = "adversaire" , 
                                                                                                                           situation = "inf√©riorit√© num√©rique" , 
                                                                                                                           type_bilan = type_bilan).sum()
                                                
                                                
                                                
                                                
                                                else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                
                                                
                                                    buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                           equipe = "adversaire" , 
                                                                                                                           situation = "sup√©riorit√© num√©rique" , 
                                                                                                                           type_bilan = type_bilan).sum()
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                unite = f" {type_bilan}"
                                                
                                                
                                                
                                                
                                                col4.write(f"{type_bilan} lorsque l'USDH joue en {situation_numerique} :") 
                                                    
                                                    
                                               
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                            elif bouton_unite_bilan_situation_numerique == f"/ minute jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" :
                                                
                                                
                                                
                                                # Calcul du temps pass√© en 'situation_numerique' par l'USDH depuis le d√©but de la saison (temps total) : 
                                                    
                                                temps_situation_numerique_USDH = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                                     situation = situation_numerique).sum()
                                                

                                                
                                                
                                                
                                                
                                                # SI l'USDH A PASSE DU TEMPS EN 'situation_numerique' (pour √©viter une division par 0) : 
                                                
                                                if temps_situation_numerique_USDH > 0 :
                                                    
                                                    
                                                    # Bilan USDH :
                                                    
                                                    buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = situation_numerique , type_bilan = type_bilan).sum() / temps_situation_numerique_USDH
                                                    
                                                    
                                                    
                                                    # Bilan adversaires : 
                                                        
                                                    if situation_numerique == "sup√©riorit√© num√©rique" :
                                                        
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "inf√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).sum() / temps_situation_numerique_USDH
                                                    
                                                    
                                                    
                                                    
                                                    else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                    
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "sup√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).sum() / temps_situation_numerique_USDH
                                                    
                                                        
                                                
                                                
                                                
                                                # SINON, si l'USDH a pass√© 0 seconde √† jouer en sup√©riorit√© cette saison :
                                                
                                                else : 
                                                    
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = 0
                                                    
                                                    
                                                    
                                                    # Bilan adversaires : 
                                                    
                                                    buts_type_situation_numerique_adv = 0
                                                    
                                                    
                                                
                                                

                                                
                                                
                                                unite = f" {type_bilan} / min de l'USDH en {situation_numerique.split(sep = ' ')[0][0:4]}."
                                                
                                                
                                                col4.write(f"{type_bilan} / minute que l'USDH a jou√© en {situation_numerique} :") 
                                                    
                                                    
                                               
                                            
                                         
                                            
                                         
                                            
                                         
                                         
                                            elif bouton_unite_bilan_situation_numerique == f"/ p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0]}" :
                                                
                                                
                                                
                                                # Calcul du nombre de p√©riodes jou√©es en 'situation_numerique' par l'USDH depuis le d√©but de la saison (temps total) : 
                                                    
                                                    
                                                nbr_periodes_situation_numerique_USDH = S_nbr_periodes_situation_numerique_USDH.sum()
                                        
                                                
                                                
                                                
                                                
                                                
                                                # SI l'USDH A JOUE EN 'situation_numerique' (pour √©viter une division par 0) : 
                                                
                                                if nbr_periodes_situation_numerique_USDH > 0 :
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = situation_numerique , type_bilan = type_bilan).sum() / nbr_periodes_situation_numerique_USDH
                                                
                                                
                                                
                                                
                                                    # Bilan adversaires : 
                                                        
                                                    
                                                    if situation_numerique == "sup√©riorit√© num√©rique" :
                                                        
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "inf√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).sum() / nbr_periodes_situation_numerique_USDH
                                                    
                                                    
                                                    
                                                    
                                                    else :    # situation_numerique == "inf√©riorit√© num√©rique"
                                                    
                                                    
                                                        buts_type_situation_numerique_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                                               equipe = "adversaire" , 
                                                                                                                               situation = "sup√©riorit√© num√©rique" , 
                                                                                                                               type_bilan = type_bilan).sum() / nbr_periodes_situation_numerique_USDH
                                                    
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        
                                                
                                                # SINON, si l'USDH a pass√© 0 seconde √† jouer en 'situation numerique' cette saison :
                                                
                                                else : 
                                                    
                                                    # Bilan USDH : 
                                                        
                                                    buts_type_situation_numerique_USDH = 0
                                                    
                                                    
                                                    
                                                    # Bilan adversaires :
                                                    
                                                    buts_type_situation_numerique_adv = 0
                                                    
                                                    
                                                

                                               
                                                
                                                
                                                
                                                unite = f" {type_bilan} / p√©riode jou√©e par l'USDH en {situation_numerique.split(sep = ' ')[0][0:4]}."
                                                
                                                
                                                if type_bilan in ["buts marqu√©s" , "buts encaiss√©s"] :
                                                
                                                    col4.write(f"{type_bilan} / p√©riode que l'USDH a jou√© en {situation_numerique.split(sep = ' ')[0][0:4]} :") 
                                                    
                                                    
                                                else : 
                                                    
                                                    col4.write("Diff√©rentiel de buts / p√©riode que l'USDH a jou√© en {situation_numerique.split(sep = ' ')[0][0:4]} :")
                                                
                                         
                                            
                                         
                                            
                                         
                                            
                                         
                                 
                                            # Calcul de la diff√©rence de bilan sur les 'situation_numerique' EN FAVEUR DE L'USDH : 
                                                    
                                                
                                            difference_type_buts_situation_numerique = np.round(buts_type_situation_numerique_USDH - buts_type_situation_numerique_adv , 2)
                                                
                                            
                                            
                                            
                                            # R√©-√©criture de la diff√©rence bilan sur les 'situation_numerique' :
                                             
                                            if difference_type_buts_situation_numerique > 0 : 
                                                    
                                                difference_type_buts_situation_numerique = "+ " + str(difference_type_buts_situation_numerique) + unite
                                                
                                                
                                                
                                            elif difference_type_buts_situation_numerique < 0 : 
                                                
                                                difference_type_buts_situation_numerique = "- " + str(abs(difference_type_buts_situation_numerique)) + unite
                                                
                                                
                                                    
                                            
                                            
                                            
                                            # On √©crit le delta de bilan en 'situation_numerique' sous l'USDH (√† gauche) :
                                                
                                            col3.metric(label = "" , 
                                                        value = np.round(buts_type_situation_numerique_USDH , 2) ,
                                                        delta = str(difference_type_buts_situation_numerique) , 
                                                        delta_color = delta_color)
                                        
                                        
                                        
                                            col6.metric(label = "" , 
                                                        value = np.round(buts_type_situation_numerique_adv , 2) , 
                                                        delta = " ")
                                        
                                            
                                            
    
                                            
                                            
                                            for i in range(3) : 
                                                
                                                st.write("")
                                                
                                                
                                                
                                                
                                            
                                        
                                        for i in range(5) : 
                                            
                                            st.write("")
                                        
                                        
                                    
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                # Analyse des p√©riodes d'EGALITE NUMERIQUE des 2 √©quipes : 
                                    
                                    
                                if bouton_unite_bilan_situation_numerique != " " :
                                 
                                
                            
                                    st.write("------------------------------------------------------------------------")
                                        
                                        
                                        
                                        
                                    st.markdown("<h1 style='text-align: center; color: white;'>Gestion des p√©riodes d'√©galit√© num√©rique.</h1>",
                                                     unsafe_allow_html = True)   
                                        
                                    
                                    
                                
                                
                                
                                    for i in range(5) : 
                                        
                                        st.write("")
                                        
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    # M√©trique n¬∞8 : temps pass√© √† √©galit√© num√©rique par les 2 √©quipes :
                                
    
                            
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                
                                    col4.write(f"Temps pass√© √† √©galit√© num√©rique ({bouton_unite}, en minutes) :")
                                    
                                    
                                    
                                    
                                        
                                    # On r√©cup√®re le temps pass√© √† √©galit√© num√©rique par l'USDH et par ses adversaires tout au long de la saison :
                                    
                                    # CAS 1 : on souhaite afficher le temps TOTAL √† √©galit√© des 2 √©quipes :
                                    
                                    if bouton_unite == "total" :
                                    
                                        temps_egalite_num = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                situation = "√©galit√© num√©rique").sum()
                                        
                                       
                                        
                                        
                                        
                                    else :  # bouton_unite == "moyenne / match"
                                                
                                        temps_egalite_num = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                situation = "√©galit√© num√©rique").mean()
                                        
                                        
                                        
                                        
                                        
                                    
                                    
                                    
                                        
                                    col3.metric(label = "" , 
                                                value = np.round(temps_egalite_num , 2))
                                
                                
                                    col6.metric(label = "" , 
                                                value = np.round(temps_egalite_num , 2))
                                
                                
                                
                                
                                
                                
                                
                                    for i in range(7) : 
                                
                                        st.write("")
                                        
                                        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    # M√©trique n¬∞9-10-11 : Affichage du BILAN de chaque √©quipe sur LES PERIODES (communes) d'EGALITE NUMERIQUE DES 2 EQUIPES : 
                                
    
                                    col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                            
                                    col4.write("BILAN de l'√©quipe lorsqu'elle joue √† √©galit√© num√©rique :") 
                                    
                                    
                                    
                                    for i in range(3) : 
                                        
                                        st.write("")
                                    
                                    
                                    
                                    
                                    
                                    
                                    # Cr√©ation d'un bouton pour le choix de l'unit√© des buts marqu√©s / encaiss√©s / diff√©rentiels sur les √©galit√©s num√©riques : 
                                     
                                   
                                    bouton_unite_bilan_ega = col6.selectbox("Bilan exprim√© en :" , 
                                                                            [" " , 
                                                                             "total" , 
                                                                             "/ minute jou√©e √† √©galit√© num"])
    
                                        
                                    
                                    

                                    
                                    st.write("")
                                    st.write("")
                                    
                                    
                                    
                                    
                                    
                                    if bouton_unite_bilan_ega != " " :
                                        
                                        
                                        for type_bilan , delta_color in zip(["buts marqu√©s" , "buts encaiss√©s" , "diff√©rentiel de buts"] , ["normal" , "inverse" , "normal"]) :
                                            
                                            
                                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,2,1.15,2.3,1])
                                
                                            
                                        
                                            
                                            
                                            # R√©cup√©ration du bilan du type renseign√© de l'√©quipe √† domicile lorsqu'elle joue √† √©galit√© num√©rique, et idem pour l'√©quipe √† l'ext√©rieur :
                                             
                                            if bouton_unite_bilan_ega == "total" :
                                                
                                                
                                                
                                                # Bilan de l'USDH : 
                                                    
                                                buts_type_a_ega_USDH = S_bilan_situation_numerique_saison(data = df , 
                                                                                                          equipe = "USDH" , 
                                                                                                          situation = "√©galit√© num√©rique" , 
                                                                                                          type_bilan = type_bilan).sum()
                                             
                                                
                                                
                                                
                                                # Bilan de ses adversaires : 
                                                    
                                                buts_type_a_ega_adv = S_bilan_situation_numerique_saison(data = df , 
                                                                                                         equipe = "adversaire" , 
                                                                                                         situation = "√©galit√© num√©rique" , 
                                                                                                         type_bilan = type_bilan).sum()
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                unite = f" {type_bilan}"
                                                
                                                
                                                
                                                
                                                col4.write(f"{type_bilan} sur les p√©riodes d'√©galit√© num√©rique :") 
                                                    
                                                    
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                            elif bouton_unite_bilan_ega == "/ minute jou√©e √† √©galit√© num" :
                                                
                                                
                                                
                                                # Calcul du temps pass√© √† √©galit√© num√©rique par les 2 √©quipes depuis le d√©but de la saison (temps total) : 
                                                    
                                                temps_egalite_num = S_durees_situation_numerique_saison(data = df , equipe = "USDH" , 
                                                                                                        situation = "√©galit√© num√©rique").sum()
                                                
                                                
                                                
                                                
                                                
                                                
                                                # SI les 2 √©quipes ONT JOUES A EGALITE NUMERIQUE cette saison (pour √©viter une division par 0) : 
                                                
                                                if temps_egalite_num > 0 :
                                                    
                                                    buts_type_a_ega_USDH = S_bilan_situation_numerique_saison(data = df , equipe = "USDH" ,  situation = "√©galit√© num√©rique" , type_bilan = type_bilan).sum() / temps_egalite_num
                                                    buts_type_a_ega_adv = S_bilan_situation_numerique_saison(data = df , equipe = "adversaire" ,  situation = "√©galit√© num√©rique" , type_bilan = type_bilan).sum() / temps_egalite_num
                                                
                                                
                                                
                                                
                                                # SINON, si l'USDH a pass√© 0 seconde √† jouer en sup√©riorit√© cette saison :
                                                
                                                else : 
                                                    
                                                    buts_type_a_ega_USDH = 0
                                                    buts_type_a_ega_adv = 0
                                                    
                                                
                                                
                                                
                                                
    
                                                
                                                
                                                unite = f" {type_bilan} / min √† √©galit√© num."
                                                
                                                
                                                if type_bilan in ["buts marqu√©s" , "buts encaiss√©s"] :
                                                
                                                    col4.write(f"{type_bilan} / minute que l'√©quipe a jou√© √† √©galit√© num√©rique :") 
                                                    
                                                    
                                                else : 
                                                    
                                                    col4.write("Diff√©rentiel de buts / minute que l'√©quipe a jou√© √† √©galit√© num√©rique :")
                                                
                                                
                                         
                                            
    
                                 
                                            # Calcul de la diff√©rence de bilan sur les √©galit√©s num√©riques EN FAVEUR DE L'USDH : 
                                                    
                                                
                                            difference_type_buts_ega = np.round(buts_type_a_ega_USDH - buts_type_a_ega_adv , 2)
                                                
                                            
                                            
                                            # R√©-√©criture de la diff√©rence bilan sur les √©galit√©s nums :
                                             
                                            if difference_type_buts_ega > 0 : 
                                                    
                                                difference_type_buts_ega = "+ " + str(difference_type_buts_ega) + unite
                                                
                                                
                                                
                                            elif difference_type_buts_ega < 0 : 
                                                
                                                difference_type_buts_ega = "- " + str(abs(difference_type_buts_ega)) + unite
                                                
                                                
                                                    
                                            
                                            
                                            
                                            # On √©crit le delta de bilan en sup√©riorit√© sous l'USDH (√† gauche) :
                                                
                                            col3.metric(label = "" , 
                                                        value = np.round(buts_type_a_ega_USDH , 2) ,
                                                        delta = str(difference_type_buts_ega) , 
                                                        delta_color = delta_color)
                                        
                                        
                                        
                                            col6.metric(label = "" , 
                                                        value = np.round(buts_type_a_ega_adv , 2) , 
                                                        delta = " ")
                                        
                                            
                                            
    
                                            
                                            
                                            for i in range(3) : 
                                                
                                                st.write("")
                                                
                                                
                                                
                                                
                                            
                                        
                                        for i in range(5) : 
                                            
                                            st.write("")
                                        
                                        
                                    
                                    
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
    
                                
                                
                                        for i in range(10) : 
                            
                                            st.write("")
                                            
                                            
                                            
                                        st.write("-------------------------------------------------------------------------------------")
                                    
                        
                        
                        
                        
                        
                        
                                    
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                                        # PARTIE 3 : m√©triques / graphiques de bilan de saison li√©s √† la DYNAMIQUE DE JEU :
                                        
                                        
                                        st.markdown("<h1 style='text-align: center; color: white;'>Statistiques li√©es √† la dynamique de jeu dans les moments cruciaux.</h1>",
                                                    unsafe_allow_html = True)  
                                        
                                        
                                        st.write("-------------------------------------------------------------------------------------")
                                        
                                    
                                    
                                    
                                    
                                        for i in range(3) : 
                                            
                                            st.write("")
                                            
                                            

                                    
                                    
                                    
                                    
                                        # M√©trique n¬∞13-14-15-16-17 : Affichage de la dynamique DES 2 EQUIPES dans les p√©riodes cruciales du match (d√©but de match, avant mi-temps, retour de mi-temps et money time) :
                            
                                        L_dates = [10 , 30 , 35 , 35 , 60]               # la liste des dates
                                        L_x_dernieres_minutes = [10 , 5 , 5 , 10 , 10]   # la liste des x derni√®res minutes √† regarder pr√©c√©dant chaque date de la liste ci-dessus
                                        
                                        
                                        
                                        
                                        # Pour chaque p√©riode cruciale du match :
                                            
                                        for date , x_dernieres_minutes in zip(L_dates , L_x_dernieres_minutes) :
                                            
                                            
                                            L_buts_marques_periode_cruciale_USDH = []  # la liste des buts marqu√©s par l'USDH dans cette p√©riode cruciale, par match
                                            L_buts_encaisses_periode_cruciale_USDH = []   # la liste des buts encaiss√©s par l'adversaire de l'USDH dans cette p√©riode cruciale, par match
                                            L_differentiels_buts_periode_cruciale_USDH = []  # la liste des diff√©rentiels de buts en faveur de l'USDH dans cette p√©riode cruciale, par match
                                            
                                            
                                            col1 , col2 , col3 , col4 , col5 , col6 , col7 = st.columns([1,2,2.3,1,1.15,2.3,1]) 
                                            
                                            
                                            
                                            # CAS 1 : SI l'on regarde la dynamique en DEBUT DE MATCH :
                                            
                                            if date == 10 :
                                                        
                                                col4.write("Dynamique d√©but de match (0-10√®me minute) :") 
                                                
                                            
                                            
                                            
                                            # CAS 2 : SI l'on regarde la dynamique d'AVANT MI-TEMPS :
                                            
                                            elif date == 30 : 
                                                
                                                col4.write("Dynamique avant mi-temps (25-30√®me minute)")
                                                
                                                
                                            
                                            
                                            elif date == 35 : 
                                                
                                                
                                                # CAS 3 : SI l'on regarde la dynamique au RETOUR DE MATCH :
                                                
                                                if x_dernieres_minutes == 5 :
                                                
                                                    col4.write("Dynamique retour de mi-temps (30-35√®me minute) :")
                                                    
                                                 
                                                    
                                                 
                                                # CAS 4 : SI l'on regarde la dynamique AUTOUR DE LA MI-TEMPS (5 minutes avant + 5 minutes au retour) :
                                                
                                                else : 
                                                
                                                    col4.write("Dynamique aux alentours de la mi-temps (25-35√®me minute) :")    
                                                
                                                
                                                
                                               
                                                
                                            # CAS 5 : SI l'on regarde la dynamique dans le MONEY TIME :
                                                
                                            else : 
                                                
                                                col4.write("Dynamique money-time (50-60√®me minute) :")
                                                
                                                
                                            
                                            
                                            # Pour chaque match disput√© par l'USDH cette saison : 
                                                
                                            for journee in dico_rencontres_USDH.keys() :
                                                
                                                
                                                # R√©cup√©ration de l'√©quipe jouant √† domicile et √† l'ext√©rieur lors de match :
                                                
                                                equipe_dom_match = df[df["journ√©e"] == journee]["domicile"].unique()
                                                equipe_dom_match = equipe_dom_match[0]    # √©quipe jouant √† domicile
                                                
                                                
                                                equipe_ext_match = df[df["journ√©e"] == journee]["ext√©rieur"].unique()
                                                equipe_ext_match = equipe_ext_match[0]    # √©quipe jouant √† l'ext√©rieur
                                                
                                                
                                            
                                                # R√©cup√©ration du nombre de buts inscrits par l'USDH et par son adversaire dans CETTE p√©riode cruciale, lors de CE match :
                                                        
                                                if equipe_dom_match == "USDH" :
                                                    
                                                    nbr_buts_periode_cruciale_USDH = dynamique_buts_marques(data = df , 
                                                                                                            date = date , 
                                                                                                            x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                            journee = journee , 
                                                                                                            equipe = "domicile")
                                                    
                                                    
                                                    nbr_buts_periode_cruciale_adv = dynamique_buts_marques(data = df , 
                                                                                                           date = date , 
                                                                                                           x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                           journee = journee , 
                                                                                                           equipe = "ext√©rieur")
                                                    
                                                    
                                                    
                                                    
                                                    
                                                else :   # equipe_ext_match == "USDH" :
                                                    
                                                    nbr_buts_periode_cruciale_USDH = dynamique_buts_marques(data = df , 
                                                                                                            date = date , 
                                                                                                            x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                            journee = journee , 
                                                                                                            equipe = "ext√©rieur")
                                                    
                                                    
                                                    nbr_buts_periode_cruciale_adv = dynamique_buts_marques(data = df , 
                                                                                                           date = date , 
                                                                                                           x_dernieres_minutes = x_dernieres_minutes  , 
                                                                                                           journee = journee , 
                                                                                                           equipe = "domicile")
                                                
                                        
                                            
                                 
                                    
                                                # Calcul de la diff√©rence de buts marqu√©s EN FAVEUR DE L'USDH dans cette p√©riode de jeu cruciale : 
                                                        
                                                    
                                                difference_nbr_buts_periode_cruciale = nbr_buts_periode_cruciale_USDH - nbr_buts_periode_cruciale_adv
                                                    
                                                
                                                
                                                # On ajoute le nombre de buts marqu√©s / encaiss√©s + le diff√©rentiel de buts √† leur liste d√©di√©e : 
                                                    
                                                L_buts_marques_periode_cruciale_USDH.append(nbr_buts_periode_cruciale_USDH)
                                                L_buts_encaisses_periode_cruciale_USDH.append(nbr_buts_periode_cruciale_adv)
                                                L_differentiels_buts_periode_cruciale_USDH.append(difference_nbr_buts_periode_cruciale)
                                            
                                            
                                            
                                            
                                            # On r√©cup√®re le nombre de buts marqu√©s / encaiss√©s + le diff√©rentiel de buts TOTAL ou MOYEN / MATCH en sommant ou en moyennant les 3 listes cr√©√©es :
                                                
                                            if bouton_unite == "total" : 
                                                
                                                nbr_buts_marques_USDH_periode_cruciale = pd.Series(L_buts_marques_periode_cruciale_USDH).sum()
                                                nbr_buts_encaisses_USDH_periode_cruciale = pd.Series(L_buts_encaisses_periode_cruciale_USDH).sum()
                                                differentiel_buts_USDH_periode_cruciale = np.round(pd.Series(L_differentiels_buts_periode_cruciale_USDH).sum() , 2)
                                            
                                            
                                            
                                            
                                            else :    # bouton_unite == "moyenne / match" : 
                                                
                                                nbr_buts_marques_USDH_periode_cruciale = pd.Series(L_buts_marques_periode_cruciale_USDH).mean()
                                                nbr_buts_encaisses_USDH_periode_cruciale = pd.Series(L_buts_encaisses_periode_cruciale_USDH).mean()
                                                differentiel_buts_USDH_periode_cruciale = np.round(pd.Series(L_differentiels_buts_periode_cruciale_USDH).mean() , 2)
                                            
                                            
                                            
                                            
                                            
                                            
                                    
                                            # R√©-√©criture du diff√©rentiel de buts suivant son signe : 
                                                
                                            if differentiel_buts_USDH_periode_cruciale > 0 :
                                                
                                                differentiel_buts_USDH_periode_cruciale = "+ " + str(differentiel_buts_USDH_periode_cruciale) + " buts marqu√©s"
                                                
                                                
                                                
                                                
                                            elif differentiel_buts_USDH_periode_cruciale < 0 :
                                                
                                                differentiel_buts_USDH_periode_cruciale = "- " + str(abs(differentiel_buts_USDH_periode_cruciale)) + " buts marqu√©s"
                                                
                                                        
                                                        
                                                        
       
                                                  
                                                  
                                            col3.metric(label = "" , 
                                                        value = np.round(nbr_buts_marques_USDH_periode_cruciale , 2) ,
                                                        delta = differentiel_buts_USDH_periode_cruciale)
                                            
                                                
                                                
                                            col6.metric(label = "" , 
                                                        value = np.round(nbr_buts_encaisses_USDH_periode_cruciale , 2) ,
                                                        delta = " ")
                                            
                                            
                                            
                                            
                                            
    
                                            
                                            for i in range(6) : 
                                                
                                                st.write("")
                                            
                                            
                                            
                                    
                                    
                                    
                                
                                    
